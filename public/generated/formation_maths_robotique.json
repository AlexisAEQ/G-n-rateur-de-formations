{
  "title": "Mathématiques pour Techniciens en Robotique",
  "type": "skills",
  "company": "AEQ",
  "duration": 150,
  "difficulty": "Avancée",
  "instructor": "Alexis Ross",
  "version": "1.0",
  "last_updated": "2025-05-28",
  "theme": "industrial",
  "primary_color": "#059669",
  "accent_color": "#dc2626",
  "learning_objectives": [
    "Maîtriser les systèmes de coordonnées et transformations géométriques en robotique",
    "Calculer les vitesses et accélérations dans les mouvements robotiques",
    "Appliquer la trigonométrie pour résoudre des problèmes de positionnement",
    "Utiliser l'algèbre vectorielle pour analyser les forces et déplacements",
    "Comprendre les matrices de transformation homogène",
    "Résoudre des problèmes de cinématique directe et inverse"
  ],
  "prerequisites": [
    "Mathématiques de niveau collégial",
    "Notions de base en physique mécanique",
    "Expérience pratique avec des systèmes robotiques",
    "Capacité à utiliser une calculatrice scientifique"
  ],
  "resources": {
    "videos": [
      {
        "title": "Introduction aux coordonnées cartésiennes en robotique",
        "file": "maths-robotique-module1-coordonnees.mp4",
        "duration": "12min"
      },
      {
        "title": "Démonstration des transformations géométriques",
        "file": "maths-robotique-module2-transformations.mp4",
        "duration": "18min"
      },
      {
        "title": "Calculs de vitesse et trajectoires",
        "file": "maths-robotique-module3-cinematique.mp4",
        "duration": "15min"
      },
      {
        "title": "Applications pratiques des matrices",
        "file": "maths-robotique-module4-matrices.mp4",
        "duration": "20min"
      }
    ],
    "documents": [
      {
        "title": "Formulaire mathématique robotique",
        "file": "Robotics_Math_Formulas_FR.pdf"
      },
      {
        "title": "Exercices corrigés - Transformations",
        "file": "Math_Exercises_Transformations.pdf"
      },
      {
        "title": "Tables trigonométriques de référence",
        "file": "Trigonometry_Reference_Tables.pdf"
      }
    ],
    "links": [
      {
        "title": "Calculateur de matrices en ligne",
        "url": "https://www.symbolab.com/solver/matrix-calculator",
        "description": "Outil pour vérifier vos calculs matriciels"
      },
      {
        "title": "Simulateur de transformations géométriques",
        "url": "https://www.geogebra.org/3d",
        "description": "Visualisation interactive des transformations"
      }
    ]
  },
  "assessment": {
    "practical_weight": 60,
    "theory_weight": 40,
    "passing_grade": 75,
    "exercises": [
      "Calcul de position d'un effecteur à partir d'angles articulaires",
      "Détermination de trajectoire optimale entre deux points",
      "Résolution d'un problème de cinématique inverse",
      "Application des matrices de transformation homogène"
    ]
  },
  "slug": "formation_maths_robotique",
  "filename": "formation_maths_robotique.md",
  "lastProcessed": "2025-06-02T13:46:48.365Z",
  "generatorVersion": "1.0.1",
  "modules": [
    {
      "id": "-module-1-systmes-de-coordonnes-et-repres",
      "title": "\udcd0 Module 1 : Systèmes de Coordonnées et Repères",
      "titleWithEmoji": "📐 Module 1 : Systèmes de Coordonnées et Repères",
      "emoji": "\ud83d",
      "order": 1,
      "content": "## Introduction aux Systèmes de Coordonnées\r\n\r\nEn robotique, la **localisation précise** des objets et des outils est fondamentale. Un technicien doit maîtriser les différents systèmes de coordonnées pour comprendre et programmer les mouvements robotiques.\r\n\r\n### Système de Coordonnées Cartésiennes\r\n\r\nLe système cartésien utilise trois axes perpendiculaires : **X, Y, et Z**.\r\n\r\n**Caractéristiques principales :**\r\n- **Axe X** : Généralement horizontal, vers la droite\r\n- **Axe Y** : Généralement horizontal, vers l'avant  \r\n- **Axe Z** : Généralement vertical, vers le haut\r\n- **Origine (0,0,0)** : Point de référence du système\r\n\r\n> 📹 **Vidéo recommandée** : \"Introduction aux coordonnées cartésiennes en robotique\" (12min)\r\n\r\n### Conventions Robotiques Standards\r\n\r\n**Convention main droite :**\r\n1. Pointez le pouce dans la direction X positive\r\n2. L'index indique Y positive\r\n3. Le majeur indique Z positive\r\n\r\nCette convention assure la cohérence entre tous les systèmes robotiques.\r\n\r\n### Système de Coordonnées Cylindriques\r\n\r\nParticulièrement utile pour les robots à configuration cylindrique.\r\n\r\n**Paramètres :**\r\n- **ρ (rho)** : Distance radiale depuis l'axe Z\r\n- **φ (phi)** : Angle autour de l'axe Z\r\n- **z** : Hauteur le long de l'axe Z\r\n\r\n**Conversion cartésien → cylindrique :**\r\n- ρ = √(x² + y²)\r\n- φ = arctan(y/x)\r\n- z = z\r\n\r\n### Système de Coordonnées Sphériques\r\n\r\nIdéal pour les robots à poignet sphérique.\r\n\r\n**Paramètres :**\r\n- **r** : Distance depuis l'origine\r\n- **θ (theta)** : Angle d'élévation depuis le plan XY\r\n- **φ (phi)** : Angle azimutal dans le plan XY\r\n\r\n**Conversion cartésien → sphérique :**\r\n- r = √(x² + y² + z²)\r\n- θ = arccos(z/r)\r\n- φ = arctan(y/x)\r\n\r\n## Exercice Pratique 1 : Conversion de Coordonnées\r\n\r\n**Objectif** : Maîtriser les conversions entre systèmes de coordonnées\r\n\r\n**Problème :**\r\nUn robot doit atteindre un point situé à :\r\n- Coordonnées cartésiennes : (150mm, 200mm, 300mm)\r\n\r\n**Tâches :**\r\n1. Convertir en coordonnées cylindriques\r\n2. Convertir en coordonnées sphériques\r\n3. Vérifier vos calculs avec le simulateur en ligne\r\n\r\n**Solution :**\r\n\r\n*Coordonnées cylindriques :*\r\n- ρ = √(150² + 200²) = √(22500 + 40000) = 250mm\r\n- φ = arctan(200/150) = 53.13°\r\n- z = 300mm\r\n\r\n*Coordonnées sphériques :*\r\n- r = √(150² + 200² + 300²) = √112500 = 335.4mm\r\n- θ = arccos(300/335.4) = 26.57°\r\n- φ = arctan(200/150) = 53.13°\r\n\r\n**Temps alloué** : 20 minutes\r\n\r\n---",
      "htmlContent": "<hundefined id=\"object-object\">[object Object]</hundefined><p>En robotique, la <strong>localisation précise</strong> des objets et des outils est fondamentale. Un technicien doit maîtriser les différents systèmes de coordonnées pour comprendre et programmer les mouvements robotiques.</p>\n<hundefined id=\"object-object\">[object Object]</hundefined><p>Le système cartésien utilise trois axes perpendiculaires : <strong>X, Y, et Z</strong>.</p>\n<p><strong>Caractéristiques principales :</strong></p>\n<ul>\n<li><strong>Axe X</strong> : Généralement horizontal, vers la droite</li>\n<li><strong>Axe Y</strong> : Généralement horizontal, vers l&#39;avant  </li>\n<li><strong>Axe Z</strong> : Généralement vertical, vers le haut</li>\n<li><strong>Origine (0,0,0)</strong> : Point de référence du système</li>\n</ul>\n<blockquote>[object Object]</blockquote><hundefined id=\"object-object\">[object Object]</hundefined><p><strong>Convention main droite :</strong></p>\n<ol>\n<li>Pointez le pouce dans la direction X positive</li>\n<li>L&#39;index indique Y positive</li>\n<li>Le majeur indique Z positive</li>\n</ol>\n<p>Cette convention assure la cohérence entre tous les systèmes robotiques.</p>\n<hundefined id=\"object-object\">[object Object]</hundefined><p>Particulièrement utile pour les robots à configuration cylindrique.</p>\n<p><strong>Paramètres :</strong></p>\n<ul>\n<li><strong>ρ (rho)</strong> : Distance radiale depuis l&#39;axe Z</li>\n<li><strong>φ (phi)</strong> : Angle autour de l&#39;axe Z</li>\n<li><strong>z</strong> : Hauteur le long de l&#39;axe Z</li>\n</ul>\n<p><strong>Conversion cartésien → cylindrique :</strong></p>\n<ul>\n<li>ρ = √(x² + y²)</li>\n<li>φ = arctan(y/x)</li>\n<li>z = z</li>\n</ul>\n<hundefined id=\"object-object\">[object Object]</hundefined><p>Idéal pour les robots à poignet sphérique.</p>\n<p><strong>Paramètres :</strong></p>\n<ul>\n<li><strong>r</strong> : Distance depuis l&#39;origine</li>\n<li><strong>θ (theta)</strong> : Angle d&#39;élévation depuis le plan XY</li>\n<li><strong>φ (phi)</strong> : Angle azimutal dans le plan XY</li>\n</ul>\n<p><strong>Conversion cartésien → sphérique :</strong></p>\n<ul>\n<li>r = √(x² + y² + z²)</li>\n<li>θ = arccos(z/r)</li>\n<li>φ = arctan(y/x)</li>\n</ul>\n<hundefined id=\"object-object\">[object Object]</hundefined><p><strong>Objectif</strong> : Maîtriser les conversions entre systèmes de coordonnées</p>\n<p><strong>Problème :</strong>\nUn robot doit atteindre un point situé à :</p>\n<ul>\n<li>Coordonnées cartésiennes : (150mm, 200mm, 300mm)</li>\n</ul>\n<p><strong>Tâches :</strong></p>\n<ol>\n<li>Convertir en coordonnées cylindriques</li>\n<li>Convertir en coordonnées sphériques</li>\n<li>Vérifier vos calculs avec le simulateur en ligne</li>\n</ol>\n<p><strong>Solution :</strong></p>\n<p><em>Coordonnées cylindriques :</em></p>\n<ul>\n<li>ρ = √(150² + 200²) = √(22500 + 40000) = 250mm</li>\n<li>φ = arctan(200/150) = 53.13°</li>\n<li>z = 300mm</li>\n</ul>\n<p><em>Coordonnées sphériques :</em></p>\n<ul>\n<li>r = √(150² + 200² + 300²) = √112500 = 335.4mm</li>\n<li>θ = arccos(300/335.4) = 26.57°</li>\n<li>φ = arctan(200/150) = 53.13°</li>\n</ul>\n<p><strong>Temps alloué</strong> : 20 minutes</p>\n<hr>\n",
      "components": [
        {
          "type": "VideoPlayer",
          "detected": true
        },
        {
          "type": "ExerciseBlock",
          "detected": true
        }
      ],
      "estimatedDuration": 26,
      "type": "content"
    },
    {
      "id": "-module-2-transformations-gomtriques",
      "title": "\udd04 Module 2 : Transformations Géométriques",
      "titleWithEmoji": "🔄 Module 2 : Transformations Géométriques",
      "emoji": "\ud83d",
      "order": 2,
      "content": "## Translations et Rotations\r\n\r\nLes **transformations géométriques** permettent de décrire le mouvement d'un objet dans l'espace. C'est la base de toute programmation robotique.\r\n\r\n### Translation\r\n\r\nUne translation déplace un point sans changer son orientation.\r\n\r\n**Formule de translation :**\r\n```\r\nx' = x + dx\r\ny' = y + dy  \r\nz' = z + dz\r\n```\r\n\r\nOù (dx, dy, dz) est le vecteur de translation.\r\n\r\n### Rotation autour d'un Axe\r\n\r\n**Rotation autour de l'axe Z (dans le plan XY) :**\r\n```\r\nx' = x⋅cos(θ) - y⋅sin(θ)\r\ny' = x⋅sin(θ) + y⋅cos(θ)\r\nz' = z\r\n```\r\n\r\n**Rotation autour de l'axe X :**\r\n```\r\nx' = x\r\ny' = y⋅cos(θ) - z⋅sin(θ)\r\nz' = y⋅sin(θ) + z⋅cos(θ)\r\n```\r\n\r\n**Rotation autour de l'axe Y :**\r\n```\r\nx' = x⋅cos(θ) + z⋅sin(θ)\r\ny' = y\r\nz' = -x⋅sin(θ) + z⋅cos(θ)\r\n```\r\n\r\n> 📹 **Vidéo recommandée** : \"Démonstration des transformations géométriques\" (18min)\r\n\r\n### Angles d'Euler\r\n\r\nLes **angles d'Euler** décrivent l'orientation d'un objet avec trois rotations successives :\r\n\r\n1. **Roulis (Roll)** : Rotation autour de l'axe X\r\n2. **Tangage (Pitch)** : Rotation autour de l'axe Y  \r\n3. **Lacet (Yaw)** : Rotation autour de l'axe Z\r\n\r\n> ⚠️ **IMPORTANT** : L'ordre des rotations affecte le résultat final !\r\n\r\n## Matrices de Transformation Homogène\r\n\r\nLes **matrices 4×4** permettent de combiner translation et rotation en une seule opération.\r\n\r\n**Structure générale :**\r\n```\r\n[R₁₁ R₁₂ R₁₃ tx]\r\n[R₂₁ R₂₂ R₂₃ ty]\r\n[R₃₁ R₃₂ R₃₃ tz]\r\n[0   0   0   1 ]\r\n```\r\n\r\nOù :\r\n- **R** = Matrice de rotation 3×3\r\n- **t** = Vecteur de translation (tx, ty, tz)\r\n\r\n### Exemple Concret\r\n\r\n**Matrice de translation pure :**\r\n```\r\n[1  0  0  50 ]    # Translation de 50mm en X\r\n[0  1  0  30 ]    # Translation de 30mm en Y\r\n[0  0  1  100]    # Translation de 100mm en Z\r\n[0  0  0  1  ]\r\n```\r\n\r\n**Matrice de rotation de 90° autour de Z :**\r\n```\r\n[0  -1  0  0]     # cos(90°) = 0, sin(90°) = 1\r\n[1   0  0  0]\r\n[0   0  1  0]\r\n[0   0  0  1]\r\n```\r\n\r\n## Exercice Pratique 2 : Transformations Successives\r\n\r\n**Objectif** : Appliquer plusieurs transformations géométriques\r\n\r\n**Contexte :**\r\nUn bras robotique doit :\r\n1. Tourner de 45° autour de l'axe Z\r\n2. Se déplacer de 100mm en X\r\n3. Tourner de 30° autour de l'axe Y\r\n\r\n**Instructions :**\r\n1. Calculer la matrice de chaque transformation\r\n2. Multiplier les matrices dans l'ordre correct\r\n3. Appliquer le résultat au point (50, 0, 0)\r\n\r\n**Temps alloué** : 30 minutes\r\n\r\n---",
      "htmlContent": "<hundefined id=\"object-object\">[object Object]</hundefined><p>Les <strong>transformations géométriques</strong> permettent de décrire le mouvement d&#39;un objet dans l&#39;espace. C&#39;est la base de toute programmation robotique.</p>\n<hundefined id=\"object-object\">[object Object]</hundefined><p>Une translation déplace un point sans changer son orientation.</p>\n<p><strong>Formule de translation :</strong></p>\n<pre><code>x&#39; = x + dx\ny&#39; = y + dy  \nz&#39; = z + dz\n</code></pre>\n<p>Où (dx, dy, dz) est le vecteur de translation.</p>\n<hundefined id=\"object-object\">[object Object]</hundefined><p><strong>Rotation autour de l&#39;axe Z (dans le plan XY) :</strong></p>\n<pre><code>x&#39; = x⋅cos(θ) - y⋅sin(θ)\ny&#39; = x⋅sin(θ) + y⋅cos(θ)\nz&#39; = z\n</code></pre>\n<p><strong>Rotation autour de l&#39;axe X :</strong></p>\n<pre><code>x&#39; = x\ny&#39; = y⋅cos(θ) - z⋅sin(θ)\nz&#39; = y⋅sin(θ) + z⋅cos(θ)\n</code></pre>\n<p><strong>Rotation autour de l&#39;axe Y :</strong></p>\n<pre><code>x&#39; = x⋅cos(θ) + z⋅sin(θ)\ny&#39; = y\nz&#39; = -x⋅sin(θ) + z⋅cos(θ)\n</code></pre>\n<blockquote>[object Object]</blockquote><hundefined id=\"object-object\">[object Object]</hundefined><p>Les <strong>angles d&#39;Euler</strong> décrivent l&#39;orientation d&#39;un objet avec trois rotations successives :</p>\n<ol>\n<li><strong>Roulis (Roll)</strong> : Rotation autour de l&#39;axe X</li>\n<li><strong>Tangage (Pitch)</strong> : Rotation autour de l&#39;axe Y  </li>\n<li><strong>Lacet (Yaw)</strong> : Rotation autour de l&#39;axe Z</li>\n</ol>\n<blockquote>[object Object]</blockquote><hundefined id=\"object-object\">[object Object]</hundefined><p>Les <strong>matrices 4×4</strong> permettent de combiner translation et rotation en une seule opération.</p>\n<p><strong>Structure générale :</strong></p>\n<pre><code>[R₁₁ R₁₂ R₁₃ tx]\n[R₂₁ R₂₂ R₂₃ ty]\n[R₃₁ R₃₂ R₃₃ tz]\n[0   0   0   1 ]\n</code></pre>\n<p>Où :</p>\n<ul>\n<li><strong>R</strong> = Matrice de rotation 3×3</li>\n<li><strong>t</strong> = Vecteur de translation (tx, ty, tz)</li>\n</ul>\n<hundefined id=\"object-object\">[object Object]</hundefined><p><strong>Matrice de translation pure :</strong></p>\n<pre><code>[1  0  0  50 ]    # Translation de 50mm en X\n[0  1  0  30 ]    # Translation de 30mm en Y\n[0  0  1  100]    # Translation de 100mm en Z\n[0  0  0  1  ]\n</code></pre>\n<p><strong>Matrice de rotation de 90° autour de Z :</strong></p>\n<pre><code>[0  -1  0  0]     # cos(90°) = 0, sin(90°) = 1\n[1   0  0  0]\n[0   0  1  0]\n[0   0  0  1]\n</code></pre>\n<hundefined id=\"object-object\">[object Object]</hundefined><p><strong>Objectif</strong> : Appliquer plusieurs transformations géométriques</p>\n<p><strong>Contexte :</strong>\nUn bras robotique doit :</p>\n<ol>\n<li>Tourner de 45° autour de l&#39;axe Z</li>\n<li>Se déplacer de 100mm en X</li>\n<li>Tourner de 30° autour de l&#39;axe Y</li>\n</ol>\n<p><strong>Instructions :</strong></p>\n<ol>\n<li>Calculer la matrice de chaque transformation</li>\n<li>Multiplier les matrices dans l&#39;ordre correct</li>\n<li>Appliquer le résultat au point (50, 0, 0)</li>\n</ol>\n<p><strong>Temps alloué</strong> : 30 minutes</p>\n<hr>\n",
      "components": [
        {
          "type": "VideoPlayer",
          "detected": true
        },
        {
          "type": "ExerciseBlock",
          "detected": true
        },
        {
          "type": "CalloutBox",
          "detected": true
        }
      ],
      "estimatedDuration": 35,
      "type": "content"
    },
    {
      "id": "-module-3-cinmatique-et-dynamique",
      "title": "\udfc3 Module 3 : Cinématique et Dynamique",
      "titleWithEmoji": "🏃 Module 3 : Cinématique et Dynamique",
      "emoji": "\ud83c",
      "order": 3,
      "content": "## Cinématique : Étude du Mouvement\r\n\r\nLa **cinématique** analyse le mouvement sans considérer les forces qui le causent. Elle est essentielle pour programmer des trajectoires fluides.\r\n\r\n### Position, Vitesse et Accélération\r\n\r\n**Relations fondamentales :**\r\n- **Vitesse** = dérivée de la position : v = dp/dt\r\n- **Accélération** = dérivée de la vitesse : a = dv/dt = d²p/dt²\r\n\r\n### Mouvement Rectiligne\r\n\r\n**Équations du mouvement uniforme :**\r\n```\r\nPosition : x(t) = x₀ + v₀⋅t\r\nVitesse : v(t) = v₀ (constante)\r\n```\r\n\r\n**Équations du mouvement uniformément accéléré :**\r\n```\r\nPosition : x(t) = x₀ + v₀⋅t + ½⋅a⋅t²\r\nVitesse : v(t) = v₀ + a⋅t\r\n```\r\n\r\n> 📹 **Vidéo recommandée** : \"Calculs de vitesse et trajectoires\" (15min)\r\n\r\n### Mouvement Circulaire\r\n\r\n**Pour un mouvement circulaire uniforme :**\r\n- **Vitesse angulaire** : ω = θ/t (rad/s)\r\n- **Vitesse linéaire** : v = ω⋅r\r\n- **Accélération centripète** : a = v²/r = ω²⋅r\r\n\r\n### Cinématique Directe\r\n\r\nLa **cinématique directe** calcule la position de l'effecteur à partir des angles articulaires.\r\n\r\n**Pour un bras robotique 2D simple :**\r\n```\r\nx = L₁⋅cos(θ₁) + L₂⋅cos(θ₁ + θ₂)\r\ny = L₁⋅sin(θ₁) + L₂⋅sin(θ₁ + θ₂)\r\n```\r\n\r\nOù :\r\n- L₁, L₂ = longueurs des segments\r\n- θ₁, θ₂ = angles articulaires\r\n\r\n### Cinématique Inverse\r\n\r\nLa **cinématique inverse** détermine les angles articulaires pour atteindre une position donnée.\r\n\r\n**Pour le même bras 2D :**\r\n```\r\nθ₂ = ±arccos((x² + y² - L₁² - L₂²)/(2⋅L₁⋅L₂))\r\nθ₁ = arctan(y/x) - arctan((L₂⋅sin(θ₂))/(L₁ + L₂⋅cos(θ₂)))\r\n```\r\n\r\n> ⚠️ **ATTENTION** : Plusieurs solutions peuvent exister (coude en haut/en bas)\r\n\r\n## Exercice Pratique 3 : Calcul de Trajectoire\r\n\r\n**Objectif** : Calculer une trajectoire point à point\r\n\r\n**Problème :**\r\nUn robot doit se déplacer du point A(100, 50) au point B(200, 150) en 2 secondes avec :\r\n- Accélération de 0.5 sec\r\n- Vitesse constante de 1 sec  \r\n- Décélération de 0.5 sec\r\n\r\n**Tâches :**\r\n1. Calculer la distance totale\r\n2. Déterminer les vitesses maximales\r\n3. Établir les équations de mouvement pour chaque phase\r\n4. Vérifier la continuité de la vitesse\r\n\r\n**Temps alloué** : 25 minutes\r\n\r\n---",
      "htmlContent": "<hundefined id=\"object-object\">[object Object]</hundefined><p>La <strong>cinématique</strong> analyse le mouvement sans considérer les forces qui le causent. Elle est essentielle pour programmer des trajectoires fluides.</p>\n<hundefined id=\"object-object\">[object Object]</hundefined><p><strong>Relations fondamentales :</strong></p>\n<ul>\n<li><strong>Vitesse</strong> = dérivée de la position : v = dp/dt</li>\n<li><strong>Accélération</strong> = dérivée de la vitesse : a = dv/dt = d²p/dt²</li>\n</ul>\n<hundefined id=\"object-object\">[object Object]</hundefined><p><strong>Équations du mouvement uniforme :</strong></p>\n<pre><code>Position : x(t) = x₀ + v₀⋅t\nVitesse : v(t) = v₀ (constante)\n</code></pre>\n<p><strong>Équations du mouvement uniformément accéléré :</strong></p>\n<pre><code>Position : x(t) = x₀ + v₀⋅t + ½⋅a⋅t²\nVitesse : v(t) = v₀ + a⋅t\n</code></pre>\n<blockquote>[object Object]</blockquote><hundefined id=\"object-object\">[object Object]</hundefined><p><strong>Pour un mouvement circulaire uniforme :</strong></p>\n<ul>\n<li><strong>Vitesse angulaire</strong> : ω = θ/t (rad/s)</li>\n<li><strong>Vitesse linéaire</strong> : v = ω⋅r</li>\n<li><strong>Accélération centripète</strong> : a = v²/r = ω²⋅r</li>\n</ul>\n<hundefined id=\"object-object\">[object Object]</hundefined><p>La <strong>cinématique directe</strong> calcule la position de l&#39;effecteur à partir des angles articulaires.</p>\n<p><strong>Pour un bras robotique 2D simple :</strong></p>\n<pre><code>x = L₁⋅cos(θ₁) + L₂⋅cos(θ₁ + θ₂)\ny = L₁⋅sin(θ₁) + L₂⋅sin(θ₁ + θ₂)\n</code></pre>\n<p>Où :</p>\n<ul>\n<li>L₁, L₂ = longueurs des segments</li>\n<li>θ₁, θ₂ = angles articulaires</li>\n</ul>\n<hundefined id=\"object-object\">[object Object]</hundefined><p>La <strong>cinématique inverse</strong> détermine les angles articulaires pour atteindre une position donnée.</p>\n<p><strong>Pour le même bras 2D :</strong></p>\n<pre><code>θ₂ = ±arccos((x² + y² - L₁² - L₂²)/(2⋅L₁⋅L₂))\nθ₁ = arctan(y/x) - arctan((L₂⋅sin(θ₂))/(L₁ + L₂⋅cos(θ₂)))\n</code></pre>\n<blockquote>[object Object]</blockquote><hundefined id=\"object-object\">[object Object]</hundefined><p><strong>Objectif</strong> : Calculer une trajectoire point à point</p>\n<p><strong>Problème :</strong>\nUn robot doit se déplacer du point A(100, 50) au point B(200, 150) en 2 secondes avec :</p>\n<ul>\n<li>Accélération de 0.5 sec</li>\n<li>Vitesse constante de 1 sec  </li>\n<li>Décélération de 0.5 sec</li>\n</ul>\n<p><strong>Tâches :</strong></p>\n<ol>\n<li>Calculer la distance totale</li>\n<li>Déterminer les vitesses maximales</li>\n<li>Établir les équations de mouvement pour chaque phase</li>\n<li>Vérifier la continuité de la vitesse</li>\n</ol>\n<p><strong>Temps alloué</strong> : 25 minutes</p>\n<hr>\n",
      "components": [
        {
          "type": "VideoPlayer",
          "detected": true
        },
        {
          "type": "ExerciseBlock",
          "detected": true
        },
        {
          "type": "CalloutBox",
          "detected": true
        }
      ],
      "estimatedDuration": 31,
      "type": "content"
    },
    {
      "id": "-module-4-algbre-vectorielle-et-matricielle",
      "title": "\uddee Module 4 : Algèbre Vectorielle et Matricielle",
      "titleWithEmoji": "🧮 Module 4 : Algèbre Vectorielle et Matricielle",
      "emoji": "\ud83e",
      "order": 4,
      "content": "## Vecteurs en Robotique\r\n\r\nLes **vecteurs** représentent des grandeurs ayant une magnitude et une direction : forces, vitesses, positions relatives.\r\n\r\n### Opérations Vectorielles Fondamentales\r\n\r\n**Addition de vecteurs :**\r\n```\r\nA⃗ + B⃗ = (Ax + Bx, Ay + By, Az + Bz)\r\n```\r\n\r\n**Produit scalaire :**\r\n```\r\nA⃗ ⋅ B⃗ = Ax⋅Bx + Ay⋅By + Az⋅Bz = |A⃗|⋅|B⃗|⋅cos(θ)\r\n```\r\n\r\n**Produit vectoriel :**\r\n```\r\nA⃗ × B⃗ = (Ay⋅Bz - Az⋅By, Az⋅Bx - Ax⋅Bz, Ax⋅By - Ay⋅Bx)\r\n```\r\n\r\nLe produit vectoriel donne un vecteur perpendiculaire aux deux vecteurs originaux.\r\n\r\n### Applications en Robotique\r\n\r\n**Calcul de couples :**\r\nLe couple τ⃗ exercé par une force F⃗ à une distance r⃗ :\r\n```\r\nτ⃗ = r⃗ × F⃗\r\n```\r\n\r\n**Test de colinéarité :**\r\nDeux vecteurs sont colinéaires si leur produit vectoriel est nul.\r\n\r\n## Matrices en Robotique\r\n\r\nLes **matrices** sont omniprésentes en robotique pour représenter transformations, rotations et systèmes d'équations.\r\n\r\n> 📹 **Vidéo recommandée** : \"Applications pratiques des matrices\" (20min)\r\n\r\n### Opérations Matricielles\r\n\r\n**Multiplication de matrices :**\r\nPour multiplier A(m×n) et B(n×p), le résultat C(m×p) :\r\n```\r\nCij = Σ(k=1 à n) Aik ⋅ Bkj\r\n```\r\n\r\n**Inversion de matrice :**\r\nEssentielle pour la cinématique inverse :\r\n```\r\nA⁻¹ ⋅ A = I (matrice identité)\r\n```\r\n\r\n### Matrice Jacobienne\r\n\r\nLa **matrice jacobienne** relie les vitesses articulaires aux vitesses cartésiennes :\r\n\r\n```\r\nv⃗ = J ⋅ q̇⃗\r\n```\r\n\r\nOù :\r\n- v⃗ = vitesse cartésienne de l'effecteur\r\n- J = matrice jacobienne\r\n- q̇⃗ = vitesses articulaires\r\n\r\n### Déterminant et Singularités\r\n\r\nLe **déterminant** de la jacobienne indique les singularités :\r\n- det(J) = 0 → Configuration singulière\r\n- det(J) ≠ 0 → Configuration normale\r\n\r\n> ⚠️ **IMPORTANT** : Éviter les singularités en programmation de trajectoires\r\n\r\n## Exercice Pratique 4 : Analyse Vectorielle\r\n\r\n**Objectif** : Résoudre un problème d'équilibre des forces\r\n\r\n**Contexte :**\r\nUn robot manipule un objet de 5 kg. Trois forces s'appliquent :\r\n- F₁ = (10, 15, 0) N\r\n- F₂ = (-5, 8, 12) N  \r\n- F₃ = (?, ?, -20) N (force d'équilibre à calculer)\r\n\r\n**Tâches :**\r\n1. Calculer F₃ pour l'équilibre statique\r\n2. Déterminer l'angle entre F₁ et F₂\r\n3. Calculer le moment résultant par rapport à l'origine\r\n\r\n**Temps alloué** : 20 minutes\r\n\r\n---",
      "htmlContent": "<hundefined id=\"object-object\">[object Object]</hundefined><p>Les <strong>vecteurs</strong> représentent des grandeurs ayant une magnitude et une direction : forces, vitesses, positions relatives.</p>\n<hundefined id=\"object-object\">[object Object]</hundefined><p><strong>Addition de vecteurs :</strong></p>\n<pre><code>A⃗ + B⃗ = (Ax + Bx, Ay + By, Az + Bz)\n</code></pre>\n<p><strong>Produit scalaire :</strong></p>\n<pre><code>A⃗ ⋅ B⃗ = Ax⋅Bx + Ay⋅By + Az⋅Bz = |A⃗|⋅|B⃗|⋅cos(θ)\n</code></pre>\n<p><strong>Produit vectoriel :</strong></p>\n<pre><code>A⃗ × B⃗ = (Ay⋅Bz - Az⋅By, Az⋅Bx - Ax⋅Bz, Ax⋅By - Ay⋅Bx)\n</code></pre>\n<p>Le produit vectoriel donne un vecteur perpendiculaire aux deux vecteurs originaux.</p>\n<hundefined id=\"object-object\">[object Object]</hundefined><p><strong>Calcul de couples :</strong>\nLe couple τ⃗ exercé par une force F⃗ à une distance r⃗ :</p>\n<pre><code>τ⃗ = r⃗ × F⃗\n</code></pre>\n<p><strong>Test de colinéarité :</strong>\nDeux vecteurs sont colinéaires si leur produit vectoriel est nul.</p>\n<hundefined id=\"object-object\">[object Object]</hundefined><p>Les <strong>matrices</strong> sont omniprésentes en robotique pour représenter transformations, rotations et systèmes d&#39;équations.</p>\n<blockquote>[object Object]</blockquote><hundefined id=\"object-object\">[object Object]</hundefined><p><strong>Multiplication de matrices :</strong>\nPour multiplier A(m×n) et B(n×p), le résultat C(m×p) :</p>\n<pre><code>Cij = Σ(k=1 à n) Aik ⋅ Bkj\n</code></pre>\n<p><strong>Inversion de matrice :</strong>\nEssentielle pour la cinématique inverse :</p>\n<pre><code>A⁻¹ ⋅ A = I (matrice identité)\n</code></pre>\n<hundefined id=\"object-object\">[object Object]</hundefined><p>La <strong>matrice jacobienne</strong> relie les vitesses articulaires aux vitesses cartésiennes :</p>\n<pre><code>v⃗ = J ⋅ q̇⃗\n</code></pre>\n<p>Où :</p>\n<ul>\n<li>v⃗ = vitesse cartésienne de l&#39;effecteur</li>\n<li>J = matrice jacobienne</li>\n<li>q̇⃗ = vitesses articulaires</li>\n</ul>\n<hundefined id=\"object-object\">[object Object]</hundefined><p>Le <strong>déterminant</strong> de la jacobienne indique les singularités :</p>\n<ul>\n<li>det(J) = 0 → Configuration singulière</li>\n<li>det(J) ≠ 0 → Configuration normale</li>\n</ul>\n<blockquote>[object Object]</blockquote><hundefined id=\"object-object\">[object Object]</hundefined><p><strong>Objectif</strong> : Résoudre un problème d&#39;équilibre des forces</p>\n<p><strong>Contexte :</strong>\nUn robot manipule un objet de 5 kg. Trois forces s&#39;appliquent :</p>\n<ul>\n<li>F₁ = (10, 15, 0) N</li>\n<li>F₂ = (-5, 8, 12) N  </li>\n<li>F₃ = (?, ?, -20) N (force d&#39;équilibre à calculer)</li>\n</ul>\n<p><strong>Tâches :</strong></p>\n<ol>\n<li>Calculer F₃ pour l&#39;équilibre statique</li>\n<li>Déterminer l&#39;angle entre F₁ et F₂</li>\n<li>Calculer le moment résultant par rapport à l&#39;origine</li>\n</ol>\n<p><strong>Temps alloué</strong> : 20 minutes</p>\n<hr>\n",
      "components": [
        {
          "type": "VideoPlayer",
          "detected": true
        },
        {
          "type": "ExerciseBlock",
          "detected": true
        },
        {
          "type": "CalloutBox",
          "detected": true
        }
      ],
      "estimatedDuration": 36,
      "type": "content"
    },
    {
      "id": "-module-5-trigonomtrie-applique",
      "title": "\udccf Module 5 : Trigonométrie Appliquée",
      "titleWithEmoji": "📏 Module 5 : Trigonométrie Appliquée",
      "emoji": "\ud83d",
      "order": 5,
      "content": "## Fonctions Trigonométriques Essentielles\r\n\r\nLa **trigonométrie** est indispensable pour résoudre les problèmes de positionnement et d'orientation en robotique.\r\n\r\n### Relations Fondamentales\r\n\r\n**Triangle rectangle :**\r\n```\r\nsin(θ) = opposé / hypoténuse\r\ncos(θ) = adjacent / hypoténuse  \r\ntan(θ) = opposé / adjacent\r\n```\r\n\r\n**Identités utiles :**\r\n```\r\nsin²(θ) + cos²(θ) = 1\r\ntan(θ) = sin(θ) / cos(θ)\r\nsin(2θ) = 2⋅sin(θ)⋅cos(θ)\r\ncos(2θ) = cos²(θ) - sin²(θ)\r\n```\r\n\r\n### Loi des Cosinus\r\n\r\nPour un triangle quelconque avec côtés a, b, c et angle C opposé au côté c :\r\n```\r\nc² = a² + b² - 2⋅a⋅b⋅cos(C)\r\n```\r\n\r\nCette loi est cruciale pour la cinématique inverse.\r\n\r\n### Loi des Sinus\r\n\r\n```\r\na/sin(A) = b/sin(B) = c/sin(C)\r\n```\r\n\r\n## Applications Robotiques Spécifiques\r\n\r\n### Calcul d'Angles Articulaires\r\n\r\n**Problème type :** Robot SCARA avec deux liens\r\n- Lien 1 : longueur L₁\r\n- Lien 2 : longueur L₂\r\n- Position cible : (x, y)\r\n\r\n**Solution par loi des cosinus :**\r\n```\r\ncos(θ₂) = (x² + y² - L₁² - L₂²) / (2⋅L₁⋅L₂)\r\nθ₂ = ±arccos(cos(θ₂))\r\n```\r\n\r\n### Orientation d'Outils\r\n\r\n**Calcul de l'angle d'approche :**\r\nPour approcher perpendiculairement une surface inclinée d'angle α :\r\n```\r\nθ_outil = 90° - α\r\n```\r\n\r\n## Exercice Pratique 5 : Problème de Positionnement\r\n\r\n**Objectif** : Résoudre un problème de cinématique inverse complexe\r\n\r\n**Configuration :**\r\nRobot planaire à 3 degrés de liberté :\r\n- L₁ = 300mm (bras principal)\r\n- L₂ = 200mm (avant-bras)  \r\n- L₃ = 100mm (poignet)\r\n\r\n**Mission :**\r\nAtteindre le point (400, 300) avec orientation de l'effecteur à 45°\r\n\r\n**Instructions :**\r\n1. Utiliser la loi des cosinus pour θ₂\r\n2. Calculer θ₁ par trigonométrie\r\n3. Déterminer θ₃ pour l'orientation finale\r\n4. Vérifier par cinématique directe\r\n\r\n**Temps alloué** : 35 minutes\r\n\r\n---",
      "htmlContent": "<hundefined id=\"object-object\">[object Object]</hundefined><p>La <strong>trigonométrie</strong> est indispensable pour résoudre les problèmes de positionnement et d&#39;orientation en robotique.</p>\n<hundefined id=\"object-object\">[object Object]</hundefined><p><strong>Triangle rectangle :</strong></p>\n<pre><code>sin(θ) = opposé / hypoténuse\ncos(θ) = adjacent / hypoténuse  \ntan(θ) = opposé / adjacent\n</code></pre>\n<p><strong>Identités utiles :</strong></p>\n<pre><code>sin²(θ) + cos²(θ) = 1\ntan(θ) = sin(θ) / cos(θ)\nsin(2θ) = 2⋅sin(θ)⋅cos(θ)\ncos(2θ) = cos²(θ) - sin²(θ)\n</code></pre>\n<hundefined id=\"object-object\">[object Object]</hundefined><p>Pour un triangle quelconque avec côtés a, b, c et angle C opposé au côté c :</p>\n<pre><code>c² = a² + b² - 2⋅a⋅b⋅cos(C)\n</code></pre>\n<p>Cette loi est cruciale pour la cinématique inverse.</p>\n<hundefined id=\"object-object\">[object Object]</hundefined><pre><code>a/sin(A) = b/sin(B) = c/sin(C)\n</code></pre>\n<hundefined id=\"object-object\">[object Object]</hundefined><hundefined id=\"object-object\">[object Object]</hundefined><p><strong>Problème type :</strong> Robot SCARA avec deux liens</p>\n<ul>\n<li>Lien 1 : longueur L₁</li>\n<li>Lien 2 : longueur L₂</li>\n<li>Position cible : (x, y)</li>\n</ul>\n<p><strong>Solution par loi des cosinus :</strong></p>\n<pre><code>cos(θ₂) = (x² + y² - L₁² - L₂²) / (2⋅L₁⋅L₂)\nθ₂ = ±arccos(cos(θ₂))\n</code></pre>\n<hundefined id=\"object-object\">[object Object]</hundefined><p><strong>Calcul de l&#39;angle d&#39;approche :</strong>\nPour approcher perpendiculairement une surface inclinée d&#39;angle α :</p>\n<pre><code>θ_outil = 90° - α\n</code></pre>\n<hundefined id=\"object-object\">[object Object]</hundefined><p><strong>Objectif</strong> : Résoudre un problème de cinématique inverse complexe</p>\n<p><strong>Configuration :</strong>\nRobot planaire à 3 degrés de liberté :</p>\n<ul>\n<li>L₁ = 300mm (bras principal)</li>\n<li>L₂ = 200mm (avant-bras)  </li>\n<li>L₃ = 100mm (poignet)</li>\n</ul>\n<p><strong>Mission :</strong>\nAtteindre le point (400, 300) avec orientation de l&#39;effecteur à 45°</p>\n<p><strong>Instructions :</strong></p>\n<ol>\n<li>Utiliser la loi des cosinus pour θ₂</li>\n<li>Calculer θ₁ par trigonométrie</li>\n<li>Déterminer θ₃ pour l&#39;orientation finale</li>\n<li>Vérifier par cinématique directe</li>\n</ol>\n<p><strong>Temps alloué</strong> : 35 minutes</p>\n<hr>\n",
      "components": [
        {
          "type": "ExerciseBlock",
          "detected": true
        }
      ],
      "estimatedDuration": 12,
      "type": "content"
    },
    {
      "id": "module-6-applications-pratiques-et-rsolution-de-problmes",
      "title": "Module 6 : Applications Pratiques et Résolution de Problèmes",
      "titleWithEmoji": "🎯 Module 6 : Applications Pratiques et Résolution de Problèmes",
      "emoji": "🎯",
      "order": 6,
      "content": "## Méthodologie de Résolution\r\n\r\nFace à un problème robotique complexe, suivre cette **approche structurée** :\r\n\r\n### Étape 1 : Analyse du Problème\r\n1. **Identifier** les contraintes géométriques\r\n2. **Définir** les systèmes de coordonnées\r\n3. **Lister** les inconnues et données\r\n4. **Choisir** les outils mathématiques appropriés\r\n\r\n### Étape 2 : Modélisation Mathématique\r\n1. **Établir** les équations de base\r\n2. **Simplifier** si possible\r\n3. **Vérifier** la cohérence dimensionnelle\r\n4. **Prévoir** les cas limites\r\n\r\n### Étape 3 : Résolution et Validation\r\n1. **Résoudre** étape par étape\r\n2. **Vérifier** les résultats par méthode alternative\r\n3. **Tester** avec des valeurs limites\r\n4. **Interpréter** physiquement les solutions\r\n\r\n## Cas d'Étude Complet : Robot de Soudage\r\n\r\n### Contexte\r\nUn robot de soudage 6 axes doit suivre une trajectoire circulaire de rayon 50mm, centrée en (200, 150, 100), dans le plan Z = 100mm.\r\n\r\n### Analyse Mathématique\r\n\r\n**Paramètrisation de la trajectoire :**\r\n```\r\nx(t) = 200 + 50⋅cos(ωt)\r\ny(t) = 150 + 50⋅sin(ωt)  \r\nz(t) = 100\r\n```\r\n\r\n**Vitesses requises :**\r\n```\r\nvx(t) = -50ω⋅sin(ωt)\r\nvy(t) = 50ω⋅cos(ωt)\r\nvz(t) = 0\r\n```\r\n\r\n**Accélérations :**\r\n```\r\nax(t) = -50ω²⋅cos(ωt)\r\nay(t) = -50ω²⋅sin(ωt)\r\naz(t) = 0\r\n```\r\n\r\n### Contraintes de Performance\r\n\r\n**Vitesse maximale :** 100 mm/s\r\n```\r\n|v|max = 50ω → ω ≤ 2 rad/s\r\n```\r\n\r\n**Accélération maximale :** 500 mm/s²\r\n```\r\n|a|max = 50ω² → ω ≤ √10 ≈ 3.16 rad/s\r\n```\r\n\r\nLa contrainte de vitesse est **limitante** : ω = 2 rad/s maximum.\r\n\r\n### Orientation de l'Outil\r\n\r\n**Vecteur tangent à la trajectoire :**\r\n```\r\nT⃗(t) = (-sin(ωt), cos(ωt), 0)\r\n```\r\n\r\n**Angle d'orientation :**\r\n```\r\nθ(t) = arctan(cos(ωt) / -sin(ωt)) = ωt - π/2\r\n```\r\n\r\n## Exercice Pratique Final : Projet Intégré\r\n\r\n**Objectif** : Intégrer tous les concepts mathématiques\r\n\r\n**Projet :** Conception d'une cellule robotique de palettisation\r\n\r\n**Spécifications :**\r\n- Robot 4 axes (SCARA + rotation + translation Z)\r\n- Zone de travail : 1000mm × 800mm\r\n- Hauteur : 0 à 500mm\r\n- Palettes : 1200mm × 800mm\r\n- Objets : cubes de 100mm × 100mm × 100mm\r\n\r\n**Livrables :**\r\n1. **Analyse géométrique** de l'espace de travail\r\n2. **Calcul des limites articulaires** requises\r\n3. **Programmation mathématique** d'un motif de palettisation\r\n4. **Optimisation de trajectoire** pour temps de cycle minimal\r\n5. **Validation** par simulation\r\n\r\n**Critères d'évaluation :**\r\n- Exactitude des calculs mathématiques (40%)\r\n- Méthodologie de résolution (30%)\r\n- Optimisation et efficacité (20%)\r\n- Présentation et clarté (10%)\r\n\r\n**Temps alloué** : 90 minutes\r\n\r\n> 💡 **ASTUCE** : Utilisez les outils en ligne pour vérifier vos calculs matriciels et trigonométriques complexes.\r\n\r\n---\r\n\r\n## 📋 Récapitulatif et Points Clés\r\n\r\n### Concepts Maîtrisés ✅\r\n\r\n1. **Systèmes de coordonnées** : Cartésien, cylindrique, sphérique\r\n2. **Transformations géométriques** : Translation, rotation, matrices homogènes  \r\n3. **Cinématique** : Directe, inverse, trajectoires\r\n4. **Algèbre vectorielle** : Produits scalaire et vectoriel, applications\r\n5. **Matrices** : Multiplication, inversion, jacobienne\r\n6. **Trigonométrie** : Fonctions, identités, lois des cosinus/sinus\r\n\r\n### Formules Essentielles 📐\r\n\r\n**Transformation homogène :**\r\n```\r\n[R  t]   [p]   [Rp + t]\r\n[0  1] ⋅ [1] = [  1   ]\r\n```\r\n\r\n**Cinématique directe 2D :**\r\n```\r\nx = L₁cos(θ₁) + L₂cos(θ₁+θ₂)\r\ny = L₁sin(θ₁) + L₂sin(θ₁+θ₂)\r\n```\r\n\r\n**Vitesse en coordonnées polaires :**\r\n```\r\nvr = ṙ\r\nvθ = rθ̇\r\n```\r\n\r\n### Applications Industrielles 🏭\r\n\r\n- **Programmation de trajectoires** optimisées\r\n- **Calibrage et étalonnage** de robots\r\n- **Diagnostic de singularités** et limitations\r\n- **Calcul de forces et couples** requis\r\n- **Optimisation de cycles** de production\r\n\r\n### Ressources pour Approfondir 📚\r\n\r\n- Formulaires mathématiques spécialisés robotique\r\n- Simulateurs de cinématique en ligne\r\n- Logiciels de calcul matriciel (MATLAB, Octave)\r\n- Standards industriels de programmation robot\r\n\r\n---\r\n\r\n*Cette formation vous donne les bases mathématiques solides nécessaires pour exceller comme technicien en robotique. Continuez à pratiquer ces concepts dans vos applications quotidiennes !*",
      "htmlContent": "<hundefined id=\"object-object\">[object Object]</hundefined><p>Face à un problème robotique complexe, suivre cette <strong>approche structurée</strong> :</p>\n<hundefined id=\"object-object\">[object Object]</hundefined><ol>\n<li><strong>Identifier</strong> les contraintes géométriques</li>\n<li><strong>Définir</strong> les systèmes de coordonnées</li>\n<li><strong>Lister</strong> les inconnues et données</li>\n<li><strong>Choisir</strong> les outils mathématiques appropriés</li>\n</ol>\n<hundefined id=\"object-object\">[object Object]</hundefined><ol>\n<li><strong>Établir</strong> les équations de base</li>\n<li><strong>Simplifier</strong> si possible</li>\n<li><strong>Vérifier</strong> la cohérence dimensionnelle</li>\n<li><strong>Prévoir</strong> les cas limites</li>\n</ol>\n<hundefined id=\"object-object\">[object Object]</hundefined><ol>\n<li><strong>Résoudre</strong> étape par étape</li>\n<li><strong>Vérifier</strong> les résultats par méthode alternative</li>\n<li><strong>Tester</strong> avec des valeurs limites</li>\n<li><strong>Interpréter</strong> physiquement les solutions</li>\n</ol>\n<hundefined id=\"object-object\">[object Object]</hundefined><hundefined id=\"object-object\">[object Object]</hundefined><p>Un robot de soudage 6 axes doit suivre une trajectoire circulaire de rayon 50mm, centrée en (200, 150, 100), dans le plan Z = 100mm.</p>\n<hundefined id=\"object-object\">[object Object]</hundefined><p><strong>Paramètrisation de la trajectoire :</strong></p>\n<pre><code>x(t) = 200 + 50⋅cos(ωt)\ny(t) = 150 + 50⋅sin(ωt)  \nz(t) = 100\n</code></pre>\n<p><strong>Vitesses requises :</strong></p>\n<pre><code>vx(t) = -50ω⋅sin(ωt)\nvy(t) = 50ω⋅cos(ωt)\nvz(t) = 0\n</code></pre>\n<p><strong>Accélérations :</strong></p>\n<pre><code>ax(t) = -50ω²⋅cos(ωt)\nay(t) = -50ω²⋅sin(ωt)\naz(t) = 0\n</code></pre>\n<hundefined id=\"object-object\">[object Object]</hundefined><p><strong>Vitesse maximale :</strong> 100 mm/s</p>\n<pre><code>|v|max = 50ω → ω ≤ 2 rad/s\n</code></pre>\n<p><strong>Accélération maximale :</strong> 500 mm/s²</p>\n<pre><code>|a|max = 50ω² → ω ≤ √10 ≈ 3.16 rad/s\n</code></pre>\n<p>La contrainte de vitesse est <strong>limitante</strong> : ω = 2 rad/s maximum.</p>\n<hundefined id=\"object-object\">[object Object]</hundefined><p><strong>Vecteur tangent à la trajectoire :</strong></p>\n<pre><code>T⃗(t) = (-sin(ωt), cos(ωt), 0)\n</code></pre>\n<p><strong>Angle d&#39;orientation :</strong></p>\n<pre><code>θ(t) = arctan(cos(ωt) / -sin(ωt)) = ωt - π/2\n</code></pre>\n<hundefined id=\"object-object\">[object Object]</hundefined><p><strong>Objectif</strong> : Intégrer tous les concepts mathématiques</p>\n<p><strong>Projet :</strong> Conception d&#39;une cellule robotique de palettisation</p>\n<p><strong>Spécifications :</strong></p>\n<ul>\n<li>Robot 4 axes (SCARA + rotation + translation Z)</li>\n<li>Zone de travail : 1000mm × 800mm</li>\n<li>Hauteur : 0 à 500mm</li>\n<li>Palettes : 1200mm × 800mm</li>\n<li>Objets : cubes de 100mm × 100mm × 100mm</li>\n</ul>\n<p><strong>Livrables :</strong></p>\n<ol>\n<li><strong>Analyse géométrique</strong> de l&#39;espace de travail</li>\n<li><strong>Calcul des limites articulaires</strong> requises</li>\n<li><strong>Programmation mathématique</strong> d&#39;un motif de palettisation</li>\n<li><strong>Optimisation de trajectoire</strong> pour temps de cycle minimal</li>\n<li><strong>Validation</strong> par simulation</li>\n</ol>\n<p><strong>Critères d&#39;évaluation :</strong></p>\n<ul>\n<li>Exactitude des calculs mathématiques (40%)</li>\n<li>Méthodologie de résolution (30%)</li>\n<li>Optimisation et efficacité (20%)</li>\n<li>Présentation et clarté (10%)</li>\n</ul>\n<p><strong>Temps alloué</strong> : 90 minutes</p>\n<blockquote>[object Object]</blockquote><hr>\n<hundefined id=\"object-object\">[object Object]</hundefined><hundefined id=\"object-object\">[object Object]</hundefined><ol>\n<li><strong>Systèmes de coordonnées</strong> : Cartésien, cylindrique, sphérique</li>\n<li><strong>Transformations géométriques</strong> : Translation, rotation, matrices homogènes  </li>\n<li><strong>Cinématique</strong> : Directe, inverse, trajectoires</li>\n<li><strong>Algèbre vectorielle</strong> : Produits scalaire et vectoriel, applications</li>\n<li><strong>Matrices</strong> : Multiplication, inversion, jacobienne</li>\n<li><strong>Trigonométrie</strong> : Fonctions, identités, lois des cosinus/sinus</li>\n</ol>\n<hundefined id=\"object-object\">[object Object]</hundefined><p><strong>Transformation homogène :</strong></p>\n<pre><code>[R  t]   [p]   [Rp + t]\n[0  1] ⋅ [1] = [  1   ]\n</code></pre>\n<p><strong>Cinématique directe 2D :</strong></p>\n<pre><code>x = L₁cos(θ₁) + L₂cos(θ₁+θ₂)\ny = L₁sin(θ₁) + L₂sin(θ₁+θ₂)\n</code></pre>\n<p><strong>Vitesse en coordonnées polaires :</strong></p>\n<pre><code>vr = ṙ\nvθ = rθ̇\n</code></pre>\n<hundefined id=\"object-object\">[object Object]</hundefined><ul>\n<li><strong>Programmation de trajectoires</strong> optimisées</li>\n<li><strong>Calibrage et étalonnage</strong> de robots</li>\n<li><strong>Diagnostic de singularités</strong> et limitations</li>\n<li><strong>Calcul de forces et couples</strong> requis</li>\n<li><strong>Optimisation de cycles</strong> de production</li>\n</ul>\n<hundefined id=\"object-object\">[object Object]</hundefined><ul>\n<li>Formulaires mathématiques spécialisés robotique</li>\n<li>Simulateurs de cinématique en ligne</li>\n<li>Logiciels de calcul matriciel (MATLAB, Octave)</li>\n<li>Standards industriels de programmation robot</li>\n</ul>\n<hr>\n<p><em>Cette formation vous donne les bases mathématiques solides nécessaires pour exceller comme technicien en robotique. Continuez à pratiquer ces concepts dans vos applications quotidiennes !</em></p>\n",
      "components": [
        {
          "type": "ExerciseBlock",
          "detected": true
        },
        {
          "type": "CalloutBox",
          "detected": true
        }
      ],
      "estimatedDuration": 19,
      "type": "practice"
    }
  ],
  "moduleCount": 6,
  "estimatedTotalDuration": 159,
  "tableOfContents": [
    {
      "id": "-module-1-systmes-de-coordonnes-et-repres",
      "title": "📐 Module 1 : Systèmes de Coordonnées et Repères",
      "order": 1,
      "duration": 26,
      "type": "content",
      "components": [
        "VideoPlayer",
        "ExerciseBlock"
      ]
    },
    {
      "id": "-module-2-transformations-gomtriques",
      "title": "🔄 Module 2 : Transformations Géométriques",
      "order": 2,
      "duration": 35,
      "type": "content",
      "components": [
        "VideoPlayer",
        "ExerciseBlock",
        "CalloutBox"
      ]
    },
    {
      "id": "-module-3-cinmatique-et-dynamique",
      "title": "🏃 Module 3 : Cinématique et Dynamique",
      "order": 3,
      "duration": 31,
      "type": "content",
      "components": [
        "VideoPlayer",
        "ExerciseBlock",
        "CalloutBox"
      ]
    },
    {
      "id": "-module-4-algbre-vectorielle-et-matricielle",
      "title": "🧮 Module 4 : Algèbre Vectorielle et Matricielle",
      "order": 4,
      "duration": 36,
      "type": "content",
      "components": [
        "VideoPlayer",
        "ExerciseBlock",
        "CalloutBox"
      ]
    },
    {
      "id": "-module-5-trigonomtrie-applique",
      "title": "📏 Module 5 : Trigonométrie Appliquée",
      "order": 5,
      "duration": 12,
      "type": "content",
      "components": [
        "ExerciseBlock"
      ]
    },
    {
      "id": "module-6-applications-pratiques-et-rsolution-de-problmes",
      "title": "🎯 Module 6 : Applications Pratiques et Résolution de Problèmes",
      "order": 6,
      "duration": 19,
      "type": "practice",
      "components": [
        "ExerciseBlock",
        "CalloutBox"
      ]
    }
  ],
  "searchableContent": "mathmatiques pour techniciens en robotique  module 1  systmes de coordonnes et repres  module 2  transformations gomtriques  module 3  cinmatique et dynamique  module 4  algbre vectorielle et matricielle  module 5  trigonomtrie applique module 6  applications pratiques et rsolution de problmes matriser les systmes de coordonnes et transformations gomtriques en robotique calculer les vitesses et acclrations dans les mouvements robotiques appliquer la trigonomtrie pour rsoudre des problmes de positionnement utiliser lalgbre vectorielle pour analyser les forces et dplacements comprendre les matrices de transformation homogne rsoudre des problmes de cinmatique directe et inverse mathmatiques de niveau collgial notions de base en physique mcanique exprience pratique avec des systmes robotiques capacit  utiliser une calculatrice scientifique",
  "qualityScore": 100,
  "rawContent": "\r\n# 📐 Module 1 : Systèmes de Coordonnées et Repères\r\n\r\n## Introduction aux Systèmes de Coordonnées\r\n\r\nEn robotique, la **localisation précise** des objets et des outils est fondamentale. Un technicien doit maîtriser les différents systèmes de coordonnées pour comprendre et programmer les mouvements robotiques.\r\n\r\n### Système de Coordonnées Cartésiennes\r\n\r\nLe système cartésien utilise trois axes perpendiculaires : **X, Y, et Z**.\r\n\r\n**Caractéristiques principales :**\r\n- **Axe X** : Généralement horizontal, vers la droite\r\n- **Axe Y** : Généralement horizontal, vers l'avant  \r\n- **Axe Z** : Généralement vertical, vers le haut\r\n- **Origine (0,0,0)** : Point de référence du système\r\n\r\n> 📹 **Vidéo recommandée** : \"Introduction aux coordonnées cartésiennes en robotique\" (12min)\r\n\r\n### Conventions Robotiques Standards\r\n\r\n**Convention main droite :**\r\n1. Pointez le pouce dans la direction X positive\r\n2. L'index indique Y positive\r\n3. Le majeur indique Z positive\r\n\r\nCette convention assure la cohérence entre tous les systèmes robotiques.\r\n\r\n### Système de Coordonnées Cylindriques\r\n\r\nParticulièrement utile pour les robots à configuration cylindrique.\r\n\r\n**Paramètres :**\r\n- **ρ (rho)** : Distance radiale depuis l'axe Z\r\n- **φ (phi)** : Angle autour de l'axe Z\r\n- **z** : Hauteur le long de l'axe Z\r\n\r\n**Conversion cartésien → cylindrique :**\r\n- ρ = √(x² + y²)\r\n- φ = arctan(y/x)\r\n- z = z\r\n\r\n### Système de Coordonnées Sphériques\r\n\r\nIdéal pour les robots à poignet sphérique.\r\n\r\n**Paramètres :**\r\n- **r** : Distance depuis l'origine\r\n- **θ (theta)** : Angle d'élévation depuis le plan XY\r\n- **φ (phi)** : Angle azimutal dans le plan XY\r\n\r\n**Conversion cartésien → sphérique :**\r\n- r = √(x² + y² + z²)\r\n- θ = arccos(z/r)\r\n- φ = arctan(y/x)\r\n\r\n## Exercice Pratique 1 : Conversion de Coordonnées\r\n\r\n**Objectif** : Maîtriser les conversions entre systèmes de coordonnées\r\n\r\n**Problème :**\r\nUn robot doit atteindre un point situé à :\r\n- Coordonnées cartésiennes : (150mm, 200mm, 300mm)\r\n\r\n**Tâches :**\r\n1. Convertir en coordonnées cylindriques\r\n2. Convertir en coordonnées sphériques\r\n3. Vérifier vos calculs avec le simulateur en ligne\r\n\r\n**Solution :**\r\n\r\n*Coordonnées cylindriques :*\r\n- ρ = √(150² + 200²) = √(22500 + 40000) = 250mm\r\n- φ = arctan(200/150) = 53.13°\r\n- z = 300mm\r\n\r\n*Coordonnées sphériques :*\r\n- r = √(150² + 200² + 300²) = √112500 = 335.4mm\r\n- θ = arccos(300/335.4) = 26.57°\r\n- φ = arctan(200/150) = 53.13°\r\n\r\n**Temps alloué** : 20 minutes\r\n\r\n---\r\n\r\n# 🔄 Module 2 : Transformations Géométriques\r\n\r\n## Translations et Rotations\r\n\r\nLes **transformations géométriques** permettent de décrire le mouvement d'un objet dans l'espace. C'est la base de toute programmation robotique.\r\n\r\n### Translation\r\n\r\nUne translation déplace un point sans changer son orientation.\r\n\r\n**Formule de translation :**\r\n```\r\nx' = x + dx\r\ny' = y + dy  \r\nz' = z + dz\r\n```\r\n\r\nOù (dx, dy, dz) est le vecteur de translation.\r\n\r\n### Rotation autour d'un Axe\r\n\r\n**Rotation autour de l'axe Z (dans le plan XY) :**\r\n```\r\nx' = x⋅cos(θ) - y⋅sin(θ)\r\ny' = x⋅sin(θ) + y⋅cos(θ)\r\nz' = z\r\n```\r\n\r\n**Rotation autour de l'axe X :**\r\n```\r\nx' = x\r\ny' = y⋅cos(θ) - z⋅sin(θ)\r\nz' = y⋅sin(θ) + z⋅cos(θ)\r\n```\r\n\r\n**Rotation autour de l'axe Y :**\r\n```\r\nx' = x⋅cos(θ) + z⋅sin(θ)\r\ny' = y\r\nz' = -x⋅sin(θ) + z⋅cos(θ)\r\n```\r\n\r\n> 📹 **Vidéo recommandée** : \"Démonstration des transformations géométriques\" (18min)\r\n\r\n### Angles d'Euler\r\n\r\nLes **angles d'Euler** décrivent l'orientation d'un objet avec trois rotations successives :\r\n\r\n1. **Roulis (Roll)** : Rotation autour de l'axe X\r\n2. **Tangage (Pitch)** : Rotation autour de l'axe Y  \r\n3. **Lacet (Yaw)** : Rotation autour de l'axe Z\r\n\r\n> ⚠️ **IMPORTANT** : L'ordre des rotations affecte le résultat final !\r\n\r\n## Matrices de Transformation Homogène\r\n\r\nLes **matrices 4×4** permettent de combiner translation et rotation en une seule opération.\r\n\r\n**Structure générale :**\r\n```\r\n[R₁₁ R₁₂ R₁₃ tx]\r\n[R₂₁ R₂₂ R₂₃ ty]\r\n[R₃₁ R₃₂ R₃₃ tz]\r\n[0   0   0   1 ]\r\n```\r\n\r\nOù :\r\n- **R** = Matrice de rotation 3×3\r\n- **t** = Vecteur de translation (tx, ty, tz)\r\n\r\n### Exemple Concret\r\n\r\n**Matrice de translation pure :**\r\n```\r\n[1  0  0  50 ]    # Translation de 50mm en X\r\n[0  1  0  30 ]    # Translation de 30mm en Y\r\n[0  0  1  100]    # Translation de 100mm en Z\r\n[0  0  0  1  ]\r\n```\r\n\r\n**Matrice de rotation de 90° autour de Z :**\r\n```\r\n[0  -1  0  0]     # cos(90°) = 0, sin(90°) = 1\r\n[1   0  0  0]\r\n[0   0  1  0]\r\n[0   0  0  1]\r\n```\r\n\r\n## Exercice Pratique 2 : Transformations Successives\r\n\r\n**Objectif** : Appliquer plusieurs transformations géométriques\r\n\r\n**Contexte :**\r\nUn bras robotique doit :\r\n1. Tourner de 45° autour de l'axe Z\r\n2. Se déplacer de 100mm en X\r\n3. Tourner de 30° autour de l'axe Y\r\n\r\n**Instructions :**\r\n1. Calculer la matrice de chaque transformation\r\n2. Multiplier les matrices dans l'ordre correct\r\n3. Appliquer le résultat au point (50, 0, 0)\r\n\r\n**Temps alloué** : 30 minutes\r\n\r\n---\r\n\r\n# 🏃 Module 3 : Cinématique et Dynamique\r\n\r\n## Cinématique : Étude du Mouvement\r\n\r\nLa **cinématique** analyse le mouvement sans considérer les forces qui le causent. Elle est essentielle pour programmer des trajectoires fluides.\r\n\r\n### Position, Vitesse et Accélération\r\n\r\n**Relations fondamentales :**\r\n- **Vitesse** = dérivée de la position : v = dp/dt\r\n- **Accélération** = dérivée de la vitesse : a = dv/dt = d²p/dt²\r\n\r\n### Mouvement Rectiligne\r\n\r\n**Équations du mouvement uniforme :**\r\n```\r\nPosition : x(t) = x₀ + v₀⋅t\r\nVitesse : v(t) = v₀ (constante)\r\n```\r\n\r\n**Équations du mouvement uniformément accéléré :**\r\n```\r\nPosition : x(t) = x₀ + v₀⋅t + ½⋅a⋅t²\r\nVitesse : v(t) = v₀ + a⋅t\r\n```\r\n\r\n> 📹 **Vidéo recommandée** : \"Calculs de vitesse et trajectoires\" (15min)\r\n\r\n### Mouvement Circulaire\r\n\r\n**Pour un mouvement circulaire uniforme :**\r\n- **Vitesse angulaire** : ω = θ/t (rad/s)\r\n- **Vitesse linéaire** : v = ω⋅r\r\n- **Accélération centripète** : a = v²/r = ω²⋅r\r\n\r\n### Cinématique Directe\r\n\r\nLa **cinématique directe** calcule la position de l'effecteur à partir des angles articulaires.\r\n\r\n**Pour un bras robotique 2D simple :**\r\n```\r\nx = L₁⋅cos(θ₁) + L₂⋅cos(θ₁ + θ₂)\r\ny = L₁⋅sin(θ₁) + L₂⋅sin(θ₁ + θ₂)\r\n```\r\n\r\nOù :\r\n- L₁, L₂ = longueurs des segments\r\n- θ₁, θ₂ = angles articulaires\r\n\r\n### Cinématique Inverse\r\n\r\nLa **cinématique inverse** détermine les angles articulaires pour atteindre une position donnée.\r\n\r\n**Pour le même bras 2D :**\r\n```\r\nθ₂ = ±arccos((x² + y² - L₁² - L₂²)/(2⋅L₁⋅L₂))\r\nθ₁ = arctan(y/x) - arctan((L₂⋅sin(θ₂))/(L₁ + L₂⋅cos(θ₂)))\r\n```\r\n\r\n> ⚠️ **ATTENTION** : Plusieurs solutions peuvent exister (coude en haut/en bas)\r\n\r\n## Exercice Pratique 3 : Calcul de Trajectoire\r\n\r\n**Objectif** : Calculer une trajectoire point à point\r\n\r\n**Problème :**\r\nUn robot doit se déplacer du point A(100, 50) au point B(200, 150) en 2 secondes avec :\r\n- Accélération de 0.5 sec\r\n- Vitesse constante de 1 sec  \r\n- Décélération de 0.5 sec\r\n\r\n**Tâches :**\r\n1. Calculer la distance totale\r\n2. Déterminer les vitesses maximales\r\n3. Établir les équations de mouvement pour chaque phase\r\n4. Vérifier la continuité de la vitesse\r\n\r\n**Temps alloué** : 25 minutes\r\n\r\n---\r\n\r\n# 🧮 Module 4 : Algèbre Vectorielle et Matricielle\r\n\r\n## Vecteurs en Robotique\r\n\r\nLes **vecteurs** représentent des grandeurs ayant une magnitude et une direction : forces, vitesses, positions relatives.\r\n\r\n### Opérations Vectorielles Fondamentales\r\n\r\n**Addition de vecteurs :**\r\n```\r\nA⃗ + B⃗ = (Ax + Bx, Ay + By, Az + Bz)\r\n```\r\n\r\n**Produit scalaire :**\r\n```\r\nA⃗ ⋅ B⃗ = Ax⋅Bx + Ay⋅By + Az⋅Bz = |A⃗|⋅|B⃗|⋅cos(θ)\r\n```\r\n\r\n**Produit vectoriel :**\r\n```\r\nA⃗ × B⃗ = (Ay⋅Bz - Az⋅By, Az⋅Bx - Ax⋅Bz, Ax⋅By - Ay⋅Bx)\r\n```\r\n\r\nLe produit vectoriel donne un vecteur perpendiculaire aux deux vecteurs originaux.\r\n\r\n### Applications en Robotique\r\n\r\n**Calcul de couples :**\r\nLe couple τ⃗ exercé par une force F⃗ à une distance r⃗ :\r\n```\r\nτ⃗ = r⃗ × F⃗\r\n```\r\n\r\n**Test de colinéarité :**\r\nDeux vecteurs sont colinéaires si leur produit vectoriel est nul.\r\n\r\n## Matrices en Robotique\r\n\r\nLes **matrices** sont omniprésentes en robotique pour représenter transformations, rotations et systèmes d'équations.\r\n\r\n> 📹 **Vidéo recommandée** : \"Applications pratiques des matrices\" (20min)\r\n\r\n### Opérations Matricielles\r\n\r\n**Multiplication de matrices :**\r\nPour multiplier A(m×n) et B(n×p), le résultat C(m×p) :\r\n```\r\nCij = Σ(k=1 à n) Aik ⋅ Bkj\r\n```\r\n\r\n**Inversion de matrice :**\r\nEssentielle pour la cinématique inverse :\r\n```\r\nA⁻¹ ⋅ A = I (matrice identité)\r\n```\r\n\r\n### Matrice Jacobienne\r\n\r\nLa **matrice jacobienne** relie les vitesses articulaires aux vitesses cartésiennes :\r\n\r\n```\r\nv⃗ = J ⋅ q̇⃗\r\n```\r\n\r\nOù :\r\n- v⃗ = vitesse cartésienne de l'effecteur\r\n- J = matrice jacobienne\r\n- q̇⃗ = vitesses articulaires\r\n\r\n### Déterminant et Singularités\r\n\r\nLe **déterminant** de la jacobienne indique les singularités :\r\n- det(J) = 0 → Configuration singulière\r\n- det(J) ≠ 0 → Configuration normale\r\n\r\n> ⚠️ **IMPORTANT** : Éviter les singularités en programmation de trajectoires\r\n\r\n## Exercice Pratique 4 : Analyse Vectorielle\r\n\r\n**Objectif** : Résoudre un problème d'équilibre des forces\r\n\r\n**Contexte :**\r\nUn robot manipule un objet de 5 kg. Trois forces s'appliquent :\r\n- F₁ = (10, 15, 0) N\r\n- F₂ = (-5, 8, 12) N  \r\n- F₃ = (?, ?, -20) N (force d'équilibre à calculer)\r\n\r\n**Tâches :**\r\n1. Calculer F₃ pour l'équilibre statique\r\n2. Déterminer l'angle entre F₁ et F₂\r\n3. Calculer le moment résultant par rapport à l'origine\r\n\r\n**Temps alloué** : 20 minutes\r\n\r\n---\r\n\r\n# 📏 Module 5 : Trigonométrie Appliquée\r\n\r\n## Fonctions Trigonométriques Essentielles\r\n\r\nLa **trigonométrie** est indispensable pour résoudre les problèmes de positionnement et d'orientation en robotique.\r\n\r\n### Relations Fondamentales\r\n\r\n**Triangle rectangle :**\r\n```\r\nsin(θ) = opposé / hypoténuse\r\ncos(θ) = adjacent / hypoténuse  \r\ntan(θ) = opposé / adjacent\r\n```\r\n\r\n**Identités utiles :**\r\n```\r\nsin²(θ) + cos²(θ) = 1\r\ntan(θ) = sin(θ) / cos(θ)\r\nsin(2θ) = 2⋅sin(θ)⋅cos(θ)\r\ncos(2θ) = cos²(θ) - sin²(θ)\r\n```\r\n\r\n### Loi des Cosinus\r\n\r\nPour un triangle quelconque avec côtés a, b, c et angle C opposé au côté c :\r\n```\r\nc² = a² + b² - 2⋅a⋅b⋅cos(C)\r\n```\r\n\r\nCette loi est cruciale pour la cinématique inverse.\r\n\r\n### Loi des Sinus\r\n\r\n```\r\na/sin(A) = b/sin(B) = c/sin(C)\r\n```\r\n\r\n## Applications Robotiques Spécifiques\r\n\r\n### Calcul d'Angles Articulaires\r\n\r\n**Problème type :** Robot SCARA avec deux liens\r\n- Lien 1 : longueur L₁\r\n- Lien 2 : longueur L₂\r\n- Position cible : (x, y)\r\n\r\n**Solution par loi des cosinus :**\r\n```\r\ncos(θ₂) = (x² + y² - L₁² - L₂²) / (2⋅L₁⋅L₂)\r\nθ₂ = ±arccos(cos(θ₂))\r\n```\r\n\r\n### Orientation d'Outils\r\n\r\n**Calcul de l'angle d'approche :**\r\nPour approcher perpendiculairement une surface inclinée d'angle α :\r\n```\r\nθ_outil = 90° - α\r\n```\r\n\r\n## Exercice Pratique 5 : Problème de Positionnement\r\n\r\n**Objectif** : Résoudre un problème de cinématique inverse complexe\r\n\r\n**Configuration :**\r\nRobot planaire à 3 degrés de liberté :\r\n- L₁ = 300mm (bras principal)\r\n- L₂ = 200mm (avant-bras)  \r\n- L₃ = 100mm (poignet)\r\n\r\n**Mission :**\r\nAtteindre le point (400, 300) avec orientation de l'effecteur à 45°\r\n\r\n**Instructions :**\r\n1. Utiliser la loi des cosinus pour θ₂\r\n2. Calculer θ₁ par trigonométrie\r\n3. Déterminer θ₃ pour l'orientation finale\r\n4. Vérifier par cinématique directe\r\n\r\n**Temps alloué** : 35 minutes\r\n\r\n---\r\n\r\n# 🎯 Module 6 : Applications Pratiques et Résolution de Problèmes\r\n\r\n## Méthodologie de Résolution\r\n\r\nFace à un problème robotique complexe, suivre cette **approche structurée** :\r\n\r\n### Étape 1 : Analyse du Problème\r\n1. **Identifier** les contraintes géométriques\r\n2. **Définir** les systèmes de coordonnées\r\n3. **Lister** les inconnues et données\r\n4. **Choisir** les outils mathématiques appropriés\r\n\r\n### Étape 2 : Modélisation Mathématique\r\n1. **Établir** les équations de base\r\n2. **Simplifier** si possible\r\n3. **Vérifier** la cohérence dimensionnelle\r\n4. **Prévoir** les cas limites\r\n\r\n### Étape 3 : Résolution et Validation\r\n1. **Résoudre** étape par étape\r\n2. **Vérifier** les résultats par méthode alternative\r\n3. **Tester** avec des valeurs limites\r\n4. **Interpréter** physiquement les solutions\r\n\r\n## Cas d'Étude Complet : Robot de Soudage\r\n\r\n### Contexte\r\nUn robot de soudage 6 axes doit suivre une trajectoire circulaire de rayon 50mm, centrée en (200, 150, 100), dans le plan Z = 100mm.\r\n\r\n### Analyse Mathématique\r\n\r\n**Paramètrisation de la trajectoire :**\r\n```\r\nx(t) = 200 + 50⋅cos(ωt)\r\ny(t) = 150 + 50⋅sin(ωt)  \r\nz(t) = 100\r\n```\r\n\r\n**Vitesses requises :**\r\n```\r\nvx(t) = -50ω⋅sin(ωt)\r\nvy(t) = 50ω⋅cos(ωt)\r\nvz(t) = 0\r\n```\r\n\r\n**Accélérations :**\r\n```\r\nax(t) = -50ω²⋅cos(ωt)\r\nay(t) = -50ω²⋅sin(ωt)\r\naz(t) = 0\r\n```\r\n\r\n### Contraintes de Performance\r\n\r\n**Vitesse maximale :** 100 mm/s\r\n```\r\n|v|max = 50ω → ω ≤ 2 rad/s\r\n```\r\n\r\n**Accélération maximale :** 500 mm/s²\r\n```\r\n|a|max = 50ω² → ω ≤ √10 ≈ 3.16 rad/s\r\n```\r\n\r\nLa contrainte de vitesse est **limitante** : ω = 2 rad/s maximum.\r\n\r\n### Orientation de l'Outil\r\n\r\n**Vecteur tangent à la trajectoire :**\r\n```\r\nT⃗(t) = (-sin(ωt), cos(ωt), 0)\r\n```\r\n\r\n**Angle d'orientation :**\r\n```\r\nθ(t) = arctan(cos(ωt) / -sin(ωt)) = ωt - π/2\r\n```\r\n\r\n## Exercice Pratique Final : Projet Intégré\r\n\r\n**Objectif** : Intégrer tous les concepts mathématiques\r\n\r\n**Projet :** Conception d'une cellule robotique de palettisation\r\n\r\n**Spécifications :**\r\n- Robot 4 axes (SCARA + rotation + translation Z)\r\n- Zone de travail : 1000mm × 800mm\r\n- Hauteur : 0 à 500mm\r\n- Palettes : 1200mm × 800mm\r\n- Objets : cubes de 100mm × 100mm × 100mm\r\n\r\n**Livrables :**\r\n1. **Analyse géométrique** de l'espace de travail\r\n2. **Calcul des limites articulaires** requises\r\n3. **Programmation mathématique** d'un motif de palettisation\r\n4. **Optimisation de trajectoire** pour temps de cycle minimal\r\n5. **Validation** par simulation\r\n\r\n**Critères d'évaluation :**\r\n- Exactitude des calculs mathématiques (40%)\r\n- Méthodologie de résolution (30%)\r\n- Optimisation et efficacité (20%)\r\n- Présentation et clarté (10%)\r\n\r\n**Temps alloué** : 90 minutes\r\n\r\n> 💡 **ASTUCE** : Utilisez les outils en ligne pour vérifier vos calculs matriciels et trigonométriques complexes.\r\n\r\n---\r\n\r\n## 📋 Récapitulatif et Points Clés\r\n\r\n### Concepts Maîtrisés ✅\r\n\r\n1. **Systèmes de coordonnées** : Cartésien, cylindrique, sphérique\r\n2. **Transformations géométriques** : Translation, rotation, matrices homogènes  \r\n3. **Cinématique** : Directe, inverse, trajectoires\r\n4. **Algèbre vectorielle** : Produits scalaire et vectoriel, applications\r\n5. **Matrices** : Multiplication, inversion, jacobienne\r\n6. **Trigonométrie** : Fonctions, identités, lois des cosinus/sinus\r\n\r\n### Formules Essentielles 📐\r\n\r\n**Transformation homogène :**\r\n```\r\n[R  t]   [p]   [Rp + t]\r\n[0  1] ⋅ [1] = [  1   ]\r\n```\r\n\r\n**Cinématique directe 2D :**\r\n```\r\nx = L₁cos(θ₁) + L₂cos(θ₁+θ₂)\r\ny = L₁sin(θ₁) + L₂sin(θ₁+θ₂)\r\n```\r\n\r\n**Vitesse en coordonnées polaires :**\r\n```\r\nvr = ṙ\r\nvθ = rθ̇\r\n```\r\n\r\n### Applications Industrielles 🏭\r\n\r\n- **Programmation de trajectoires** optimisées\r\n- **Calibrage et étalonnage** de robots\r\n- **Diagnostic de singularités** et limitations\r\n- **Calcul de forces et couples** requis\r\n- **Optimisation de cycles** de production\r\n\r\n### Ressources pour Approfondir 📚\r\n\r\n- Formulaires mathématiques spécialisés robotique\r\n- Simulateurs de cinématique en ligne\r\n- Logiciels de calcul matriciel (MATLAB, Octave)\r\n- Standards industriels de programmation robot\r\n\r\n---\r\n\r\n*Cette formation vous donne les bases mathématiques solides nécessaires pour exceller comme technicien en robotique. Continuez à pratiquer ces concepts dans vos applications quotidiennes !*",
  "componentMapping": {
    "template": "SkillsTemplate",
    "layout": "FormationLayout",
    "components": {
      "navigation": "ProgressTracker",
      "modules": [
        {
          "component": "ModuleCard",
          "props": {
            "module": {
              "id": "-module-1-systmes-de-coordonnes-et-repres",
              "title": "\udcd0 Module 1 : Systèmes de Coordonnées et Repères",
              "titleWithEmoji": "📐 Module 1 : Systèmes de Coordonnées et Repères",
              "emoji": "\ud83d",
              "order": 1,
              "content": "## Introduction aux Systèmes de Coordonnées\r\n\r\nEn robotique, la **localisation précise** des objets et des outils est fondamentale. Un technicien doit maîtriser les différents systèmes de coordonnées pour comprendre et programmer les mouvements robotiques.\r\n\r\n### Système de Coordonnées Cartésiennes\r\n\r\nLe système cartésien utilise trois axes perpendiculaires : **X, Y, et Z**.\r\n\r\n**Caractéristiques principales :**\r\n- **Axe X** : Généralement horizontal, vers la droite\r\n- **Axe Y** : Généralement horizontal, vers l'avant  \r\n- **Axe Z** : Généralement vertical, vers le haut\r\n- **Origine (0,0,0)** : Point de référence du système\r\n\r\n> 📹 **Vidéo recommandée** : \"Introduction aux coordonnées cartésiennes en robotique\" (12min)\r\n\r\n### Conventions Robotiques Standards\r\n\r\n**Convention main droite :**\r\n1. Pointez le pouce dans la direction X positive\r\n2. L'index indique Y positive\r\n3. Le majeur indique Z positive\r\n\r\nCette convention assure la cohérence entre tous les systèmes robotiques.\r\n\r\n### Système de Coordonnées Cylindriques\r\n\r\nParticulièrement utile pour les robots à configuration cylindrique.\r\n\r\n**Paramètres :**\r\n- **ρ (rho)** : Distance radiale depuis l'axe Z\r\n- **φ (phi)** : Angle autour de l'axe Z\r\n- **z** : Hauteur le long de l'axe Z\r\n\r\n**Conversion cartésien → cylindrique :**\r\n- ρ = √(x² + y²)\r\n- φ = arctan(y/x)\r\n- z = z\r\n\r\n### Système de Coordonnées Sphériques\r\n\r\nIdéal pour les robots à poignet sphérique.\r\n\r\n**Paramètres :**\r\n- **r** : Distance depuis l'origine\r\n- **θ (theta)** : Angle d'élévation depuis le plan XY\r\n- **φ (phi)** : Angle azimutal dans le plan XY\r\n\r\n**Conversion cartésien → sphérique :**\r\n- r = √(x² + y² + z²)\r\n- θ = arccos(z/r)\r\n- φ = arctan(y/x)\r\n\r\n## Exercice Pratique 1 : Conversion de Coordonnées\r\n\r\n**Objectif** : Maîtriser les conversions entre systèmes de coordonnées\r\n\r\n**Problème :**\r\nUn robot doit atteindre un point situé à :\r\n- Coordonnées cartésiennes : (150mm, 200mm, 300mm)\r\n\r\n**Tâches :**\r\n1. Convertir en coordonnées cylindriques\r\n2. Convertir en coordonnées sphériques\r\n3. Vérifier vos calculs avec le simulateur en ligne\r\n\r\n**Solution :**\r\n\r\n*Coordonnées cylindriques :*\r\n- ρ = √(150² + 200²) = √(22500 + 40000) = 250mm\r\n- φ = arctan(200/150) = 53.13°\r\n- z = 300mm\r\n\r\n*Coordonnées sphériques :*\r\n- r = √(150² + 200² + 300²) = √112500 = 335.4mm\r\n- θ = arccos(300/335.4) = 26.57°\r\n- φ = arctan(200/150) = 53.13°\r\n\r\n**Temps alloué** : 20 minutes\r\n\r\n---",
              "htmlContent": "<hundefined id=\"object-object\">[object Object]</hundefined><p>En robotique, la <strong>localisation précise</strong> des objets et des outils est fondamentale. Un technicien doit maîtriser les différents systèmes de coordonnées pour comprendre et programmer les mouvements robotiques.</p>\n<hundefined id=\"object-object\">[object Object]</hundefined><p>Le système cartésien utilise trois axes perpendiculaires : <strong>X, Y, et Z</strong>.</p>\n<p><strong>Caractéristiques principales :</strong></p>\n<ul>\n<li><strong>Axe X</strong> : Généralement horizontal, vers la droite</li>\n<li><strong>Axe Y</strong> : Généralement horizontal, vers l&#39;avant  </li>\n<li><strong>Axe Z</strong> : Généralement vertical, vers le haut</li>\n<li><strong>Origine (0,0,0)</strong> : Point de référence du système</li>\n</ul>\n<blockquote>[object Object]</blockquote><hundefined id=\"object-object\">[object Object]</hundefined><p><strong>Convention main droite :</strong></p>\n<ol>\n<li>Pointez le pouce dans la direction X positive</li>\n<li>L&#39;index indique Y positive</li>\n<li>Le majeur indique Z positive</li>\n</ol>\n<p>Cette convention assure la cohérence entre tous les systèmes robotiques.</p>\n<hundefined id=\"object-object\">[object Object]</hundefined><p>Particulièrement utile pour les robots à configuration cylindrique.</p>\n<p><strong>Paramètres :</strong></p>\n<ul>\n<li><strong>ρ (rho)</strong> : Distance radiale depuis l&#39;axe Z</li>\n<li><strong>φ (phi)</strong> : Angle autour de l&#39;axe Z</li>\n<li><strong>z</strong> : Hauteur le long de l&#39;axe Z</li>\n</ul>\n<p><strong>Conversion cartésien → cylindrique :</strong></p>\n<ul>\n<li>ρ = √(x² + y²)</li>\n<li>φ = arctan(y/x)</li>\n<li>z = z</li>\n</ul>\n<hundefined id=\"object-object\">[object Object]</hundefined><p>Idéal pour les robots à poignet sphérique.</p>\n<p><strong>Paramètres :</strong></p>\n<ul>\n<li><strong>r</strong> : Distance depuis l&#39;origine</li>\n<li><strong>θ (theta)</strong> : Angle d&#39;élévation depuis le plan XY</li>\n<li><strong>φ (phi)</strong> : Angle azimutal dans le plan XY</li>\n</ul>\n<p><strong>Conversion cartésien → sphérique :</strong></p>\n<ul>\n<li>r = √(x² + y² + z²)</li>\n<li>θ = arccos(z/r)</li>\n<li>φ = arctan(y/x)</li>\n</ul>\n<hundefined id=\"object-object\">[object Object]</hundefined><p><strong>Objectif</strong> : Maîtriser les conversions entre systèmes de coordonnées</p>\n<p><strong>Problème :</strong>\nUn robot doit atteindre un point situé à :</p>\n<ul>\n<li>Coordonnées cartésiennes : (150mm, 200mm, 300mm)</li>\n</ul>\n<p><strong>Tâches :</strong></p>\n<ol>\n<li>Convertir en coordonnées cylindriques</li>\n<li>Convertir en coordonnées sphériques</li>\n<li>Vérifier vos calculs avec le simulateur en ligne</li>\n</ol>\n<p><strong>Solution :</strong></p>\n<p><em>Coordonnées cylindriques :</em></p>\n<ul>\n<li>ρ = √(150² + 200²) = √(22500 + 40000) = 250mm</li>\n<li>φ = arctan(200/150) = 53.13°</li>\n<li>z = 300mm</li>\n</ul>\n<p><em>Coordonnées sphériques :</em></p>\n<ul>\n<li>r = √(150² + 200² + 300²) = √112500 = 335.4mm</li>\n<li>θ = arccos(300/335.4) = 26.57°</li>\n<li>φ = arctan(200/150) = 53.13°</li>\n</ul>\n<p><strong>Temps alloué</strong> : 20 minutes</p>\n<hr>\n",
              "components": [
                {
                  "type": "VideoPlayer",
                  "detected": true
                },
                {
                  "type": "ExerciseBlock",
                  "detected": true
                }
              ],
              "estimatedDuration": 26,
              "type": "content"
            },
            "formationTitle": "Mathématiques pour Techniciens en Robotique",
            "primaryColor": "#059669"
          }
        },
        {
          "component": "ModuleCard",
          "props": {
            "module": {
              "id": "-module-2-transformations-gomtriques",
              "title": "\udd04 Module 2 : Transformations Géométriques",
              "titleWithEmoji": "🔄 Module 2 : Transformations Géométriques",
              "emoji": "\ud83d",
              "order": 2,
              "content": "## Translations et Rotations\r\n\r\nLes **transformations géométriques** permettent de décrire le mouvement d'un objet dans l'espace. C'est la base de toute programmation robotique.\r\n\r\n### Translation\r\n\r\nUne translation déplace un point sans changer son orientation.\r\n\r\n**Formule de translation :**\r\n```\r\nx' = x + dx\r\ny' = y + dy  \r\nz' = z + dz\r\n```\r\n\r\nOù (dx, dy, dz) est le vecteur de translation.\r\n\r\n### Rotation autour d'un Axe\r\n\r\n**Rotation autour de l'axe Z (dans le plan XY) :**\r\n```\r\nx' = x⋅cos(θ) - y⋅sin(θ)\r\ny' = x⋅sin(θ) + y⋅cos(θ)\r\nz' = z\r\n```\r\n\r\n**Rotation autour de l'axe X :**\r\n```\r\nx' = x\r\ny' = y⋅cos(θ) - z⋅sin(θ)\r\nz' = y⋅sin(θ) + z⋅cos(θ)\r\n```\r\n\r\n**Rotation autour de l'axe Y :**\r\n```\r\nx' = x⋅cos(θ) + z⋅sin(θ)\r\ny' = y\r\nz' = -x⋅sin(θ) + z⋅cos(θ)\r\n```\r\n\r\n> 📹 **Vidéo recommandée** : \"Démonstration des transformations géométriques\" (18min)\r\n\r\n### Angles d'Euler\r\n\r\nLes **angles d'Euler** décrivent l'orientation d'un objet avec trois rotations successives :\r\n\r\n1. **Roulis (Roll)** : Rotation autour de l'axe X\r\n2. **Tangage (Pitch)** : Rotation autour de l'axe Y  \r\n3. **Lacet (Yaw)** : Rotation autour de l'axe Z\r\n\r\n> ⚠️ **IMPORTANT** : L'ordre des rotations affecte le résultat final !\r\n\r\n## Matrices de Transformation Homogène\r\n\r\nLes **matrices 4×4** permettent de combiner translation et rotation en une seule opération.\r\n\r\n**Structure générale :**\r\n```\r\n[R₁₁ R₁₂ R₁₃ tx]\r\n[R₂₁ R₂₂ R₂₃ ty]\r\n[R₃₁ R₃₂ R₃₃ tz]\r\n[0   0   0   1 ]\r\n```\r\n\r\nOù :\r\n- **R** = Matrice de rotation 3×3\r\n- **t** = Vecteur de translation (tx, ty, tz)\r\n\r\n### Exemple Concret\r\n\r\n**Matrice de translation pure :**\r\n```\r\n[1  0  0  50 ]    # Translation de 50mm en X\r\n[0  1  0  30 ]    # Translation de 30mm en Y\r\n[0  0  1  100]    # Translation de 100mm en Z\r\n[0  0  0  1  ]\r\n```\r\n\r\n**Matrice de rotation de 90° autour de Z :**\r\n```\r\n[0  -1  0  0]     # cos(90°) = 0, sin(90°) = 1\r\n[1   0  0  0]\r\n[0   0  1  0]\r\n[0   0  0  1]\r\n```\r\n\r\n## Exercice Pratique 2 : Transformations Successives\r\n\r\n**Objectif** : Appliquer plusieurs transformations géométriques\r\n\r\n**Contexte :**\r\nUn bras robotique doit :\r\n1. Tourner de 45° autour de l'axe Z\r\n2. Se déplacer de 100mm en X\r\n3. Tourner de 30° autour de l'axe Y\r\n\r\n**Instructions :**\r\n1. Calculer la matrice de chaque transformation\r\n2. Multiplier les matrices dans l'ordre correct\r\n3. Appliquer le résultat au point (50, 0, 0)\r\n\r\n**Temps alloué** : 30 minutes\r\n\r\n---",
              "htmlContent": "<hundefined id=\"object-object\">[object Object]</hundefined><p>Les <strong>transformations géométriques</strong> permettent de décrire le mouvement d&#39;un objet dans l&#39;espace. C&#39;est la base de toute programmation robotique.</p>\n<hundefined id=\"object-object\">[object Object]</hundefined><p>Une translation déplace un point sans changer son orientation.</p>\n<p><strong>Formule de translation :</strong></p>\n<pre><code>x&#39; = x + dx\ny&#39; = y + dy  \nz&#39; = z + dz\n</code></pre>\n<p>Où (dx, dy, dz) est le vecteur de translation.</p>\n<hundefined id=\"object-object\">[object Object]</hundefined><p><strong>Rotation autour de l&#39;axe Z (dans le plan XY) :</strong></p>\n<pre><code>x&#39; = x⋅cos(θ) - y⋅sin(θ)\ny&#39; = x⋅sin(θ) + y⋅cos(θ)\nz&#39; = z\n</code></pre>\n<p><strong>Rotation autour de l&#39;axe X :</strong></p>\n<pre><code>x&#39; = x\ny&#39; = y⋅cos(θ) - z⋅sin(θ)\nz&#39; = y⋅sin(θ) + z⋅cos(θ)\n</code></pre>\n<p><strong>Rotation autour de l&#39;axe Y :</strong></p>\n<pre><code>x&#39; = x⋅cos(θ) + z⋅sin(θ)\ny&#39; = y\nz&#39; = -x⋅sin(θ) + z⋅cos(θ)\n</code></pre>\n<blockquote>[object Object]</blockquote><hundefined id=\"object-object\">[object Object]</hundefined><p>Les <strong>angles d&#39;Euler</strong> décrivent l&#39;orientation d&#39;un objet avec trois rotations successives :</p>\n<ol>\n<li><strong>Roulis (Roll)</strong> : Rotation autour de l&#39;axe X</li>\n<li><strong>Tangage (Pitch)</strong> : Rotation autour de l&#39;axe Y  </li>\n<li><strong>Lacet (Yaw)</strong> : Rotation autour de l&#39;axe Z</li>\n</ol>\n<blockquote>[object Object]</blockquote><hundefined id=\"object-object\">[object Object]</hundefined><p>Les <strong>matrices 4×4</strong> permettent de combiner translation et rotation en une seule opération.</p>\n<p><strong>Structure générale :</strong></p>\n<pre><code>[R₁₁ R₁₂ R₁₃ tx]\n[R₂₁ R₂₂ R₂₃ ty]\n[R₃₁ R₃₂ R₃₃ tz]\n[0   0   0   1 ]\n</code></pre>\n<p>Où :</p>\n<ul>\n<li><strong>R</strong> = Matrice de rotation 3×3</li>\n<li><strong>t</strong> = Vecteur de translation (tx, ty, tz)</li>\n</ul>\n<hundefined id=\"object-object\">[object Object]</hundefined><p><strong>Matrice de translation pure :</strong></p>\n<pre><code>[1  0  0  50 ]    # Translation de 50mm en X\n[0  1  0  30 ]    # Translation de 30mm en Y\n[0  0  1  100]    # Translation de 100mm en Z\n[0  0  0  1  ]\n</code></pre>\n<p><strong>Matrice de rotation de 90° autour de Z :</strong></p>\n<pre><code>[0  -1  0  0]     # cos(90°) = 0, sin(90°) = 1\n[1   0  0  0]\n[0   0  1  0]\n[0   0  0  1]\n</code></pre>\n<hundefined id=\"object-object\">[object Object]</hundefined><p><strong>Objectif</strong> : Appliquer plusieurs transformations géométriques</p>\n<p><strong>Contexte :</strong>\nUn bras robotique doit :</p>\n<ol>\n<li>Tourner de 45° autour de l&#39;axe Z</li>\n<li>Se déplacer de 100mm en X</li>\n<li>Tourner de 30° autour de l&#39;axe Y</li>\n</ol>\n<p><strong>Instructions :</strong></p>\n<ol>\n<li>Calculer la matrice de chaque transformation</li>\n<li>Multiplier les matrices dans l&#39;ordre correct</li>\n<li>Appliquer le résultat au point (50, 0, 0)</li>\n</ol>\n<p><strong>Temps alloué</strong> : 30 minutes</p>\n<hr>\n",
              "components": [
                {
                  "type": "VideoPlayer",
                  "detected": true
                },
                {
                  "type": "ExerciseBlock",
                  "detected": true
                },
                {
                  "type": "CalloutBox",
                  "detected": true
                }
              ],
              "estimatedDuration": 35,
              "type": "content"
            },
            "formationTitle": "Mathématiques pour Techniciens en Robotique",
            "primaryColor": "#059669"
          }
        },
        {
          "component": "ModuleCard",
          "props": {
            "module": {
              "id": "-module-3-cinmatique-et-dynamique",
              "title": "\udfc3 Module 3 : Cinématique et Dynamique",
              "titleWithEmoji": "🏃 Module 3 : Cinématique et Dynamique",
              "emoji": "\ud83c",
              "order": 3,
              "content": "## Cinématique : Étude du Mouvement\r\n\r\nLa **cinématique** analyse le mouvement sans considérer les forces qui le causent. Elle est essentielle pour programmer des trajectoires fluides.\r\n\r\n### Position, Vitesse et Accélération\r\n\r\n**Relations fondamentales :**\r\n- **Vitesse** = dérivée de la position : v = dp/dt\r\n- **Accélération** = dérivée de la vitesse : a = dv/dt = d²p/dt²\r\n\r\n### Mouvement Rectiligne\r\n\r\n**Équations du mouvement uniforme :**\r\n```\r\nPosition : x(t) = x₀ + v₀⋅t\r\nVitesse : v(t) = v₀ (constante)\r\n```\r\n\r\n**Équations du mouvement uniformément accéléré :**\r\n```\r\nPosition : x(t) = x₀ + v₀⋅t + ½⋅a⋅t²\r\nVitesse : v(t) = v₀ + a⋅t\r\n```\r\n\r\n> 📹 **Vidéo recommandée** : \"Calculs de vitesse et trajectoires\" (15min)\r\n\r\n### Mouvement Circulaire\r\n\r\n**Pour un mouvement circulaire uniforme :**\r\n- **Vitesse angulaire** : ω = θ/t (rad/s)\r\n- **Vitesse linéaire** : v = ω⋅r\r\n- **Accélération centripète** : a = v²/r = ω²⋅r\r\n\r\n### Cinématique Directe\r\n\r\nLa **cinématique directe** calcule la position de l'effecteur à partir des angles articulaires.\r\n\r\n**Pour un bras robotique 2D simple :**\r\n```\r\nx = L₁⋅cos(θ₁) + L₂⋅cos(θ₁ + θ₂)\r\ny = L₁⋅sin(θ₁) + L₂⋅sin(θ₁ + θ₂)\r\n```\r\n\r\nOù :\r\n- L₁, L₂ = longueurs des segments\r\n- θ₁, θ₂ = angles articulaires\r\n\r\n### Cinématique Inverse\r\n\r\nLa **cinématique inverse** détermine les angles articulaires pour atteindre une position donnée.\r\n\r\n**Pour le même bras 2D :**\r\n```\r\nθ₂ = ±arccos((x² + y² - L₁² - L₂²)/(2⋅L₁⋅L₂))\r\nθ₁ = arctan(y/x) - arctan((L₂⋅sin(θ₂))/(L₁ + L₂⋅cos(θ₂)))\r\n```\r\n\r\n> ⚠️ **ATTENTION** : Plusieurs solutions peuvent exister (coude en haut/en bas)\r\n\r\n## Exercice Pratique 3 : Calcul de Trajectoire\r\n\r\n**Objectif** : Calculer une trajectoire point à point\r\n\r\n**Problème :**\r\nUn robot doit se déplacer du point A(100, 50) au point B(200, 150) en 2 secondes avec :\r\n- Accélération de 0.5 sec\r\n- Vitesse constante de 1 sec  \r\n- Décélération de 0.5 sec\r\n\r\n**Tâches :**\r\n1. Calculer la distance totale\r\n2. Déterminer les vitesses maximales\r\n3. Établir les équations de mouvement pour chaque phase\r\n4. Vérifier la continuité de la vitesse\r\n\r\n**Temps alloué** : 25 minutes\r\n\r\n---",
              "htmlContent": "<hundefined id=\"object-object\">[object Object]</hundefined><p>La <strong>cinématique</strong> analyse le mouvement sans considérer les forces qui le causent. Elle est essentielle pour programmer des trajectoires fluides.</p>\n<hundefined id=\"object-object\">[object Object]</hundefined><p><strong>Relations fondamentales :</strong></p>\n<ul>\n<li><strong>Vitesse</strong> = dérivée de la position : v = dp/dt</li>\n<li><strong>Accélération</strong> = dérivée de la vitesse : a = dv/dt = d²p/dt²</li>\n</ul>\n<hundefined id=\"object-object\">[object Object]</hundefined><p><strong>Équations du mouvement uniforme :</strong></p>\n<pre><code>Position : x(t) = x₀ + v₀⋅t\nVitesse : v(t) = v₀ (constante)\n</code></pre>\n<p><strong>Équations du mouvement uniformément accéléré :</strong></p>\n<pre><code>Position : x(t) = x₀ + v₀⋅t + ½⋅a⋅t²\nVitesse : v(t) = v₀ + a⋅t\n</code></pre>\n<blockquote>[object Object]</blockquote><hundefined id=\"object-object\">[object Object]</hundefined><p><strong>Pour un mouvement circulaire uniforme :</strong></p>\n<ul>\n<li><strong>Vitesse angulaire</strong> : ω = θ/t (rad/s)</li>\n<li><strong>Vitesse linéaire</strong> : v = ω⋅r</li>\n<li><strong>Accélération centripète</strong> : a = v²/r = ω²⋅r</li>\n</ul>\n<hundefined id=\"object-object\">[object Object]</hundefined><p>La <strong>cinématique directe</strong> calcule la position de l&#39;effecteur à partir des angles articulaires.</p>\n<p><strong>Pour un bras robotique 2D simple :</strong></p>\n<pre><code>x = L₁⋅cos(θ₁) + L₂⋅cos(θ₁ + θ₂)\ny = L₁⋅sin(θ₁) + L₂⋅sin(θ₁ + θ₂)\n</code></pre>\n<p>Où :</p>\n<ul>\n<li>L₁, L₂ = longueurs des segments</li>\n<li>θ₁, θ₂ = angles articulaires</li>\n</ul>\n<hundefined id=\"object-object\">[object Object]</hundefined><p>La <strong>cinématique inverse</strong> détermine les angles articulaires pour atteindre une position donnée.</p>\n<p><strong>Pour le même bras 2D :</strong></p>\n<pre><code>θ₂ = ±arccos((x² + y² - L₁² - L₂²)/(2⋅L₁⋅L₂))\nθ₁ = arctan(y/x) - arctan((L₂⋅sin(θ₂))/(L₁ + L₂⋅cos(θ₂)))\n</code></pre>\n<blockquote>[object Object]</blockquote><hundefined id=\"object-object\">[object Object]</hundefined><p><strong>Objectif</strong> : Calculer une trajectoire point à point</p>\n<p><strong>Problème :</strong>\nUn robot doit se déplacer du point A(100, 50) au point B(200, 150) en 2 secondes avec :</p>\n<ul>\n<li>Accélération de 0.5 sec</li>\n<li>Vitesse constante de 1 sec  </li>\n<li>Décélération de 0.5 sec</li>\n</ul>\n<p><strong>Tâches :</strong></p>\n<ol>\n<li>Calculer la distance totale</li>\n<li>Déterminer les vitesses maximales</li>\n<li>Établir les équations de mouvement pour chaque phase</li>\n<li>Vérifier la continuité de la vitesse</li>\n</ol>\n<p><strong>Temps alloué</strong> : 25 minutes</p>\n<hr>\n",
              "components": [
                {
                  "type": "VideoPlayer",
                  "detected": true
                },
                {
                  "type": "ExerciseBlock",
                  "detected": true
                },
                {
                  "type": "CalloutBox",
                  "detected": true
                }
              ],
              "estimatedDuration": 31,
              "type": "content"
            },
            "formationTitle": "Mathématiques pour Techniciens en Robotique",
            "primaryColor": "#059669"
          }
        },
        {
          "component": "ModuleCard",
          "props": {
            "module": {
              "id": "-module-4-algbre-vectorielle-et-matricielle",
              "title": "\uddee Module 4 : Algèbre Vectorielle et Matricielle",
              "titleWithEmoji": "🧮 Module 4 : Algèbre Vectorielle et Matricielle",
              "emoji": "\ud83e",
              "order": 4,
              "content": "## Vecteurs en Robotique\r\n\r\nLes **vecteurs** représentent des grandeurs ayant une magnitude et une direction : forces, vitesses, positions relatives.\r\n\r\n### Opérations Vectorielles Fondamentales\r\n\r\n**Addition de vecteurs :**\r\n```\r\nA⃗ + B⃗ = (Ax + Bx, Ay + By, Az + Bz)\r\n```\r\n\r\n**Produit scalaire :**\r\n```\r\nA⃗ ⋅ B⃗ = Ax⋅Bx + Ay⋅By + Az⋅Bz = |A⃗|⋅|B⃗|⋅cos(θ)\r\n```\r\n\r\n**Produit vectoriel :**\r\n```\r\nA⃗ × B⃗ = (Ay⋅Bz - Az⋅By, Az⋅Bx - Ax⋅Bz, Ax⋅By - Ay⋅Bx)\r\n```\r\n\r\nLe produit vectoriel donne un vecteur perpendiculaire aux deux vecteurs originaux.\r\n\r\n### Applications en Robotique\r\n\r\n**Calcul de couples :**\r\nLe couple τ⃗ exercé par une force F⃗ à une distance r⃗ :\r\n```\r\nτ⃗ = r⃗ × F⃗\r\n```\r\n\r\n**Test de colinéarité :**\r\nDeux vecteurs sont colinéaires si leur produit vectoriel est nul.\r\n\r\n## Matrices en Robotique\r\n\r\nLes **matrices** sont omniprésentes en robotique pour représenter transformations, rotations et systèmes d'équations.\r\n\r\n> 📹 **Vidéo recommandée** : \"Applications pratiques des matrices\" (20min)\r\n\r\n### Opérations Matricielles\r\n\r\n**Multiplication de matrices :**\r\nPour multiplier A(m×n) et B(n×p), le résultat C(m×p) :\r\n```\r\nCij = Σ(k=1 à n) Aik ⋅ Bkj\r\n```\r\n\r\n**Inversion de matrice :**\r\nEssentielle pour la cinématique inverse :\r\n```\r\nA⁻¹ ⋅ A = I (matrice identité)\r\n```\r\n\r\n### Matrice Jacobienne\r\n\r\nLa **matrice jacobienne** relie les vitesses articulaires aux vitesses cartésiennes :\r\n\r\n```\r\nv⃗ = J ⋅ q̇⃗\r\n```\r\n\r\nOù :\r\n- v⃗ = vitesse cartésienne de l'effecteur\r\n- J = matrice jacobienne\r\n- q̇⃗ = vitesses articulaires\r\n\r\n### Déterminant et Singularités\r\n\r\nLe **déterminant** de la jacobienne indique les singularités :\r\n- det(J) = 0 → Configuration singulière\r\n- det(J) ≠ 0 → Configuration normale\r\n\r\n> ⚠️ **IMPORTANT** : Éviter les singularités en programmation de trajectoires\r\n\r\n## Exercice Pratique 4 : Analyse Vectorielle\r\n\r\n**Objectif** : Résoudre un problème d'équilibre des forces\r\n\r\n**Contexte :**\r\nUn robot manipule un objet de 5 kg. Trois forces s'appliquent :\r\n- F₁ = (10, 15, 0) N\r\n- F₂ = (-5, 8, 12) N  \r\n- F₃ = (?, ?, -20) N (force d'équilibre à calculer)\r\n\r\n**Tâches :**\r\n1. Calculer F₃ pour l'équilibre statique\r\n2. Déterminer l'angle entre F₁ et F₂\r\n3. Calculer le moment résultant par rapport à l'origine\r\n\r\n**Temps alloué** : 20 minutes\r\n\r\n---",
              "htmlContent": "<hundefined id=\"object-object\">[object Object]</hundefined><p>Les <strong>vecteurs</strong> représentent des grandeurs ayant une magnitude et une direction : forces, vitesses, positions relatives.</p>\n<hundefined id=\"object-object\">[object Object]</hundefined><p><strong>Addition de vecteurs :</strong></p>\n<pre><code>A⃗ + B⃗ = (Ax + Bx, Ay + By, Az + Bz)\n</code></pre>\n<p><strong>Produit scalaire :</strong></p>\n<pre><code>A⃗ ⋅ B⃗ = Ax⋅Bx + Ay⋅By + Az⋅Bz = |A⃗|⋅|B⃗|⋅cos(θ)\n</code></pre>\n<p><strong>Produit vectoriel :</strong></p>\n<pre><code>A⃗ × B⃗ = (Ay⋅Bz - Az⋅By, Az⋅Bx - Ax⋅Bz, Ax⋅By - Ay⋅Bx)\n</code></pre>\n<p>Le produit vectoriel donne un vecteur perpendiculaire aux deux vecteurs originaux.</p>\n<hundefined id=\"object-object\">[object Object]</hundefined><p><strong>Calcul de couples :</strong>\nLe couple τ⃗ exercé par une force F⃗ à une distance r⃗ :</p>\n<pre><code>τ⃗ = r⃗ × F⃗\n</code></pre>\n<p><strong>Test de colinéarité :</strong>\nDeux vecteurs sont colinéaires si leur produit vectoriel est nul.</p>\n<hundefined id=\"object-object\">[object Object]</hundefined><p>Les <strong>matrices</strong> sont omniprésentes en robotique pour représenter transformations, rotations et systèmes d&#39;équations.</p>\n<blockquote>[object Object]</blockquote><hundefined id=\"object-object\">[object Object]</hundefined><p><strong>Multiplication de matrices :</strong>\nPour multiplier A(m×n) et B(n×p), le résultat C(m×p) :</p>\n<pre><code>Cij = Σ(k=1 à n) Aik ⋅ Bkj\n</code></pre>\n<p><strong>Inversion de matrice :</strong>\nEssentielle pour la cinématique inverse :</p>\n<pre><code>A⁻¹ ⋅ A = I (matrice identité)\n</code></pre>\n<hundefined id=\"object-object\">[object Object]</hundefined><p>La <strong>matrice jacobienne</strong> relie les vitesses articulaires aux vitesses cartésiennes :</p>\n<pre><code>v⃗ = J ⋅ q̇⃗\n</code></pre>\n<p>Où :</p>\n<ul>\n<li>v⃗ = vitesse cartésienne de l&#39;effecteur</li>\n<li>J = matrice jacobienne</li>\n<li>q̇⃗ = vitesses articulaires</li>\n</ul>\n<hundefined id=\"object-object\">[object Object]</hundefined><p>Le <strong>déterminant</strong> de la jacobienne indique les singularités :</p>\n<ul>\n<li>det(J) = 0 → Configuration singulière</li>\n<li>det(J) ≠ 0 → Configuration normale</li>\n</ul>\n<blockquote>[object Object]</blockquote><hundefined id=\"object-object\">[object Object]</hundefined><p><strong>Objectif</strong> : Résoudre un problème d&#39;équilibre des forces</p>\n<p><strong>Contexte :</strong>\nUn robot manipule un objet de 5 kg. Trois forces s&#39;appliquent :</p>\n<ul>\n<li>F₁ = (10, 15, 0) N</li>\n<li>F₂ = (-5, 8, 12) N  </li>\n<li>F₃ = (?, ?, -20) N (force d&#39;équilibre à calculer)</li>\n</ul>\n<p><strong>Tâches :</strong></p>\n<ol>\n<li>Calculer F₃ pour l&#39;équilibre statique</li>\n<li>Déterminer l&#39;angle entre F₁ et F₂</li>\n<li>Calculer le moment résultant par rapport à l&#39;origine</li>\n</ol>\n<p><strong>Temps alloué</strong> : 20 minutes</p>\n<hr>\n",
              "components": [
                {
                  "type": "VideoPlayer",
                  "detected": true
                },
                {
                  "type": "ExerciseBlock",
                  "detected": true
                },
                {
                  "type": "CalloutBox",
                  "detected": true
                }
              ],
              "estimatedDuration": 36,
              "type": "content"
            },
            "formationTitle": "Mathématiques pour Techniciens en Robotique",
            "primaryColor": "#059669"
          }
        },
        {
          "component": "ModuleCard",
          "props": {
            "module": {
              "id": "-module-5-trigonomtrie-applique",
              "title": "\udccf Module 5 : Trigonométrie Appliquée",
              "titleWithEmoji": "📏 Module 5 : Trigonométrie Appliquée",
              "emoji": "\ud83d",
              "order": 5,
              "content": "## Fonctions Trigonométriques Essentielles\r\n\r\nLa **trigonométrie** est indispensable pour résoudre les problèmes de positionnement et d'orientation en robotique.\r\n\r\n### Relations Fondamentales\r\n\r\n**Triangle rectangle :**\r\n```\r\nsin(θ) = opposé / hypoténuse\r\ncos(θ) = adjacent / hypoténuse  \r\ntan(θ) = opposé / adjacent\r\n```\r\n\r\n**Identités utiles :**\r\n```\r\nsin²(θ) + cos²(θ) = 1\r\ntan(θ) = sin(θ) / cos(θ)\r\nsin(2θ) = 2⋅sin(θ)⋅cos(θ)\r\ncos(2θ) = cos²(θ) - sin²(θ)\r\n```\r\n\r\n### Loi des Cosinus\r\n\r\nPour un triangle quelconque avec côtés a, b, c et angle C opposé au côté c :\r\n```\r\nc² = a² + b² - 2⋅a⋅b⋅cos(C)\r\n```\r\n\r\nCette loi est cruciale pour la cinématique inverse.\r\n\r\n### Loi des Sinus\r\n\r\n```\r\na/sin(A) = b/sin(B) = c/sin(C)\r\n```\r\n\r\n## Applications Robotiques Spécifiques\r\n\r\n### Calcul d'Angles Articulaires\r\n\r\n**Problème type :** Robot SCARA avec deux liens\r\n- Lien 1 : longueur L₁\r\n- Lien 2 : longueur L₂\r\n- Position cible : (x, y)\r\n\r\n**Solution par loi des cosinus :**\r\n```\r\ncos(θ₂) = (x² + y² - L₁² - L₂²) / (2⋅L₁⋅L₂)\r\nθ₂ = ±arccos(cos(θ₂))\r\n```\r\n\r\n### Orientation d'Outils\r\n\r\n**Calcul de l'angle d'approche :**\r\nPour approcher perpendiculairement une surface inclinée d'angle α :\r\n```\r\nθ_outil = 90° - α\r\n```\r\n\r\n## Exercice Pratique 5 : Problème de Positionnement\r\n\r\n**Objectif** : Résoudre un problème de cinématique inverse complexe\r\n\r\n**Configuration :**\r\nRobot planaire à 3 degrés de liberté :\r\n- L₁ = 300mm (bras principal)\r\n- L₂ = 200mm (avant-bras)  \r\n- L₃ = 100mm (poignet)\r\n\r\n**Mission :**\r\nAtteindre le point (400, 300) avec orientation de l'effecteur à 45°\r\n\r\n**Instructions :**\r\n1. Utiliser la loi des cosinus pour θ₂\r\n2. Calculer θ₁ par trigonométrie\r\n3. Déterminer θ₃ pour l'orientation finale\r\n4. Vérifier par cinématique directe\r\n\r\n**Temps alloué** : 35 minutes\r\n\r\n---",
              "htmlContent": "<hundefined id=\"object-object\">[object Object]</hundefined><p>La <strong>trigonométrie</strong> est indispensable pour résoudre les problèmes de positionnement et d&#39;orientation en robotique.</p>\n<hundefined id=\"object-object\">[object Object]</hundefined><p><strong>Triangle rectangle :</strong></p>\n<pre><code>sin(θ) = opposé / hypoténuse\ncos(θ) = adjacent / hypoténuse  \ntan(θ) = opposé / adjacent\n</code></pre>\n<p><strong>Identités utiles :</strong></p>\n<pre><code>sin²(θ) + cos²(θ) = 1\ntan(θ) = sin(θ) / cos(θ)\nsin(2θ) = 2⋅sin(θ)⋅cos(θ)\ncos(2θ) = cos²(θ) - sin²(θ)\n</code></pre>\n<hundefined id=\"object-object\">[object Object]</hundefined><p>Pour un triangle quelconque avec côtés a, b, c et angle C opposé au côté c :</p>\n<pre><code>c² = a² + b² - 2⋅a⋅b⋅cos(C)\n</code></pre>\n<p>Cette loi est cruciale pour la cinématique inverse.</p>\n<hundefined id=\"object-object\">[object Object]</hundefined><pre><code>a/sin(A) = b/sin(B) = c/sin(C)\n</code></pre>\n<hundefined id=\"object-object\">[object Object]</hundefined><hundefined id=\"object-object\">[object Object]</hundefined><p><strong>Problème type :</strong> Robot SCARA avec deux liens</p>\n<ul>\n<li>Lien 1 : longueur L₁</li>\n<li>Lien 2 : longueur L₂</li>\n<li>Position cible : (x, y)</li>\n</ul>\n<p><strong>Solution par loi des cosinus :</strong></p>\n<pre><code>cos(θ₂) = (x² + y² - L₁² - L₂²) / (2⋅L₁⋅L₂)\nθ₂ = ±arccos(cos(θ₂))\n</code></pre>\n<hundefined id=\"object-object\">[object Object]</hundefined><p><strong>Calcul de l&#39;angle d&#39;approche :</strong>\nPour approcher perpendiculairement une surface inclinée d&#39;angle α :</p>\n<pre><code>θ_outil = 90° - α\n</code></pre>\n<hundefined id=\"object-object\">[object Object]</hundefined><p><strong>Objectif</strong> : Résoudre un problème de cinématique inverse complexe</p>\n<p><strong>Configuration :</strong>\nRobot planaire à 3 degrés de liberté :</p>\n<ul>\n<li>L₁ = 300mm (bras principal)</li>\n<li>L₂ = 200mm (avant-bras)  </li>\n<li>L₃ = 100mm (poignet)</li>\n</ul>\n<p><strong>Mission :</strong>\nAtteindre le point (400, 300) avec orientation de l&#39;effecteur à 45°</p>\n<p><strong>Instructions :</strong></p>\n<ol>\n<li>Utiliser la loi des cosinus pour θ₂</li>\n<li>Calculer θ₁ par trigonométrie</li>\n<li>Déterminer θ₃ pour l&#39;orientation finale</li>\n<li>Vérifier par cinématique directe</li>\n</ol>\n<p><strong>Temps alloué</strong> : 35 minutes</p>\n<hr>\n",
              "components": [
                {
                  "type": "ExerciseBlock",
                  "detected": true
                }
              ],
              "estimatedDuration": 12,
              "type": "content"
            },
            "formationTitle": "Mathématiques pour Techniciens en Robotique",
            "primaryColor": "#059669"
          }
        },
        {
          "component": "ModuleCard",
          "props": {
            "module": {
              "id": "module-6-applications-pratiques-et-rsolution-de-problmes",
              "title": "Module 6 : Applications Pratiques et Résolution de Problèmes",
              "titleWithEmoji": "🎯 Module 6 : Applications Pratiques et Résolution de Problèmes",
              "emoji": "🎯",
              "order": 6,
              "content": "## Méthodologie de Résolution\r\n\r\nFace à un problème robotique complexe, suivre cette **approche structurée** :\r\n\r\n### Étape 1 : Analyse du Problème\r\n1. **Identifier** les contraintes géométriques\r\n2. **Définir** les systèmes de coordonnées\r\n3. **Lister** les inconnues et données\r\n4. **Choisir** les outils mathématiques appropriés\r\n\r\n### Étape 2 : Modélisation Mathématique\r\n1. **Établir** les équations de base\r\n2. **Simplifier** si possible\r\n3. **Vérifier** la cohérence dimensionnelle\r\n4. **Prévoir** les cas limites\r\n\r\n### Étape 3 : Résolution et Validation\r\n1. **Résoudre** étape par étape\r\n2. **Vérifier** les résultats par méthode alternative\r\n3. **Tester** avec des valeurs limites\r\n4. **Interpréter** physiquement les solutions\r\n\r\n## Cas d'Étude Complet : Robot de Soudage\r\n\r\n### Contexte\r\nUn robot de soudage 6 axes doit suivre une trajectoire circulaire de rayon 50mm, centrée en (200, 150, 100), dans le plan Z = 100mm.\r\n\r\n### Analyse Mathématique\r\n\r\n**Paramètrisation de la trajectoire :**\r\n```\r\nx(t) = 200 + 50⋅cos(ωt)\r\ny(t) = 150 + 50⋅sin(ωt)  \r\nz(t) = 100\r\n```\r\n\r\n**Vitesses requises :**\r\n```\r\nvx(t) = -50ω⋅sin(ωt)\r\nvy(t) = 50ω⋅cos(ωt)\r\nvz(t) = 0\r\n```\r\n\r\n**Accélérations :**\r\n```\r\nax(t) = -50ω²⋅cos(ωt)\r\nay(t) = -50ω²⋅sin(ωt)\r\naz(t) = 0\r\n```\r\n\r\n### Contraintes de Performance\r\n\r\n**Vitesse maximale :** 100 mm/s\r\n```\r\n|v|max = 50ω → ω ≤ 2 rad/s\r\n```\r\n\r\n**Accélération maximale :** 500 mm/s²\r\n```\r\n|a|max = 50ω² → ω ≤ √10 ≈ 3.16 rad/s\r\n```\r\n\r\nLa contrainte de vitesse est **limitante** : ω = 2 rad/s maximum.\r\n\r\n### Orientation de l'Outil\r\n\r\n**Vecteur tangent à la trajectoire :**\r\n```\r\nT⃗(t) = (-sin(ωt), cos(ωt), 0)\r\n```\r\n\r\n**Angle d'orientation :**\r\n```\r\nθ(t) = arctan(cos(ωt) / -sin(ωt)) = ωt - π/2\r\n```\r\n\r\n## Exercice Pratique Final : Projet Intégré\r\n\r\n**Objectif** : Intégrer tous les concepts mathématiques\r\n\r\n**Projet :** Conception d'une cellule robotique de palettisation\r\n\r\n**Spécifications :**\r\n- Robot 4 axes (SCARA + rotation + translation Z)\r\n- Zone de travail : 1000mm × 800mm\r\n- Hauteur : 0 à 500mm\r\n- Palettes : 1200mm × 800mm\r\n- Objets : cubes de 100mm × 100mm × 100mm\r\n\r\n**Livrables :**\r\n1. **Analyse géométrique** de l'espace de travail\r\n2. **Calcul des limites articulaires** requises\r\n3. **Programmation mathématique** d'un motif de palettisation\r\n4. **Optimisation de trajectoire** pour temps de cycle minimal\r\n5. **Validation** par simulation\r\n\r\n**Critères d'évaluation :**\r\n- Exactitude des calculs mathématiques (40%)\r\n- Méthodologie de résolution (30%)\r\n- Optimisation et efficacité (20%)\r\n- Présentation et clarté (10%)\r\n\r\n**Temps alloué** : 90 minutes\r\n\r\n> 💡 **ASTUCE** : Utilisez les outils en ligne pour vérifier vos calculs matriciels et trigonométriques complexes.\r\n\r\n---\r\n\r\n## 📋 Récapitulatif et Points Clés\r\n\r\n### Concepts Maîtrisés ✅\r\n\r\n1. **Systèmes de coordonnées** : Cartésien, cylindrique, sphérique\r\n2. **Transformations géométriques** : Translation, rotation, matrices homogènes  \r\n3. **Cinématique** : Directe, inverse, trajectoires\r\n4. **Algèbre vectorielle** : Produits scalaire et vectoriel, applications\r\n5. **Matrices** : Multiplication, inversion, jacobienne\r\n6. **Trigonométrie** : Fonctions, identités, lois des cosinus/sinus\r\n\r\n### Formules Essentielles 📐\r\n\r\n**Transformation homogène :**\r\n```\r\n[R  t]   [p]   [Rp + t]\r\n[0  1] ⋅ [1] = [  1   ]\r\n```\r\n\r\n**Cinématique directe 2D :**\r\n```\r\nx = L₁cos(θ₁) + L₂cos(θ₁+θ₂)\r\ny = L₁sin(θ₁) + L₂sin(θ₁+θ₂)\r\n```\r\n\r\n**Vitesse en coordonnées polaires :**\r\n```\r\nvr = ṙ\r\nvθ = rθ̇\r\n```\r\n\r\n### Applications Industrielles 🏭\r\n\r\n- **Programmation de trajectoires** optimisées\r\n- **Calibrage et étalonnage** de robots\r\n- **Diagnostic de singularités** et limitations\r\n- **Calcul de forces et couples** requis\r\n- **Optimisation de cycles** de production\r\n\r\n### Ressources pour Approfondir 📚\r\n\r\n- Formulaires mathématiques spécialisés robotique\r\n- Simulateurs de cinématique en ligne\r\n- Logiciels de calcul matriciel (MATLAB, Octave)\r\n- Standards industriels de programmation robot\r\n\r\n---\r\n\r\n*Cette formation vous donne les bases mathématiques solides nécessaires pour exceller comme technicien en robotique. Continuez à pratiquer ces concepts dans vos applications quotidiennes !*",
              "htmlContent": "<hundefined id=\"object-object\">[object Object]</hundefined><p>Face à un problème robotique complexe, suivre cette <strong>approche structurée</strong> :</p>\n<hundefined id=\"object-object\">[object Object]</hundefined><ol>\n<li><strong>Identifier</strong> les contraintes géométriques</li>\n<li><strong>Définir</strong> les systèmes de coordonnées</li>\n<li><strong>Lister</strong> les inconnues et données</li>\n<li><strong>Choisir</strong> les outils mathématiques appropriés</li>\n</ol>\n<hundefined id=\"object-object\">[object Object]</hundefined><ol>\n<li><strong>Établir</strong> les équations de base</li>\n<li><strong>Simplifier</strong> si possible</li>\n<li><strong>Vérifier</strong> la cohérence dimensionnelle</li>\n<li><strong>Prévoir</strong> les cas limites</li>\n</ol>\n<hundefined id=\"object-object\">[object Object]</hundefined><ol>\n<li><strong>Résoudre</strong> étape par étape</li>\n<li><strong>Vérifier</strong> les résultats par méthode alternative</li>\n<li><strong>Tester</strong> avec des valeurs limites</li>\n<li><strong>Interpréter</strong> physiquement les solutions</li>\n</ol>\n<hundefined id=\"object-object\">[object Object]</hundefined><hundefined id=\"object-object\">[object Object]</hundefined><p>Un robot de soudage 6 axes doit suivre une trajectoire circulaire de rayon 50mm, centrée en (200, 150, 100), dans le plan Z = 100mm.</p>\n<hundefined id=\"object-object\">[object Object]</hundefined><p><strong>Paramètrisation de la trajectoire :</strong></p>\n<pre><code>x(t) = 200 + 50⋅cos(ωt)\ny(t) = 150 + 50⋅sin(ωt)  \nz(t) = 100\n</code></pre>\n<p><strong>Vitesses requises :</strong></p>\n<pre><code>vx(t) = -50ω⋅sin(ωt)\nvy(t) = 50ω⋅cos(ωt)\nvz(t) = 0\n</code></pre>\n<p><strong>Accélérations :</strong></p>\n<pre><code>ax(t) = -50ω²⋅cos(ωt)\nay(t) = -50ω²⋅sin(ωt)\naz(t) = 0\n</code></pre>\n<hundefined id=\"object-object\">[object Object]</hundefined><p><strong>Vitesse maximale :</strong> 100 mm/s</p>\n<pre><code>|v|max = 50ω → ω ≤ 2 rad/s\n</code></pre>\n<p><strong>Accélération maximale :</strong> 500 mm/s²</p>\n<pre><code>|a|max = 50ω² → ω ≤ √10 ≈ 3.16 rad/s\n</code></pre>\n<p>La contrainte de vitesse est <strong>limitante</strong> : ω = 2 rad/s maximum.</p>\n<hundefined id=\"object-object\">[object Object]</hundefined><p><strong>Vecteur tangent à la trajectoire :</strong></p>\n<pre><code>T⃗(t) = (-sin(ωt), cos(ωt), 0)\n</code></pre>\n<p><strong>Angle d&#39;orientation :</strong></p>\n<pre><code>θ(t) = arctan(cos(ωt) / -sin(ωt)) = ωt - π/2\n</code></pre>\n<hundefined id=\"object-object\">[object Object]</hundefined><p><strong>Objectif</strong> : Intégrer tous les concepts mathématiques</p>\n<p><strong>Projet :</strong> Conception d&#39;une cellule robotique de palettisation</p>\n<p><strong>Spécifications :</strong></p>\n<ul>\n<li>Robot 4 axes (SCARA + rotation + translation Z)</li>\n<li>Zone de travail : 1000mm × 800mm</li>\n<li>Hauteur : 0 à 500mm</li>\n<li>Palettes : 1200mm × 800mm</li>\n<li>Objets : cubes de 100mm × 100mm × 100mm</li>\n</ul>\n<p><strong>Livrables :</strong></p>\n<ol>\n<li><strong>Analyse géométrique</strong> de l&#39;espace de travail</li>\n<li><strong>Calcul des limites articulaires</strong> requises</li>\n<li><strong>Programmation mathématique</strong> d&#39;un motif de palettisation</li>\n<li><strong>Optimisation de trajectoire</strong> pour temps de cycle minimal</li>\n<li><strong>Validation</strong> par simulation</li>\n</ol>\n<p><strong>Critères d&#39;évaluation :</strong></p>\n<ul>\n<li>Exactitude des calculs mathématiques (40%)</li>\n<li>Méthodologie de résolution (30%)</li>\n<li>Optimisation et efficacité (20%)</li>\n<li>Présentation et clarté (10%)</li>\n</ul>\n<p><strong>Temps alloué</strong> : 90 minutes</p>\n<blockquote>[object Object]</blockquote><hr>\n<hundefined id=\"object-object\">[object Object]</hundefined><hundefined id=\"object-object\">[object Object]</hundefined><ol>\n<li><strong>Systèmes de coordonnées</strong> : Cartésien, cylindrique, sphérique</li>\n<li><strong>Transformations géométriques</strong> : Translation, rotation, matrices homogènes  </li>\n<li><strong>Cinématique</strong> : Directe, inverse, trajectoires</li>\n<li><strong>Algèbre vectorielle</strong> : Produits scalaire et vectoriel, applications</li>\n<li><strong>Matrices</strong> : Multiplication, inversion, jacobienne</li>\n<li><strong>Trigonométrie</strong> : Fonctions, identités, lois des cosinus/sinus</li>\n</ol>\n<hundefined id=\"object-object\">[object Object]</hundefined><p><strong>Transformation homogène :</strong></p>\n<pre><code>[R  t]   [p]   [Rp + t]\n[0  1] ⋅ [1] = [  1   ]\n</code></pre>\n<p><strong>Cinématique directe 2D :</strong></p>\n<pre><code>x = L₁cos(θ₁) + L₂cos(θ₁+θ₂)\ny = L₁sin(θ₁) + L₂sin(θ₁+θ₂)\n</code></pre>\n<p><strong>Vitesse en coordonnées polaires :</strong></p>\n<pre><code>vr = ṙ\nvθ = rθ̇\n</code></pre>\n<hundefined id=\"object-object\">[object Object]</hundefined><ul>\n<li><strong>Programmation de trajectoires</strong> optimisées</li>\n<li><strong>Calibrage et étalonnage</strong> de robots</li>\n<li><strong>Diagnostic de singularités</strong> et limitations</li>\n<li><strong>Calcul de forces et couples</strong> requis</li>\n<li><strong>Optimisation de cycles</strong> de production</li>\n</ul>\n<hundefined id=\"object-object\">[object Object]</hundefined><ul>\n<li>Formulaires mathématiques spécialisés robotique</li>\n<li>Simulateurs de cinématique en ligne</li>\n<li>Logiciels de calcul matriciel (MATLAB, Octave)</li>\n<li>Standards industriels de programmation robot</li>\n</ul>\n<hr>\n<p><em>Cette formation vous donne les bases mathématiques solides nécessaires pour exceller comme technicien en robotique. Continuez à pratiquer ces concepts dans vos applications quotidiennes !</em></p>\n",
              "components": [
                {
                  "type": "ExerciseBlock",
                  "detected": true
                },
                {
                  "type": "CalloutBox",
                  "detected": true
                }
              ],
              "estimatedDuration": 19,
              "type": "practice"
            },
            "formationTitle": "Mathématiques pour Techniciens en Robotique",
            "primaryColor": "#059669"
          }
        }
      ],
      "resources": "ResourceList",
      "assessment": "QuizSection",
      "equipment": null
    },
    "features": [
      "progression",
      "exercises",
      "assessment",
      "certification"
    ],
    "sections": [
      "introduction",
      "content",
      "practice",
      "evaluation"
    ]
  }
}
