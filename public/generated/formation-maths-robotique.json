{
  "title": "Mathématiques pour Techniciens en Robotique",
  "type": "skills",
  "company": "AEQ",
  "duration": 150,
  "difficulty": "Avancée",
  "instructor": "Alexis Ross",
  "version": "1.0",
  "last_updated": "2025-05-28",
  "theme": "industrial",
  "primary_color": "#059669",
  "accent_color": "#dc2626",
  "learning_objectives": [
    "Maîtriser les systèmes de coordonnées et transformations géométriques en robotique",
    "Calculer les vitesses et accélérations dans les mouvements robotiques",
    "Appliquer la trigonométrie pour résoudre des problèmes de positionnement",
    "Utiliser l'algèbre vectorielle pour analyser les forces et déplacements",
    "Comprendre les matrices de transformation homogène",
    "Résoudre des problèmes de cinématique directe et inverse"
  ],
  "prerequisites": [
    "Mathématiques de niveau collégial",
    "Notions de base en physique mécanique",
    "Expérience pratique avec des systèmes robotiques",
    "Capacité à utiliser une calculatrice scientifique"
  ],
  "resources": {
    "videos": [
      {
        "title": "Introduction aux coordonnées cartésiennes en robotique",
        "file": "maths-robotique-module1-coordonnees.mp4",
        "duration": "12min"
      },
      {
        "title": "Démonstration des transformations géométriques",
        "file": "maths-robotique-module2-transformations.mp4",
        "duration": "18min"
      },
      {
        "title": "Calculs de vitesse et trajectoires",
        "file": "maths-robotique-module3-cinematique.mp4",
        "duration": "15min"
      },
      {
        "title": "Applications pratiques des matrices",
        "file": "maths-robotique-module4-matrices.mp4",
        "duration": "20min"
      }
    ],
    "documents": [
      {
        "title": "Formulaire mathématique robotique",
        "file": "Robotics_Math_Formulas_FR.pdf"
      },
      {
        "title": "Exercices corrigés - Transformations",
        "file": "Math_Exercises_Transformations.pdf"
      },
      {
        "title": "Tables trigonométriques de référence",
        "file": "Trigonometry_Reference_Tables.pdf"
      }
    ],
    "links": [
      {
        "title": "Calculateur de matrices en ligne",
        "url": "https://www.symbolab.com/solver/matrix-calculator",
        "description": "Outil pour vérifier vos calculs matriciels"
      },
      {
        "title": "Simulateur de transformations géométriques",
        "url": "https://www.geogebra.org/3d",
        "description": "Visualisation interactive des transformations"
      }
    ]
  },
  "assessment": {
    "practical_weight": 60,
    "theory_weight": 40,
    "passing_grade": 75,
    "exercises": [
      "Calcul de position d'un effecteur à partir d'angles articulaires",
      "Détermination de trajectoire optimale entre deux points",
      "Résolution d'un problème de cinématique inverse",
      "Application des matrices de transformation homogène"
    ]
  },
  "slug": "formation-maths-robotique",
  "filename": "formation_maths_robotique.md",
  "lastProcessed": "2025-05-30T16:48:49.617Z",
  "generatorVersion": "1.0.0",
  "modules": [
    {
      "id": "-module-1-systmes-de-coordonnes-et-repres",
      "title": "\udcd0 Module 1 : Systèmes de Coordonnées et Repères",
      "titleWithEmoji": "📐 Module 1 : Systèmes de Coordonnées et Repères",
      "emoji": "\ud83d",
      "order": 1,
      "content": "## Introduction aux Systèmes de Coordonnées\n\nEn robotique, la **localisation précise** des objets et des outils est fondamentale. Un technicien doit maîtriser les différents systèmes de coordonnées pour comprendre et programmer les mouvements robotiques.\n\n### Système de Coordonnées Cartésiennes\n\nLe système cartésien utilise trois axes perpendiculaires : **X, Y, et Z**.\n\n**Caractéristiques principales :**\n- **Axe X** : Généralement horizontal, vers la droite\n- **Axe Y** : Généralement horizontal, vers l'avant  \n- **Axe Z** : Généralement vertical, vers le haut\n- **Origine (0,0,0)** : Point de référence du système\n\n> 📹 **Vidéo recommandée** : \"Introduction aux coordonnées cartésiennes en robotique\" (12min)\n\n### Conventions Robotiques Standards\n\n**Convention main droite :**\n1. Pointez le pouce dans la direction X positive\n2. L'index indique Y positive\n3. Le majeur indique Z positive\n\nCette convention assure la cohérence entre tous les systèmes robotiques.\n\n### Système de Coordonnées Cylindriques\n\nParticulièrement utile pour les robots à configuration cylindrique.\n\n**Paramètres :**\n- **ρ (rho)** : Distance radiale depuis l'axe Z\n- **φ (phi)** : Angle autour de l'axe Z\n- **z** : Hauteur le long de l'axe Z\n\n**Conversion cartésien → cylindrique :**\n- ρ = √(x² + y²)\n- φ = arctan(y/x)\n- z = z\n\n### Système de Coordonnées Sphériques\n\nIdéal pour les robots à poignet sphérique.\n\n**Paramètres :**\n- **r** : Distance depuis l'origine\n- **θ (theta)** : Angle d'élévation depuis le plan XY\n- **φ (phi)** : Angle azimutal dans le plan XY\n\n**Conversion cartésien → sphérique :**\n- r = √(x² + y² + z²)\n- θ = arccos(z/r)\n- φ = arctan(y/x)\n\n## Exercice Pratique 1 : Conversion de Coordonnées\n\n**Objectif** : Maîtriser les conversions entre systèmes de coordonnées\n\n**Problème :**\nUn robot doit atteindre un point situé à :\n- Coordonnées cartésiennes : (150mm, 200mm, 300mm)\n\n**Tâches :**\n1. Convertir en coordonnées cylindriques\n2. Convertir en coordonnées sphériques\n3. Vérifier vos calculs avec le simulateur en ligne\n\n**Solution :**\n\n*Coordonnées cylindriques :*\n- ρ = √(150² + 200²) = √(22500 + 40000) = 250mm\n- φ = arctan(200/150) = 53.13°\n- z = 300mm\n\n*Coordonnées sphériques :*\n- r = √(150² + 200² + 300²) = √112500 = 335.4mm\n- θ = arccos(300/335.4) = 26.57°\n- φ = arctan(200/150) = 53.13°\n\n**Temps alloué** : 20 minutes\n\n---",
      "htmlContent": "<h2 id=\"introduction-aux-systmes-de-coordonnes\" class=\"heading-2 text-2xl font-bold mb-4\">Introduction aux Systèmes de Coordonnées</h2><p>En robotique, la <strong>localisation précise</strong> des objets et des outils est fondamentale. Un technicien doit maîtriser les différents systèmes de coordonnées pour comprendre et programmer les mouvements robotiques.</p>\n<h3 id=\"systme-de-coordonnes-cartsiennes\" class=\"heading-3 text-xl font-bold mb-4\">Système de Coordonnées Cartésiennes</h3><p>Le système cartésien utilise trois axes perpendiculaires : <strong>X, Y, et Z</strong>.</p>\n<p><strong>Caractéristiques principales :</strong></p>\n<ul>\n<li><strong>Axe X</strong> : Généralement horizontal, vers la droite</li>\n<li><strong>Axe Y</strong> : Généralement horizontal, vers l&#39;avant  </li>\n<li><strong>Axe Z</strong> : Généralement vertical, vers le haut</li>\n<li><strong>Origine (0,0,0)</strong> : Point de référence du système</li>\n</ul>\n<div class=\"callout callout-video bg-purple-50 border-l-4 border-purple-400 p-4 my-4 rounded-r-lg\"><p>📹 <strong>Vidéo recommandée</strong> : &quot;Introduction aux coordonnées cartésiennes en robotique&quot; (12min)</p>\n</div><h3 id=\"conventions-robotiques-standards\" class=\"heading-3 text-xl font-bold mb-4\">Conventions Robotiques Standards</h3><p><strong>Convention main droite :</strong></p>\n<ol>\n<li>Pointez le pouce dans la direction X positive</li>\n<li>L&#39;index indique Y positive</li>\n<li>Le majeur indique Z positive</li>\n</ol>\n<p>Cette convention assure la cohérence entre tous les systèmes robotiques.</p>\n<h3 id=\"systme-de-coordonnes-cylindriques\" class=\"heading-3 text-xl font-bold mb-4\">Système de Coordonnées Cylindriques</h3><p>Particulièrement utile pour les robots à configuration cylindrique.</p>\n<p><strong>Paramètres :</strong></p>\n<ul>\n<li><strong>ρ (rho)</strong> : Distance radiale depuis l&#39;axe Z</li>\n<li><strong>φ (phi)</strong> : Angle autour de l&#39;axe Z</li>\n<li><strong>z</strong> : Hauteur le long de l&#39;axe Z</li>\n</ul>\n<p><strong>Conversion cartésien → cylindrique :</strong></p>\n<ul>\n<li>ρ = √(x² + y²)</li>\n<li>φ = arctan(y/x)</li>\n<li>z = z</li>\n</ul>\n<h3 id=\"systme-de-coordonnes-sphriques\" class=\"heading-3 text-xl font-bold mb-4\">Système de Coordonnées Sphériques</h3><p>Idéal pour les robots à poignet sphérique.</p>\n<p><strong>Paramètres :</strong></p>\n<ul>\n<li><strong>r</strong> : Distance depuis l&#39;origine</li>\n<li><strong>θ (theta)</strong> : Angle d&#39;élévation depuis le plan XY</li>\n<li><strong>φ (phi)</strong> : Angle azimutal dans le plan XY</li>\n</ul>\n<p><strong>Conversion cartésien → sphérique :</strong></p>\n<ul>\n<li>r = √(x² + y² + z²)</li>\n<li>θ = arccos(z/r)</li>\n<li>φ = arctan(y/x)</li>\n</ul>\n<h2 id=\"exercice-pratique-1-conversion-de-coordonnes\" class=\"heading-2 text-2xl font-bold mb-4\">Exercice Pratique 1 : Conversion de Coordonnées</h2><p><strong>Objectif</strong> : Maîtriser les conversions entre systèmes de coordonnées</p>\n<p><strong>Problème :</strong>\nUn robot doit atteindre un point situé à :</p>\n<ul>\n<li>Coordonnées cartésiennes : (150mm, 200mm, 300mm)</li>\n</ul>\n<p><strong>Tâches :</strong></p>\n<ol>\n<li>Convertir en coordonnées cylindriques</li>\n<li>Convertir en coordonnées sphériques</li>\n<li>Vérifier vos calculs avec le simulateur en ligne</li>\n</ol>\n<p><strong>Solution :</strong></p>\n<p><em>Coordonnées cylindriques :</em></p>\n<ul>\n<li>ρ = √(150² + 200²) = √(22500 + 40000) = 250mm</li>\n<li>φ = arctan(200/150) = 53.13°</li>\n<li>z = 300mm</li>\n</ul>\n<p><em>Coordonnées sphériques :</em></p>\n<ul>\n<li>r = √(150² + 200² + 300²) = √112500 = 335.4mm</li>\n<li>θ = arccos(300/335.4) = 26.57°</li>\n<li>φ = arctan(200/150) = 53.13°</li>\n</ul>\n<p><strong>Temps alloué</strong> : 20 minutes</p>\n<hr>\n",
      "components": [
        {
          "type": "VideoPlayer",
          "detected": true
        },
        {
          "type": "ExerciseBlock",
          "detected": true
        }
      ],
      "estimatedDuration": 28,
      "type": "content"
    },
    {
      "id": "-module-2-transformations-gomtriques",
      "title": "\udd04 Module 2 : Transformations Géométriques",
      "titleWithEmoji": "🔄 Module 2 : Transformations Géométriques",
      "emoji": "\ud83d",
      "order": 2,
      "content": "## Translations et Rotations\n\nLes **transformations géométriques** permettent de décrire le mouvement d'un objet dans l'espace. C'est la base de toute programmation robotique.\n\n### Translation\n\nUne translation déplace un point sans changer son orientation.\n\n**Formule de translation :**\n```\nx' = x + dx\ny' = y + dy  \nz' = z + dz\n```\n\nOù (dx, dy, dz) est le vecteur de translation.\n\n### Rotation autour d'un Axe\n\n**Rotation autour de l'axe Z (dans le plan XY) :**\n```\nx' = x⋅cos(θ) - y⋅sin(θ)\ny' = x⋅sin(θ) + y⋅cos(θ)\nz' = z\n```\n\n**Rotation autour de l'axe X :**\n```\nx' = x\ny' = y⋅cos(θ) - z⋅sin(θ)\nz' = y⋅sin(θ) + z⋅cos(θ)\n```\n\n**Rotation autour de l'axe Y :**\n```\nx' = x⋅cos(θ) + z⋅sin(θ)\ny' = y\nz' = -x⋅sin(θ) + z⋅cos(θ)\n```\n\n> 📹 **Vidéo recommandée** : \"Démonstration des transformations géométriques\" (18min)\n\n### Angles d'Euler\n\nLes **angles d'Euler** décrivent l'orientation d'un objet avec trois rotations successives :\n\n1. **Roulis (Roll)** : Rotation autour de l'axe X\n2. **Tangage (Pitch)** : Rotation autour de l'axe Y  \n3. **Lacet (Yaw)** : Rotation autour de l'axe Z\n\n> ⚠️ **IMPORTANT** : L'ordre des rotations affecte le résultat final !\n\n## Matrices de Transformation Homogène\n\nLes **matrices 4×4** permettent de combiner translation et rotation en une seule opération.\n\n**Structure générale :**\n```\n[R₁₁ R₁₂ R₁₃ tx]\n[R₂₁ R₂₂ R₂₃ ty]\n[R₃₁ R₃₂ R₃₃ tz]\n[0   0   0   1 ]\n```\n\nOù :\n- **R** = Matrice de rotation 3×3\n- **t** = Vecteur de translation (tx, ty, tz)\n\n### Exemple Concret\n\n**Matrice de translation pure :**\n```\n[1  0  0  50 ]    # Translation de 50mm en X\n[0  1  0  30 ]    # Translation de 30mm en Y\n[0  0  1  100]    # Translation de 100mm en Z\n[0  0  0  1  ]\n```\n\n**Matrice de rotation de 90° autour de Z :**\n```\n[0  -1  0  0]     # cos(90°) = 0, sin(90°) = 1\n[1   0  0  0]\n[0   0  1  0]\n[0   0  0  1]\n```\n\n## Exercice Pratique 2 : Transformations Successives\n\n**Objectif** : Appliquer plusieurs transformations géométriques\n\n**Contexte :**\nUn bras robotique doit :\n1. Tourner de 45° autour de l'axe Z\n2. Se déplacer de 100mm en X\n3. Tourner de 30° autour de l'axe Y\n\n**Instructions :**\n1. Calculer la matrice de chaque transformation\n2. Multiplier les matrices dans l'ordre correct\n3. Appliquer le résultat au point (50, 0, 0)\n\n**Temps alloué** : 30 minutes\n\n---",
      "htmlContent": "<h2 id=\"translations-et-rotations\" class=\"heading-2 text-2xl font-bold mb-4\">Translations et Rotations</h2><p>Les <strong>transformations géométriques</strong> permettent de décrire le mouvement d&#39;un objet dans l&#39;espace. C&#39;est la base de toute programmation robotique.</p>\n<h3 id=\"translation\" class=\"heading-3 text-xl font-bold mb-4\">Translation</h3><p>Une translation déplace un point sans changer son orientation.</p>\n<p><strong>Formule de translation :</strong></p>\n<pre><code>x&#39; = x + dx\ny&#39; = y + dy  \nz&#39; = z + dz\n</code></pre>\n<p>Où (dx, dy, dz) est le vecteur de translation.</p>\n<h3 id=\"rotation-autour-d39un-axe\" class=\"heading-3 text-xl font-bold mb-4\">Rotation autour d&#39;un Axe</h3><p><strong>Rotation autour de l&#39;axe Z (dans le plan XY) :</strong></p>\n<pre><code>x&#39; = x⋅cos(θ) - y⋅sin(θ)\ny&#39; = x⋅sin(θ) + y⋅cos(θ)\nz&#39; = z\n</code></pre>\n<p><strong>Rotation autour de l&#39;axe X :</strong></p>\n<pre><code>x&#39; = x\ny&#39; = y⋅cos(θ) - z⋅sin(θ)\nz&#39; = y⋅sin(θ) + z⋅cos(θ)\n</code></pre>\n<p><strong>Rotation autour de l&#39;axe Y :</strong></p>\n<pre><code>x&#39; = x⋅cos(θ) + z⋅sin(θ)\ny&#39; = y\nz&#39; = -x⋅sin(θ) + z⋅cos(θ)\n</code></pre>\n<div class=\"callout callout-video bg-purple-50 border-l-4 border-purple-400 p-4 my-4 rounded-r-lg\"><p>📹 <strong>Vidéo recommandée</strong> : &quot;Démonstration des transformations géométriques&quot; (18min)</p>\n</div><h3 id=\"angles-d39euler\" class=\"heading-3 text-xl font-bold mb-4\">Angles d&#39;Euler</h3><p>Les <strong>angles d&#39;Euler</strong> décrivent l&#39;orientation d&#39;un objet avec trois rotations successives :</p>\n<ol>\n<li><strong>Roulis (Roll)</strong> : Rotation autour de l&#39;axe X</li>\n<li><strong>Tangage (Pitch)</strong> : Rotation autour de l&#39;axe Y  </li>\n<li><strong>Lacet (Yaw)</strong> : Rotation autour de l&#39;axe Z</li>\n</ol>\n<div class=\"callout callout-warning bg-yellow-50 border-l-4 border-yellow-400 p-4 my-4 rounded-r-lg\"><p>⚠️ <strong>IMPORTANT</strong> : L&#39;ordre des rotations affecte le résultat final !</p>\n</div><h2 id=\"matrices-de-transformation-homogne\" class=\"heading-2 text-2xl font-bold mb-4\">Matrices de Transformation Homogène</h2><p>Les <strong>matrices 4×4</strong> permettent de combiner translation et rotation en une seule opération.</p>\n<p><strong>Structure générale :</strong></p>\n<pre><code>[R₁₁ R₁₂ R₁₃ tx]\n[R₂₁ R₂₂ R₂₃ ty]\n[R₃₁ R₃₂ R₃₃ tz]\n[0   0   0   1 ]\n</code></pre>\n<p>Où :</p>\n<ul>\n<li><strong>R</strong> = Matrice de rotation 3×3</li>\n<li><strong>t</strong> = Vecteur de translation (tx, ty, tz)</li>\n</ul>\n<h3 id=\"exemple-concret\" class=\"heading-3 text-xl font-bold mb-4\">Exemple Concret</h3><p><strong>Matrice de translation pure :</strong></p>\n<pre><code>[1  0  0  50 ]    # Translation de 50mm en X\n[0  1  0  30 ]    # Translation de 30mm en Y\n[0  0  1  100]    # Translation de 100mm en Z\n[0  0  0  1  ]\n</code></pre>\n<p><strong>Matrice de rotation de 90° autour de Z :</strong></p>\n<pre><code>[0  -1  0  0]     # cos(90°) = 0, sin(90°) = 1\n[1   0  0  0]\n[0   0  1  0]\n[0   0  0  1]\n</code></pre>\n<h2 id=\"exercice-pratique-2-transformations-successives\" class=\"heading-2 text-2xl font-bold mb-4\">Exercice Pratique 2 : Transformations Successives</h2><p><strong>Objectif</strong> : Appliquer plusieurs transformations géométriques</p>\n<p><strong>Contexte :</strong>\nUn bras robotique doit :</p>\n<ol>\n<li>Tourner de 45° autour de l&#39;axe Z</li>\n<li>Se déplacer de 100mm en X</li>\n<li>Tourner de 30° autour de l&#39;axe Y</li>\n</ol>\n<p><strong>Instructions :</strong></p>\n<ol>\n<li>Calculer la matrice de chaque transformation</li>\n<li>Multiplier les matrices dans l&#39;ordre correct</li>\n<li>Appliquer le résultat au point (50, 0, 0)</li>\n</ol>\n<p><strong>Temps alloué</strong> : 30 minutes</p>\n<hr>\n",
      "components": [
        {
          "type": "VideoPlayer",
          "detected": true
        },
        {
          "type": "ExerciseBlock",
          "detected": true
        },
        {
          "type": "CalloutBox",
          "detected": true
        }
      ],
      "estimatedDuration": 39,
      "type": "content"
    },
    {
      "id": "-module-3-cinmatique-et-dynamique",
      "title": "\udfc3 Module 3 : Cinématique et Dynamique",
      "titleWithEmoji": "🏃 Module 3 : Cinématique et Dynamique",
      "emoji": "\ud83c",
      "order": 3,
      "content": "## Cinématique : Étude du Mouvement\n\nLa **cinématique** analyse le mouvement sans considérer les forces qui le causent. Elle est essentielle pour programmer des trajectoires fluides.\n\n### Position, Vitesse et Accélération\n\n**Relations fondamentales :**\n- **Vitesse** = dérivée de la position : v = dp/dt\n- **Accélération** = dérivée de la vitesse : a = dv/dt = d²p/dt²\n\n### Mouvement Rectiligne\n\n**Équations du mouvement uniforme :**\n```\nPosition : x(t) = x₀ + v₀⋅t\nVitesse : v(t) = v₀ (constante)\n```\n\n**Équations du mouvement uniformément accéléré :**\n```\nPosition : x(t) = x₀ + v₀⋅t + ½⋅a⋅t²\nVitesse : v(t) = v₀ + a⋅t\n```\n\n> 📹 **Vidéo recommandée** : \"Calculs de vitesse et trajectoires\" (15min)\n\n### Mouvement Circulaire\n\n**Pour un mouvement circulaire uniforme :**\n- **Vitesse angulaire** : ω = θ/t (rad/s)\n- **Vitesse linéaire** : v = ω⋅r\n- **Accélération centripète** : a = v²/r = ω²⋅r\n\n### Cinématique Directe\n\nLa **cinématique directe** calcule la position de l'effecteur à partir des angles articulaires.\n\n**Pour un bras robotique 2D simple :**\n```\nx = L₁⋅cos(θ₁) + L₂⋅cos(θ₁ + θ₂)\ny = L₁⋅sin(θ₁) + L₂⋅sin(θ₁ + θ₂)\n```\n\nOù :\n- L₁, L₂ = longueurs des segments\n- θ₁, θ₂ = angles articulaires\n\n### Cinématique Inverse\n\nLa **cinématique inverse** détermine les angles articulaires pour atteindre une position donnée.\n\n**Pour le même bras 2D :**\n```\nθ₂ = ±arccos((x² + y² - L₁² - L₂²)/(2⋅L₁⋅L₂))\nθ₁ = arctan(y/x) - arctan((L₂⋅sin(θ₂))/(L₁ + L₂⋅cos(θ₂)))\n```\n\n> ⚠️ **ATTENTION** : Plusieurs solutions peuvent exister (coude en haut/en bas)\n\n## Exercice Pratique 3 : Calcul de Trajectoire\n\n**Objectif** : Calculer une trajectoire point à point\n\n**Problème :**\nUn robot doit se déplacer du point A(100, 50) au point B(200, 150) en 2 secondes avec :\n- Accélération de 0.5 sec\n- Vitesse constante de 1 sec  \n- Décélération de 0.5 sec\n\n**Tâches :**\n1. Calculer la distance totale\n2. Déterminer les vitesses maximales\n3. Établir les équations de mouvement pour chaque phase\n4. Vérifier la continuité de la vitesse\n\n**Temps alloué** : 25 minutes\n\n---",
      "htmlContent": "<h2 id=\"cinmatique-tude-du-mouvement\" class=\"heading-2 text-2xl font-bold mb-4\">Cinématique : Étude du Mouvement</h2><p>La <strong>cinématique</strong> analyse le mouvement sans considérer les forces qui le causent. Elle est essentielle pour programmer des trajectoires fluides.</p>\n<h3 id=\"position-vitesse-et-acclration\" class=\"heading-3 text-xl font-bold mb-4\">Position, Vitesse et Accélération</h3><p><strong>Relations fondamentales :</strong></p>\n<ul>\n<li><strong>Vitesse</strong> = dérivée de la position : v = dp/dt</li>\n<li><strong>Accélération</strong> = dérivée de la vitesse : a = dv/dt = d²p/dt²</li>\n</ul>\n<h3 id=\"mouvement-rectiligne\" class=\"heading-3 text-xl font-bold mb-4\">Mouvement Rectiligne</h3><p><strong>Équations du mouvement uniforme :</strong></p>\n<pre><code>Position : x(t) = x₀ + v₀⋅t\nVitesse : v(t) = v₀ (constante)\n</code></pre>\n<p><strong>Équations du mouvement uniformément accéléré :</strong></p>\n<pre><code>Position : x(t) = x₀ + v₀⋅t + ½⋅a⋅t²\nVitesse : v(t) = v₀ + a⋅t\n</code></pre>\n<div class=\"callout callout-video bg-purple-50 border-l-4 border-purple-400 p-4 my-4 rounded-r-lg\"><p>📹 <strong>Vidéo recommandée</strong> : &quot;Calculs de vitesse et trajectoires&quot; (15min)</p>\n</div><h3 id=\"mouvement-circulaire\" class=\"heading-3 text-xl font-bold mb-4\">Mouvement Circulaire</h3><p><strong>Pour un mouvement circulaire uniforme :</strong></p>\n<ul>\n<li><strong>Vitesse angulaire</strong> : ω = θ/t (rad/s)</li>\n<li><strong>Vitesse linéaire</strong> : v = ω⋅r</li>\n<li><strong>Accélération centripète</strong> : a = v²/r = ω²⋅r</li>\n</ul>\n<h3 id=\"cinmatique-directe\" class=\"heading-3 text-xl font-bold mb-4\">Cinématique Directe</h3><p>La <strong>cinématique directe</strong> calcule la position de l&#39;effecteur à partir des angles articulaires.</p>\n<p><strong>Pour un bras robotique 2D simple :</strong></p>\n<pre><code>x = L₁⋅cos(θ₁) + L₂⋅cos(θ₁ + θ₂)\ny = L₁⋅sin(θ₁) + L₂⋅sin(θ₁ + θ₂)\n</code></pre>\n<p>Où :</p>\n<ul>\n<li>L₁, L₂ = longueurs des segments</li>\n<li>θ₁, θ₂ = angles articulaires</li>\n</ul>\n<h3 id=\"cinmatique-inverse\" class=\"heading-3 text-xl font-bold mb-4\">Cinématique Inverse</h3><p>La <strong>cinématique inverse</strong> détermine les angles articulaires pour atteindre une position donnée.</p>\n<p><strong>Pour le même bras 2D :</strong></p>\n<pre><code>θ₂ = ±arccos((x² + y² - L₁² - L₂²)/(2⋅L₁⋅L₂))\nθ₁ = arctan(y/x) - arctan((L₂⋅sin(θ₂))/(L₁ + L₂⋅cos(θ₂)))\n</code></pre>\n<div class=\"callout callout-warning bg-yellow-50 border-l-4 border-yellow-400 p-4 my-4 rounded-r-lg\"><p>⚠️ <strong>ATTENTION</strong> : Plusieurs solutions peuvent exister (coude en haut/en bas)</p>\n</div><h2 id=\"exercice-pratique-3-calcul-de-trajectoire\" class=\"heading-2 text-2xl font-bold mb-4\">Exercice Pratique 3 : Calcul de Trajectoire</h2><p><strong>Objectif</strong> : Calculer une trajectoire point à point</p>\n<p><strong>Problème :</strong>\nUn robot doit se déplacer du point A(100, 50) au point B(200, 150) en 2 secondes avec :</p>\n<ul>\n<li>Accélération de 0.5 sec</li>\n<li>Vitesse constante de 1 sec  </li>\n<li>Décélération de 0.5 sec</li>\n</ul>\n<p><strong>Tâches :</strong></p>\n<ol>\n<li>Calculer la distance totale</li>\n<li>Déterminer les vitesses maximales</li>\n<li>Établir les équations de mouvement pour chaque phase</li>\n<li>Vérifier la continuité de la vitesse</li>\n</ol>\n<p><strong>Temps alloué</strong> : 25 minutes</p>\n<hr>\n",
      "components": [
        {
          "type": "VideoPlayer",
          "detected": true
        },
        {
          "type": "ExerciseBlock",
          "detected": true
        },
        {
          "type": "CalloutBox",
          "detected": true
        }
      ],
      "estimatedDuration": 35,
      "type": "content"
    },
    {
      "id": "-module-4-algbre-vectorielle-et-matricielle",
      "title": "\uddee Module 4 : Algèbre Vectorielle et Matricielle",
      "titleWithEmoji": "🧮 Module 4 : Algèbre Vectorielle et Matricielle",
      "emoji": "\ud83e",
      "order": 4,
      "content": "## Vecteurs en Robotique\n\nLes **vecteurs** représentent des grandeurs ayant une magnitude et une direction : forces, vitesses, positions relatives.\n\n### Opérations Vectorielles Fondamentales\n\n**Addition de vecteurs :**\n```\nA⃗ + B⃗ = (Ax + Bx, Ay + By, Az + Bz)\n```\n\n**Produit scalaire :**\n```\nA⃗ ⋅ B⃗ = Ax⋅Bx + Ay⋅By + Az⋅Bz = |A⃗|⋅|B⃗|⋅cos(θ)\n```\n\n**Produit vectoriel :**\n```\nA⃗ × B⃗ = (Ay⋅Bz - Az⋅By, Az⋅Bx - Ax⋅Bz, Ax⋅By - Ay⋅Bx)\n```\n\nLe produit vectoriel donne un vecteur perpendiculaire aux deux vecteurs originaux.\n\n### Applications en Robotique\n\n**Calcul de couples :**\nLe couple τ⃗ exercé par une force F⃗ à une distance r⃗ :\n```\nτ⃗ = r⃗ × F⃗\n```\n\n**Test de colinéarité :**\nDeux vecteurs sont colinéaires si leur produit vectoriel est nul.\n\n## Matrices en Robotique\n\nLes **matrices** sont omniprésentes en robotique pour représenter transformations, rotations et systèmes d'équations.\n\n> 📹 **Vidéo recommandée** : \"Applications pratiques des matrices\" (20min)\n\n### Opérations Matricielles\n\n**Multiplication de matrices :**\nPour multiplier A(m×n) et B(n×p), le résultat C(m×p) :\n```\nCij = Σ(k=1 à n) Aik ⋅ Bkj\n```\n\n**Inversion de matrice :**\nEssentielle pour la cinématique inverse :\n```\nA⁻¹ ⋅ A = I (matrice identité)\n```\n\n### Matrice Jacobienne\n\nLa **matrice jacobienne** relie les vitesses articulaires aux vitesses cartésiennes :\n\n```\nv⃗ = J ⋅ q̇⃗\n```\n\nOù :\n- v⃗ = vitesse cartésienne de l'effecteur\n- J = matrice jacobienne\n- q̇⃗ = vitesses articulaires\n\n### Déterminant et Singularités\n\nLe **déterminant** de la jacobienne indique les singularités :\n- det(J) = 0 → Configuration singulière\n- det(J) ≠ 0 → Configuration normale\n\n> ⚠️ **IMPORTANT** : Éviter les singularités en programmation de trajectoires\n\n## Exercice Pratique 4 : Analyse Vectorielle\n\n**Objectif** : Résoudre un problème d'équilibre des forces\n\n**Contexte :**\nUn robot manipule un objet de 5 kg. Trois forces s'appliquent :\n- F₁ = (10, 15, 0) N\n- F₂ = (-5, 8, 12) N  \n- F₃ = (?, ?, -20) N (force d'équilibre à calculer)\n\n**Tâches :**\n1. Calculer F₃ pour l'équilibre statique\n2. Déterminer l'angle entre F₁ et F₂\n3. Calculer le moment résultant par rapport à l'origine\n\n**Temps alloué** : 20 minutes\n\n---",
      "htmlContent": "<h2 id=\"vecteurs-en-robotique\" class=\"heading-2 text-2xl font-bold mb-4\">Vecteurs en Robotique</h2><p>Les <strong>vecteurs</strong> représentent des grandeurs ayant une magnitude et une direction : forces, vitesses, positions relatives.</p>\n<h3 id=\"oprations-vectorielles-fondamentales\" class=\"heading-3 text-xl font-bold mb-4\">Opérations Vectorielles Fondamentales</h3><p><strong>Addition de vecteurs :</strong></p>\n<pre><code>A⃗ + B⃗ = (Ax + Bx, Ay + By, Az + Bz)\n</code></pre>\n<p><strong>Produit scalaire :</strong></p>\n<pre><code>A⃗ ⋅ B⃗ = Ax⋅Bx + Ay⋅By + Az⋅Bz = |A⃗|⋅|B⃗|⋅cos(θ)\n</code></pre>\n<p><strong>Produit vectoriel :</strong></p>\n<pre><code>A⃗ × B⃗ = (Ay⋅Bz - Az⋅By, Az⋅Bx - Ax⋅Bz, Ax⋅By - Ay⋅Bx)\n</code></pre>\n<p>Le produit vectoriel donne un vecteur perpendiculaire aux deux vecteurs originaux.</p>\n<h3 id=\"applications-en-robotique\" class=\"heading-3 text-xl font-bold mb-4\">Applications en Robotique</h3><p><strong>Calcul de couples :</strong>\nLe couple τ⃗ exercé par une force F⃗ à une distance r⃗ :</p>\n<pre><code>τ⃗ = r⃗ × F⃗\n</code></pre>\n<p><strong>Test de colinéarité :</strong>\nDeux vecteurs sont colinéaires si leur produit vectoriel est nul.</p>\n<h2 id=\"matrices-en-robotique\" class=\"heading-2 text-2xl font-bold mb-4\">Matrices en Robotique</h2><p>Les <strong>matrices</strong> sont omniprésentes en robotique pour représenter transformations, rotations et systèmes d&#39;équations.</p>\n<div class=\"callout callout-video bg-purple-50 border-l-4 border-purple-400 p-4 my-4 rounded-r-lg\"><p>📹 <strong>Vidéo recommandée</strong> : &quot;Applications pratiques des matrices&quot; (20min)</p>\n</div><h3 id=\"oprations-matricielles\" class=\"heading-3 text-xl font-bold mb-4\">Opérations Matricielles</h3><p><strong>Multiplication de matrices :</strong>\nPour multiplier A(m×n) et B(n×p), le résultat C(m×p) :</p>\n<pre><code>Cij = Σ(k=1 à n) Aik ⋅ Bkj\n</code></pre>\n<p><strong>Inversion de matrice :</strong>\nEssentielle pour la cinématique inverse :</p>\n<pre><code>A⁻¹ ⋅ A = I (matrice identité)\n</code></pre>\n<h3 id=\"matrice-jacobienne\" class=\"heading-3 text-xl font-bold mb-4\">Matrice Jacobienne</h3><p>La <strong>matrice jacobienne</strong> relie les vitesses articulaires aux vitesses cartésiennes :</p>\n<pre><code>v⃗ = J ⋅ q̇⃗\n</code></pre>\n<p>Où :</p>\n<ul>\n<li>v⃗ = vitesse cartésienne de l&#39;effecteur</li>\n<li>J = matrice jacobienne</li>\n<li>q̇⃗ = vitesses articulaires</li>\n</ul>\n<h3 id=\"dterminant-et-singularits\" class=\"heading-3 text-xl font-bold mb-4\">Déterminant et Singularités</h3><p>Le <strong>déterminant</strong> de la jacobienne indique les singularités :</p>\n<ul>\n<li>det(J) = 0 → Configuration singulière</li>\n<li>det(J) ≠ 0 → Configuration normale</li>\n</ul>\n<div class=\"callout callout-warning bg-yellow-50 border-l-4 border-yellow-400 p-4 my-4 rounded-r-lg\"><p>⚠️ <strong>IMPORTANT</strong> : Éviter les singularités en programmation de trajectoires</p>\n</div><h2 id=\"exercice-pratique-4-analyse-vectorielle\" class=\"heading-2 text-2xl font-bold mb-4\">Exercice Pratique 4 : Analyse Vectorielle</h2><p><strong>Objectif</strong> : Résoudre un problème d&#39;équilibre des forces</p>\n<p><strong>Contexte :</strong>\nUn robot manipule un objet de 5 kg. Trois forces s&#39;appliquent :</p>\n<ul>\n<li>F₁ = (10, 15, 0) N</li>\n<li>F₂ = (-5, 8, 12) N  </li>\n<li>F₃ = (?, ?, -20) N (force d&#39;équilibre à calculer)</li>\n</ul>\n<p><strong>Tâches :</strong></p>\n<ol>\n<li>Calculer F₃ pour l&#39;équilibre statique</li>\n<li>Déterminer l&#39;angle entre F₁ et F₂</li>\n<li>Calculer le moment résultant par rapport à l&#39;origine</li>\n</ol>\n<p><strong>Temps alloué</strong> : 20 minutes</p>\n<hr>\n",
      "components": [
        {
          "type": "VideoPlayer",
          "detected": true
        },
        {
          "type": "ExerciseBlock",
          "detected": true
        },
        {
          "type": "CalloutBox",
          "detected": true
        }
      ],
      "estimatedDuration": 40,
      "type": "content"
    },
    {
      "id": "-module-5-trigonomtrie-applique",
      "title": "\udccf Module 5 : Trigonométrie Appliquée",
      "titleWithEmoji": "📏 Module 5 : Trigonométrie Appliquée",
      "emoji": "\ud83d",
      "order": 5,
      "content": "## Fonctions Trigonométriques Essentielles\n\nLa **trigonométrie** est indispensable pour résoudre les problèmes de positionnement et d'orientation en robotique.\n\n### Relations Fondamentales\n\n**Triangle rectangle :**\n```\nsin(θ) = opposé / hypoténuse\ncos(θ) = adjacent / hypoténuse  \ntan(θ) = opposé / adjacent\n```\n\n**Identités utiles :**\n```\nsin²(θ) + cos²(θ) = 1\ntan(θ) = sin(θ) / cos(θ)\nsin(2θ) = 2⋅sin(θ)⋅cos(θ)\ncos(2θ) = cos²(θ) - sin²(θ)\n```\n\n### Loi des Cosinus\n\nPour un triangle quelconque avec côtés a, b, c et angle C opposé au côté c :\n```\nc² = a² + b² - 2⋅a⋅b⋅cos(C)\n```\n\nCette loi est cruciale pour la cinématique inverse.\n\n### Loi des Sinus\n\n```\na/sin(A) = b/sin(B) = c/sin(C)\n```\n\n## Applications Robotiques Spécifiques\n\n### Calcul d'Angles Articulaires\n\n**Problème type :** Robot SCARA avec deux liens\n- Lien 1 : longueur L₁\n- Lien 2 : longueur L₂\n- Position cible : (x, y)\n\n**Solution par loi des cosinus :**\n```\ncos(θ₂) = (x² + y² - L₁² - L₂²) / (2⋅L₁⋅L₂)\nθ₂ = ±arccos(cos(θ₂))\n```\n\n### Orientation d'Outils\n\n**Calcul de l'angle d'approche :**\nPour approcher perpendiculairement une surface inclinée d'angle α :\n```\nθ_outil = 90° - α\n```\n\n## Exercice Pratique 5 : Problème de Positionnement\n\n**Objectif** : Résoudre un problème de cinématique inverse complexe\n\n**Configuration :**\nRobot planaire à 3 degrés de liberté :\n- L₁ = 300mm (bras principal)\n- L₂ = 200mm (avant-bras)  \n- L₃ = 100mm (poignet)\n\n**Mission :**\nAtteindre le point (400, 300) avec orientation de l'effecteur à 45°\n\n**Instructions :**\n1. Utiliser la loi des cosinus pour θ₂\n2. Calculer θ₁ par trigonométrie\n3. Déterminer θ₃ pour l'orientation finale\n4. Vérifier par cinématique directe\n\n**Temps alloué** : 35 minutes\n\n---",
      "htmlContent": "<h2 id=\"fonctions-trigonomtriques-essentielles\" class=\"heading-2 text-2xl font-bold mb-4\">Fonctions Trigonométriques Essentielles</h2><p>La <strong>trigonométrie</strong> est indispensable pour résoudre les problèmes de positionnement et d&#39;orientation en robotique.</p>\n<h3 id=\"relations-fondamentales\" class=\"heading-3 text-xl font-bold mb-4\">Relations Fondamentales</h3><p><strong>Triangle rectangle :</strong></p>\n<pre><code>sin(θ) = opposé / hypoténuse\ncos(θ) = adjacent / hypoténuse  \ntan(θ) = opposé / adjacent\n</code></pre>\n<p><strong>Identités utiles :</strong></p>\n<pre><code>sin²(θ) + cos²(θ) = 1\ntan(θ) = sin(θ) / cos(θ)\nsin(2θ) = 2⋅sin(θ)⋅cos(θ)\ncos(2θ) = cos²(θ) - sin²(θ)\n</code></pre>\n<h3 id=\"loi-des-cosinus\" class=\"heading-3 text-xl font-bold mb-4\">Loi des Cosinus</h3><p>Pour un triangle quelconque avec côtés a, b, c et angle C opposé au côté c :</p>\n<pre><code>c² = a² + b² - 2⋅a⋅b⋅cos(C)\n</code></pre>\n<p>Cette loi est cruciale pour la cinématique inverse.</p>\n<h3 id=\"loi-des-sinus\" class=\"heading-3 text-xl font-bold mb-4\">Loi des Sinus</h3><pre><code>a/sin(A) = b/sin(B) = c/sin(C)\n</code></pre>\n<h2 id=\"applications-robotiques-spcifiques\" class=\"heading-2 text-2xl font-bold mb-4\">Applications Robotiques Spécifiques</h2><h3 id=\"calcul-d39angles-articulaires\" class=\"heading-3 text-xl font-bold mb-4\">Calcul d&#39;Angles Articulaires</h3><p><strong>Problème type :</strong> Robot SCARA avec deux liens</p>\n<ul>\n<li>Lien 1 : longueur L₁</li>\n<li>Lien 2 : longueur L₂</li>\n<li>Position cible : (x, y)</li>\n</ul>\n<p><strong>Solution par loi des cosinus :</strong></p>\n<pre><code>cos(θ₂) = (x² + y² - L₁² - L₂²) / (2⋅L₁⋅L₂)\nθ₂ = ±arccos(cos(θ₂))\n</code></pre>\n<h3 id=\"orientation-d39outils\" class=\"heading-3 text-xl font-bold mb-4\">Orientation d&#39;Outils</h3><p><strong>Calcul de l&#39;angle d&#39;approche :</strong>\nPour approcher perpendiculairement une surface inclinée d&#39;angle α :</p>\n<pre><code>θ_outil = 90° - α\n</code></pre>\n<h2 id=\"exercice-pratique-5-problme-de-positionnement\" class=\"heading-2 text-2xl font-bold mb-4\">Exercice Pratique 5 : Problème de Positionnement</h2><p><strong>Objectif</strong> : Résoudre un problème de cinématique inverse complexe</p>\n<p><strong>Configuration :</strong>\nRobot planaire à 3 degrés de liberté :</p>\n<ul>\n<li>L₁ = 300mm (bras principal)</li>\n<li>L₂ = 200mm (avant-bras)  </li>\n<li>L₃ = 100mm (poignet)</li>\n</ul>\n<p><strong>Mission :</strong>\nAtteindre le point (400, 300) avec orientation de l&#39;effecteur à 45°</p>\n<p><strong>Instructions :</strong></p>\n<ol>\n<li>Utiliser la loi des cosinus pour θ₂</li>\n<li>Calculer θ₁ par trigonométrie</li>\n<li>Déterminer θ₃ pour l&#39;orientation finale</li>\n<li>Vérifier par cinématique directe</li>\n</ol>\n<p><strong>Temps alloué</strong> : 35 minutes</p>\n<hr>\n",
      "components": [
        {
          "type": "ExerciseBlock",
          "detected": true
        }
      ],
      "estimatedDuration": 12,
      "type": "content"
    },
    {
      "id": "module-6-applications-pratiques-et-rsolution-de-problmes",
      "title": "Module 6 : Applications Pratiques et Résolution de Problèmes",
      "titleWithEmoji": "🎯 Module 6 : Applications Pratiques et Résolution de Problèmes",
      "emoji": "🎯",
      "order": 6,
      "content": "## Méthodologie de Résolution\n\nFace à un problème robotique complexe, suivre cette **approche structurée** :\n\n### Étape 1 : Analyse du Problème\n1. **Identifier** les contraintes géométriques\n2. **Définir** les systèmes de coordonnées\n3. **Lister** les inconnues et données\n4. **Choisir** les outils mathématiques appropriés\n\n### Étape 2 : Modélisation Mathématique\n1. **Établir** les équations de base\n2. **Simplifier** si possible\n3. **Vérifier** la cohérence dimensionnelle\n4. **Prévoir** les cas limites\n\n### Étape 3 : Résolution et Validation\n1. **Résoudre** étape par étape\n2. **Vérifier** les résultats par méthode alternative\n3. **Tester** avec des valeurs limites\n4. **Interpréter** physiquement les solutions\n\n## Cas d'Étude Complet : Robot de Soudage\n\n### Contexte\nUn robot de soudage 6 axes doit suivre une trajectoire circulaire de rayon 50mm, centrée en (200, 150, 100), dans le plan Z = 100mm.\n\n### Analyse Mathématique\n\n**Paramètrisation de la trajectoire :**\n```\nx(t) = 200 + 50⋅cos(ωt)\ny(t) = 150 + 50⋅sin(ωt)  \nz(t) = 100\n```\n\n**Vitesses requises :**\n```\nvx(t) = -50ω⋅sin(ωt)\nvy(t) = 50ω⋅cos(ωt)\nvz(t) = 0\n```\n\n**Accélérations :**\n```\nax(t) = -50ω²⋅cos(ωt)\nay(t) = -50ω²⋅sin(ωt)\naz(t) = 0\n```\n\n### Contraintes de Performance\n\n**Vitesse maximale :** 100 mm/s\n```\n|v|max = 50ω → ω ≤ 2 rad/s\n```\n\n**Accélération maximale :** 500 mm/s²\n```\n|a|max = 50ω² → ω ≤ √10 ≈ 3.16 rad/s\n```\n\nLa contrainte de vitesse est **limitante** : ω = 2 rad/s maximum.\n\n### Orientation de l'Outil\n\n**Vecteur tangent à la trajectoire :**\n```\nT⃗(t) = (-sin(ωt), cos(ωt), 0)\n```\n\n**Angle d'orientation :**\n```\nθ(t) = arctan(cos(ωt) / -sin(ωt)) = ωt - π/2\n```\n\n## Exercice Pratique Final : Projet Intégré\n\n**Objectif** : Intégrer tous les concepts mathématiques\n\n**Projet :** Conception d'une cellule robotique de palettisation\n\n**Spécifications :**\n- Robot 4 axes (SCARA + rotation + translation Z)\n- Zone de travail : 1000mm × 800mm\n- Hauteur : 0 à 500mm\n- Palettes : 1200mm × 800mm\n- Objets : cubes de 100mm × 100mm × 100mm\n\n**Livrables :**\n1. **Analyse géométrique** de l'espace de travail\n2. **Calcul des limites articulaires** requises\n3. **Programmation mathématique** d'un motif de palettisation\n4. **Optimisation de trajectoire** pour temps de cycle minimal\n5. **Validation** par simulation\n\n**Critères d'évaluation :**\n- Exactitude des calculs mathématiques (40%)\n- Méthodologie de résolution (30%)\n- Optimisation et efficacité (20%)\n- Présentation et clarté (10%)\n\n**Temps alloué** : 90 minutes\n\n> 💡 **ASTUCE** : Utilisez les outils en ligne pour vérifier vos calculs matriciels et trigonométriques complexes.\n\n---\n\n## 📋 Récapitulatif et Points Clés\n\n### Concepts Maîtrisés ✅\n\n1. **Systèmes de coordonnées** : Cartésien, cylindrique, sphérique\n2. **Transformations géométriques** : Translation, rotation, matrices homogènes  \n3. **Cinématique** : Directe, inverse, trajectoires\n4. **Algèbre vectorielle** : Produits scalaire et vectoriel, applications\n5. **Matrices** : Multiplication, inversion, jacobienne\n6. **Trigonométrie** : Fonctions, identités, lois des cosinus/sinus\n\n### Formules Essentielles 📐\n\n**Transformation homogène :**\n```\n[R  t]   [p]   [Rp + t]\n[0  1] ⋅ [1] = [  1   ]\n```\n\n**Cinématique directe 2D :**\n```\nx = L₁cos(θ₁) + L₂cos(θ₁+θ₂)\ny = L₁sin(θ₁) + L₂sin(θ₁+θ₂)\n```\n\n**Vitesse en coordonnées polaires :**\n```\nvr = ṙ\nvθ = rθ̇\n```\n\n### Applications Industrielles 🏭\n\n- **Programmation de trajectoires** optimisées\n- **Calibrage et étalonnage** de robots\n- **Diagnostic de singularités** et limitations\n- **Calcul de forces et couples** requis\n- **Optimisation de cycles** de production\n\n### Ressources pour Approfondir 📚\n\n- Formulaires mathématiques spécialisés robotique\n- Simulateurs de cinématique en ligne\n- Logiciels de calcul matriciel (MATLAB, Octave)\n- Standards industriels de programmation robot\n\n---\n\n*Cette formation vous donne les bases mathématiques solides nécessaires pour exceller comme technicien en robotique. Continuez à pratiquer ces concepts dans vos applications quotidiennes !*",
      "htmlContent": "<h2 id=\"mthodologie-de-rsolution\" class=\"heading-2 text-2xl font-bold mb-4\">Méthodologie de Résolution</h2><p>Face à un problème robotique complexe, suivre cette <strong>approche structurée</strong> :</p>\n<h3 id=\"tape-1-analyse-du-problme\" class=\"heading-3 text-xl font-bold mb-4\">Étape 1 : Analyse du Problème</h3><ol>\n<li><strong>Identifier</strong> les contraintes géométriques</li>\n<li><strong>Définir</strong> les systèmes de coordonnées</li>\n<li><strong>Lister</strong> les inconnues et données</li>\n<li><strong>Choisir</strong> les outils mathématiques appropriés</li>\n</ol>\n<h3 id=\"tape-2-modlisation-mathmatique\" class=\"heading-3 text-xl font-bold mb-4\">Étape 2 : Modélisation Mathématique</h3><ol>\n<li><strong>Établir</strong> les équations de base</li>\n<li><strong>Simplifier</strong> si possible</li>\n<li><strong>Vérifier</strong> la cohérence dimensionnelle</li>\n<li><strong>Prévoir</strong> les cas limites</li>\n</ol>\n<h3 id=\"tape-3-rsolution-et-validation\" class=\"heading-3 text-xl font-bold mb-4\">Étape 3 : Résolution et Validation</h3><ol>\n<li><strong>Résoudre</strong> étape par étape</li>\n<li><strong>Vérifier</strong> les résultats par méthode alternative</li>\n<li><strong>Tester</strong> avec des valeurs limites</li>\n<li><strong>Interpréter</strong> physiquement les solutions</li>\n</ol>\n<h2 id=\"cas-d39tude-complet-robot-de-soudage\" class=\"heading-2 text-2xl font-bold mb-4\">Cas d&#39;Étude Complet : Robot de Soudage</h2><h3 id=\"contexte\" class=\"heading-3 text-xl font-bold mb-4\">Contexte</h3><p>Un robot de soudage 6 axes doit suivre une trajectoire circulaire de rayon 50mm, centrée en (200, 150, 100), dans le plan Z = 100mm.</p>\n<h3 id=\"analyse-mathmatique\" class=\"heading-3 text-xl font-bold mb-4\">Analyse Mathématique</h3><p><strong>Paramètrisation de la trajectoire :</strong></p>\n<pre><code>x(t) = 200 + 50⋅cos(ωt)\ny(t) = 150 + 50⋅sin(ωt)  \nz(t) = 100\n</code></pre>\n<p><strong>Vitesses requises :</strong></p>\n<pre><code>vx(t) = -50ω⋅sin(ωt)\nvy(t) = 50ω⋅cos(ωt)\nvz(t) = 0\n</code></pre>\n<p><strong>Accélérations :</strong></p>\n<pre><code>ax(t) = -50ω²⋅cos(ωt)\nay(t) = -50ω²⋅sin(ωt)\naz(t) = 0\n</code></pre>\n<h3 id=\"contraintes-de-performance\" class=\"heading-3 text-xl font-bold mb-4\">Contraintes de Performance</h3><p><strong>Vitesse maximale :</strong> 100 mm/s</p>\n<pre><code>|v|max = 50ω → ω ≤ 2 rad/s\n</code></pre>\n<p><strong>Accélération maximale :</strong> 500 mm/s²</p>\n<pre><code>|a|max = 50ω² → ω ≤ √10 ≈ 3.16 rad/s\n</code></pre>\n<p>La contrainte de vitesse est <strong>limitante</strong> : ω = 2 rad/s maximum.</p>\n<h3 id=\"orientation-de-l39outil\" class=\"heading-3 text-xl font-bold mb-4\">Orientation de l&#39;Outil</h3><p><strong>Vecteur tangent à la trajectoire :</strong></p>\n<pre><code>T⃗(t) = (-sin(ωt), cos(ωt), 0)\n</code></pre>\n<p><strong>Angle d&#39;orientation :</strong></p>\n<pre><code>θ(t) = arctan(cos(ωt) / -sin(ωt)) = ωt - π/2\n</code></pre>\n<h2 id=\"exercice-pratique-final-projet-intgr\" class=\"heading-2 text-2xl font-bold mb-4\">Exercice Pratique Final : Projet Intégré</h2><p><strong>Objectif</strong> : Intégrer tous les concepts mathématiques</p>\n<p><strong>Projet :</strong> Conception d&#39;une cellule robotique de palettisation</p>\n<p><strong>Spécifications :</strong></p>\n<ul>\n<li>Robot 4 axes (SCARA + rotation + translation Z)</li>\n<li>Zone de travail : 1000mm × 800mm</li>\n<li>Hauteur : 0 à 500mm</li>\n<li>Palettes : 1200mm × 800mm</li>\n<li>Objets : cubes de 100mm × 100mm × 100mm</li>\n</ul>\n<p><strong>Livrables :</strong></p>\n<ol>\n<li><strong>Analyse géométrique</strong> de l&#39;espace de travail</li>\n<li><strong>Calcul des limites articulaires</strong> requises</li>\n<li><strong>Programmation mathématique</strong> d&#39;un motif de palettisation</li>\n<li><strong>Optimisation de trajectoire</strong> pour temps de cycle minimal</li>\n<li><strong>Validation</strong> par simulation</li>\n</ol>\n<p><strong>Critères d&#39;évaluation :</strong></p>\n<ul>\n<li>Exactitude des calculs mathématiques (40%)</li>\n<li>Méthodologie de résolution (30%)</li>\n<li>Optimisation et efficacité (20%)</li>\n<li>Présentation et clarté (10%)</li>\n</ul>\n<p><strong>Temps alloué</strong> : 90 minutes</p>\n<div class=\"callout callout-tip bg-blue-50 border-l-4 border-blue-400 p-4 my-4 rounded-r-lg\"><p>💡 <strong>ASTUCE</strong> : Utilisez les outils en ligne pour vérifier vos calculs matriciels et trigonométriques complexes.</p>\n</div><hr>\n<h2 id=\"-rcapitulatif-et-points-cls\" class=\"heading-2 text-2xl font-bold mb-4\">📋 Récapitulatif et Points Clés</h2><h3 id=\"concepts-matriss-\" class=\"heading-3 text-xl font-bold mb-4\">Concepts Maîtrisés ✅</h3><ol>\n<li><strong>Systèmes de coordonnées</strong> : Cartésien, cylindrique, sphérique</li>\n<li><strong>Transformations géométriques</strong> : Translation, rotation, matrices homogènes  </li>\n<li><strong>Cinématique</strong> : Directe, inverse, trajectoires</li>\n<li><strong>Algèbre vectorielle</strong> : Produits scalaire et vectoriel, applications</li>\n<li><strong>Matrices</strong> : Multiplication, inversion, jacobienne</li>\n<li><strong>Trigonométrie</strong> : Fonctions, identités, lois des cosinus/sinus</li>\n</ol>\n<h3 id=\"formules-essentielles-\" class=\"heading-3 text-xl font-bold mb-4\">Formules Essentielles 📐</h3><p><strong>Transformation homogène :</strong></p>\n<pre><code>[R  t]   [p]   [Rp + t]\n[0  1] ⋅ [1] = [  1   ]\n</code></pre>\n<p><strong>Cinématique directe 2D :</strong></p>\n<pre><code>x = L₁cos(θ₁) + L₂cos(θ₁+θ₂)\ny = L₁sin(θ₁) + L₂sin(θ₁+θ₂)\n</code></pre>\n<p><strong>Vitesse en coordonnées polaires :</strong></p>\n<pre><code>vr = ṙ\nvθ = rθ̇\n</code></pre>\n<h3 id=\"applications-industrielles-\" class=\"heading-3 text-xl font-bold mb-4\">Applications Industrielles 🏭</h3><ul>\n<li><strong>Programmation de trajectoires</strong> optimisées</li>\n<li><strong>Calibrage et étalonnage</strong> de robots</li>\n<li><strong>Diagnostic de singularités</strong> et limitations</li>\n<li><strong>Calcul de forces et couples</strong> requis</li>\n<li><strong>Optimisation de cycles</strong> de production</li>\n</ul>\n<h3 id=\"ressources-pour-approfondir-\" class=\"heading-3 text-xl font-bold mb-4\">Ressources pour Approfondir 📚</h3><ul>\n<li>Formulaires mathématiques spécialisés robotique</li>\n<li>Simulateurs de cinématique en ligne</li>\n<li>Logiciels de calcul matriciel (MATLAB, Octave)</li>\n<li>Standards industriels de programmation robot</li>\n</ul>\n<hr>\n<p><em>Cette formation vous donne les bases mathématiques solides nécessaires pour exceller comme technicien en robotique. Continuez à pratiquer ces concepts dans vos applications quotidiennes !</em></p>\n",
      "components": [
        {
          "type": "ExerciseBlock",
          "detected": true
        },
        {
          "type": "CalloutBox",
          "detected": true
        }
      ],
      "estimatedDuration": 24,
      "type": "practice"
    }
  ],
  "moduleCount": 6,
  "estimatedTotalDuration": 178,
  "tableOfContents": [
    {
      "id": "-module-1-systmes-de-coordonnes-et-repres",
      "title": "\udcd0 Module 1 : Systèmes de Coordonnées et Repères",
      "emoji": "\ud83d",
      "order": 1,
      "duration": 28,
      "type": "content",
      "components": [
        "VideoPlayer",
        "ExerciseBlock"
      ]
    },
    {
      "id": "-module-2-transformations-gomtriques",
      "title": "\udd04 Module 2 : Transformations Géométriques",
      "emoji": "\ud83d",
      "order": 2,
      "duration": 39,
      "type": "content",
      "components": [
        "VideoPlayer",
        "ExerciseBlock",
        "CalloutBox"
      ]
    },
    {
      "id": "-module-3-cinmatique-et-dynamique",
      "title": "\udfc3 Module 3 : Cinématique et Dynamique",
      "emoji": "\ud83c",
      "order": 3,
      "duration": 35,
      "type": "content",
      "components": [
        "VideoPlayer",
        "ExerciseBlock",
        "CalloutBox"
      ]
    },
    {
      "id": "-module-4-algbre-vectorielle-et-matricielle",
      "title": "\uddee Module 4 : Algèbre Vectorielle et Matricielle",
      "emoji": "\ud83e",
      "order": 4,
      "duration": 40,
      "type": "content",
      "components": [
        "VideoPlayer",
        "ExerciseBlock",
        "CalloutBox"
      ]
    },
    {
      "id": "-module-5-trigonomtrie-applique",
      "title": "\udccf Module 5 : Trigonométrie Appliquée",
      "emoji": "\ud83d",
      "order": 5,
      "duration": 12,
      "type": "content",
      "components": [
        "ExerciseBlock"
      ]
    },
    {
      "id": "module-6-applications-pratiques-et-rsolution-de-problmes",
      "title": "Module 6 : Applications Pratiques et Résolution de Problèmes",
      "emoji": "🎯",
      "order": 6,
      "duration": 24,
      "type": "practice",
      "components": [
        "ExerciseBlock",
        "CalloutBox"
      ]
    }
  ],
  "searchableContent": "mathématiques pour techniciens en robotique \udcd0 module 1 : systèmes de coordonnées et repères \udd04 module 2 : transformations géométriques \udfc3 module 3 : cinématique et dynamique \uddee module 4 : algèbre vectorielle et matricielle \udccf module 5 : trigonométrie appliquée module 6 : applications pratiques et résolution de problèmes maîtriser les systèmes de coordonnées et transformations géométriques en robotique calculer les vitesses et accélérations dans les mouvements robotiques appliquer la trigonométrie pour résoudre des problèmes de positionnement utiliser l'algèbre vectorielle pour analyser les forces et déplacements comprendre les matrices de transformation homogène résoudre des problèmes de cinématique directe et inverse mathématiques de niveau collégial notions de base en physique mécanique expérience pratique avec des systèmes robotiques capacité à utiliser une calculatrice scientifique",
  "qualityScore": 100,
  "rawContent": "\n# 📐 Module 1 : Systèmes de Coordonnées et Repères\n\n## Introduction aux Systèmes de Coordonnées\n\nEn robotique, la **localisation précise** des objets et des outils est fondamentale. Un technicien doit maîtriser les différents systèmes de coordonnées pour comprendre et programmer les mouvements robotiques.\n\n### Système de Coordonnées Cartésiennes\n\nLe système cartésien utilise trois axes perpendiculaires : **X, Y, et Z**.\n\n**Caractéristiques principales :**\n- **Axe X** : Généralement horizontal, vers la droite\n- **Axe Y** : Généralement horizontal, vers l'avant  \n- **Axe Z** : Généralement vertical, vers le haut\n- **Origine (0,0,0)** : Point de référence du système\n\n> 📹 **Vidéo recommandée** : \"Introduction aux coordonnées cartésiennes en robotique\" (12min)\n\n### Conventions Robotiques Standards\n\n**Convention main droite :**\n1. Pointez le pouce dans la direction X positive\n2. L'index indique Y positive\n3. Le majeur indique Z positive\n\nCette convention assure la cohérence entre tous les systèmes robotiques.\n\n### Système de Coordonnées Cylindriques\n\nParticulièrement utile pour les robots à configuration cylindrique.\n\n**Paramètres :**\n- **ρ (rho)** : Distance radiale depuis l'axe Z\n- **φ (phi)** : Angle autour de l'axe Z\n- **z** : Hauteur le long de l'axe Z\n\n**Conversion cartésien → cylindrique :**\n- ρ = √(x² + y²)\n- φ = arctan(y/x)\n- z = z\n\n### Système de Coordonnées Sphériques\n\nIdéal pour les robots à poignet sphérique.\n\n**Paramètres :**\n- **r** : Distance depuis l'origine\n- **θ (theta)** : Angle d'élévation depuis le plan XY\n- **φ (phi)** : Angle azimutal dans le plan XY\n\n**Conversion cartésien → sphérique :**\n- r = √(x² + y² + z²)\n- θ = arccos(z/r)\n- φ = arctan(y/x)\n\n## Exercice Pratique 1 : Conversion de Coordonnées\n\n**Objectif** : Maîtriser les conversions entre systèmes de coordonnées\n\n**Problème :**\nUn robot doit atteindre un point situé à :\n- Coordonnées cartésiennes : (150mm, 200mm, 300mm)\n\n**Tâches :**\n1. Convertir en coordonnées cylindriques\n2. Convertir en coordonnées sphériques\n3. Vérifier vos calculs avec le simulateur en ligne\n\n**Solution :**\n\n*Coordonnées cylindriques :*\n- ρ = √(150² + 200²) = √(22500 + 40000) = 250mm\n- φ = arctan(200/150) = 53.13°\n- z = 300mm\n\n*Coordonnées sphériques :*\n- r = √(150² + 200² + 300²) = √112500 = 335.4mm\n- θ = arccos(300/335.4) = 26.57°\n- φ = arctan(200/150) = 53.13°\n\n**Temps alloué** : 20 minutes\n\n---\n\n# 🔄 Module 2 : Transformations Géométriques\n\n## Translations et Rotations\n\nLes **transformations géométriques** permettent de décrire le mouvement d'un objet dans l'espace. C'est la base de toute programmation robotique.\n\n### Translation\n\nUne translation déplace un point sans changer son orientation.\n\n**Formule de translation :**\n```\nx' = x + dx\ny' = y + dy  \nz' = z + dz\n```\n\nOù (dx, dy, dz) est le vecteur de translation.\n\n### Rotation autour d'un Axe\n\n**Rotation autour de l'axe Z (dans le plan XY) :**\n```\nx' = x⋅cos(θ) - y⋅sin(θ)\ny' = x⋅sin(θ) + y⋅cos(θ)\nz' = z\n```\n\n**Rotation autour de l'axe X :**\n```\nx' = x\ny' = y⋅cos(θ) - z⋅sin(θ)\nz' = y⋅sin(θ) + z⋅cos(θ)\n```\n\n**Rotation autour de l'axe Y :**\n```\nx' = x⋅cos(θ) + z⋅sin(θ)\ny' = y\nz' = -x⋅sin(θ) + z⋅cos(θ)\n```\n\n> 📹 **Vidéo recommandée** : \"Démonstration des transformations géométriques\" (18min)\n\n### Angles d'Euler\n\nLes **angles d'Euler** décrivent l'orientation d'un objet avec trois rotations successives :\n\n1. **Roulis (Roll)** : Rotation autour de l'axe X\n2. **Tangage (Pitch)** : Rotation autour de l'axe Y  \n3. **Lacet (Yaw)** : Rotation autour de l'axe Z\n\n> ⚠️ **IMPORTANT** : L'ordre des rotations affecte le résultat final !\n\n## Matrices de Transformation Homogène\n\nLes **matrices 4×4** permettent de combiner translation et rotation en une seule opération.\n\n**Structure générale :**\n```\n[R₁₁ R₁₂ R₁₃ tx]\n[R₂₁ R₂₂ R₂₃ ty]\n[R₃₁ R₃₂ R₃₃ tz]\n[0   0   0   1 ]\n```\n\nOù :\n- **R** = Matrice de rotation 3×3\n- **t** = Vecteur de translation (tx, ty, tz)\n\n### Exemple Concret\n\n**Matrice de translation pure :**\n```\n[1  0  0  50 ]    # Translation de 50mm en X\n[0  1  0  30 ]    # Translation de 30mm en Y\n[0  0  1  100]    # Translation de 100mm en Z\n[0  0  0  1  ]\n```\n\n**Matrice de rotation de 90° autour de Z :**\n```\n[0  -1  0  0]     # cos(90°) = 0, sin(90°) = 1\n[1   0  0  0]\n[0   0  1  0]\n[0   0  0  1]\n```\n\n## Exercice Pratique 2 : Transformations Successives\n\n**Objectif** : Appliquer plusieurs transformations géométriques\n\n**Contexte :**\nUn bras robotique doit :\n1. Tourner de 45° autour de l'axe Z\n2. Se déplacer de 100mm en X\n3. Tourner de 30° autour de l'axe Y\n\n**Instructions :**\n1. Calculer la matrice de chaque transformation\n2. Multiplier les matrices dans l'ordre correct\n3. Appliquer le résultat au point (50, 0, 0)\n\n**Temps alloué** : 30 minutes\n\n---\n\n# 🏃 Module 3 : Cinématique et Dynamique\n\n## Cinématique : Étude du Mouvement\n\nLa **cinématique** analyse le mouvement sans considérer les forces qui le causent. Elle est essentielle pour programmer des trajectoires fluides.\n\n### Position, Vitesse et Accélération\n\n**Relations fondamentales :**\n- **Vitesse** = dérivée de la position : v = dp/dt\n- **Accélération** = dérivée de la vitesse : a = dv/dt = d²p/dt²\n\n### Mouvement Rectiligne\n\n**Équations du mouvement uniforme :**\n```\nPosition : x(t) = x₀ + v₀⋅t\nVitesse : v(t) = v₀ (constante)\n```\n\n**Équations du mouvement uniformément accéléré :**\n```\nPosition : x(t) = x₀ + v₀⋅t + ½⋅a⋅t²\nVitesse : v(t) = v₀ + a⋅t\n```\n\n> 📹 **Vidéo recommandée** : \"Calculs de vitesse et trajectoires\" (15min)\n\n### Mouvement Circulaire\n\n**Pour un mouvement circulaire uniforme :**\n- **Vitesse angulaire** : ω = θ/t (rad/s)\n- **Vitesse linéaire** : v = ω⋅r\n- **Accélération centripète** : a = v²/r = ω²⋅r\n\n### Cinématique Directe\n\nLa **cinématique directe** calcule la position de l'effecteur à partir des angles articulaires.\n\n**Pour un bras robotique 2D simple :**\n```\nx = L₁⋅cos(θ₁) + L₂⋅cos(θ₁ + θ₂)\ny = L₁⋅sin(θ₁) + L₂⋅sin(θ₁ + θ₂)\n```\n\nOù :\n- L₁, L₂ = longueurs des segments\n- θ₁, θ₂ = angles articulaires\n\n### Cinématique Inverse\n\nLa **cinématique inverse** détermine les angles articulaires pour atteindre une position donnée.\n\n**Pour le même bras 2D :**\n```\nθ₂ = ±arccos((x² + y² - L₁² - L₂²)/(2⋅L₁⋅L₂))\nθ₁ = arctan(y/x) - arctan((L₂⋅sin(θ₂))/(L₁ + L₂⋅cos(θ₂)))\n```\n\n> ⚠️ **ATTENTION** : Plusieurs solutions peuvent exister (coude en haut/en bas)\n\n## Exercice Pratique 3 : Calcul de Trajectoire\n\n**Objectif** : Calculer une trajectoire point à point\n\n**Problème :**\nUn robot doit se déplacer du point A(100, 50) au point B(200, 150) en 2 secondes avec :\n- Accélération de 0.5 sec\n- Vitesse constante de 1 sec  \n- Décélération de 0.5 sec\n\n**Tâches :**\n1. Calculer la distance totale\n2. Déterminer les vitesses maximales\n3. Établir les équations de mouvement pour chaque phase\n4. Vérifier la continuité de la vitesse\n\n**Temps alloué** : 25 minutes\n\n---\n\n# 🧮 Module 4 : Algèbre Vectorielle et Matricielle\n\n## Vecteurs en Robotique\n\nLes **vecteurs** représentent des grandeurs ayant une magnitude et une direction : forces, vitesses, positions relatives.\n\n### Opérations Vectorielles Fondamentales\n\n**Addition de vecteurs :**\n```\nA⃗ + B⃗ = (Ax + Bx, Ay + By, Az + Bz)\n```\n\n**Produit scalaire :**\n```\nA⃗ ⋅ B⃗ = Ax⋅Bx + Ay⋅By + Az⋅Bz = |A⃗|⋅|B⃗|⋅cos(θ)\n```\n\n**Produit vectoriel :**\n```\nA⃗ × B⃗ = (Ay⋅Bz - Az⋅By, Az⋅Bx - Ax⋅Bz, Ax⋅By - Ay⋅Bx)\n```\n\nLe produit vectoriel donne un vecteur perpendiculaire aux deux vecteurs originaux.\n\n### Applications en Robotique\n\n**Calcul de couples :**\nLe couple τ⃗ exercé par une force F⃗ à une distance r⃗ :\n```\nτ⃗ = r⃗ × F⃗\n```\n\n**Test de colinéarité :**\nDeux vecteurs sont colinéaires si leur produit vectoriel est nul.\n\n## Matrices en Robotique\n\nLes **matrices** sont omniprésentes en robotique pour représenter transformations, rotations et systèmes d'équations.\n\n> 📹 **Vidéo recommandée** : \"Applications pratiques des matrices\" (20min)\n\n### Opérations Matricielles\n\n**Multiplication de matrices :**\nPour multiplier A(m×n) et B(n×p), le résultat C(m×p) :\n```\nCij = Σ(k=1 à n) Aik ⋅ Bkj\n```\n\n**Inversion de matrice :**\nEssentielle pour la cinématique inverse :\n```\nA⁻¹ ⋅ A = I (matrice identité)\n```\n\n### Matrice Jacobienne\n\nLa **matrice jacobienne** relie les vitesses articulaires aux vitesses cartésiennes :\n\n```\nv⃗ = J ⋅ q̇⃗\n```\n\nOù :\n- v⃗ = vitesse cartésienne de l'effecteur\n- J = matrice jacobienne\n- q̇⃗ = vitesses articulaires\n\n### Déterminant et Singularités\n\nLe **déterminant** de la jacobienne indique les singularités :\n- det(J) = 0 → Configuration singulière\n- det(J) ≠ 0 → Configuration normale\n\n> ⚠️ **IMPORTANT** : Éviter les singularités en programmation de trajectoires\n\n## Exercice Pratique 4 : Analyse Vectorielle\n\n**Objectif** : Résoudre un problème d'équilibre des forces\n\n**Contexte :**\nUn robot manipule un objet de 5 kg. Trois forces s'appliquent :\n- F₁ = (10, 15, 0) N\n- F₂ = (-5, 8, 12) N  \n- F₃ = (?, ?, -20) N (force d'équilibre à calculer)\n\n**Tâches :**\n1. Calculer F₃ pour l'équilibre statique\n2. Déterminer l'angle entre F₁ et F₂\n3. Calculer le moment résultant par rapport à l'origine\n\n**Temps alloué** : 20 minutes\n\n---\n\n# 📏 Module 5 : Trigonométrie Appliquée\n\n## Fonctions Trigonométriques Essentielles\n\nLa **trigonométrie** est indispensable pour résoudre les problèmes de positionnement et d'orientation en robotique.\n\n### Relations Fondamentales\n\n**Triangle rectangle :**\n```\nsin(θ) = opposé / hypoténuse\ncos(θ) = adjacent / hypoténuse  \ntan(θ) = opposé / adjacent\n```\n\n**Identités utiles :**\n```\nsin²(θ) + cos²(θ) = 1\ntan(θ) = sin(θ) / cos(θ)\nsin(2θ) = 2⋅sin(θ)⋅cos(θ)\ncos(2θ) = cos²(θ) - sin²(θ)\n```\n\n### Loi des Cosinus\n\nPour un triangle quelconque avec côtés a, b, c et angle C opposé au côté c :\n```\nc² = a² + b² - 2⋅a⋅b⋅cos(C)\n```\n\nCette loi est cruciale pour la cinématique inverse.\n\n### Loi des Sinus\n\n```\na/sin(A) = b/sin(B) = c/sin(C)\n```\n\n## Applications Robotiques Spécifiques\n\n### Calcul d'Angles Articulaires\n\n**Problème type :** Robot SCARA avec deux liens\n- Lien 1 : longueur L₁\n- Lien 2 : longueur L₂\n- Position cible : (x, y)\n\n**Solution par loi des cosinus :**\n```\ncos(θ₂) = (x² + y² - L₁² - L₂²) / (2⋅L₁⋅L₂)\nθ₂ = ±arccos(cos(θ₂))\n```\n\n### Orientation d'Outils\n\n**Calcul de l'angle d'approche :**\nPour approcher perpendiculairement une surface inclinée d'angle α :\n```\nθ_outil = 90° - α\n```\n\n## Exercice Pratique 5 : Problème de Positionnement\n\n**Objectif** : Résoudre un problème de cinématique inverse complexe\n\n**Configuration :**\nRobot planaire à 3 degrés de liberté :\n- L₁ = 300mm (bras principal)\n- L₂ = 200mm (avant-bras)  \n- L₃ = 100mm (poignet)\n\n**Mission :**\nAtteindre le point (400, 300) avec orientation de l'effecteur à 45°\n\n**Instructions :**\n1. Utiliser la loi des cosinus pour θ₂\n2. Calculer θ₁ par trigonométrie\n3. Déterminer θ₃ pour l'orientation finale\n4. Vérifier par cinématique directe\n\n**Temps alloué** : 35 minutes\n\n---\n\n# 🎯 Module 6 : Applications Pratiques et Résolution de Problèmes\n\n## Méthodologie de Résolution\n\nFace à un problème robotique complexe, suivre cette **approche structurée** :\n\n### Étape 1 : Analyse du Problème\n1. **Identifier** les contraintes géométriques\n2. **Définir** les systèmes de coordonnées\n3. **Lister** les inconnues et données\n4. **Choisir** les outils mathématiques appropriés\n\n### Étape 2 : Modélisation Mathématique\n1. **Établir** les équations de base\n2. **Simplifier** si possible\n3. **Vérifier** la cohérence dimensionnelle\n4. **Prévoir** les cas limites\n\n### Étape 3 : Résolution et Validation\n1. **Résoudre** étape par étape\n2. **Vérifier** les résultats par méthode alternative\n3. **Tester** avec des valeurs limites\n4. **Interpréter** physiquement les solutions\n\n## Cas d'Étude Complet : Robot de Soudage\n\n### Contexte\nUn robot de soudage 6 axes doit suivre une trajectoire circulaire de rayon 50mm, centrée en (200, 150, 100), dans le plan Z = 100mm.\n\n### Analyse Mathématique\n\n**Paramètrisation de la trajectoire :**\n```\nx(t) = 200 + 50⋅cos(ωt)\ny(t) = 150 + 50⋅sin(ωt)  \nz(t) = 100\n```\n\n**Vitesses requises :**\n```\nvx(t) = -50ω⋅sin(ωt)\nvy(t) = 50ω⋅cos(ωt)\nvz(t) = 0\n```\n\n**Accélérations :**\n```\nax(t) = -50ω²⋅cos(ωt)\nay(t) = -50ω²⋅sin(ωt)\naz(t) = 0\n```\n\n### Contraintes de Performance\n\n**Vitesse maximale :** 100 mm/s\n```\n|v|max = 50ω → ω ≤ 2 rad/s\n```\n\n**Accélération maximale :** 500 mm/s²\n```\n|a|max = 50ω² → ω ≤ √10 ≈ 3.16 rad/s\n```\n\nLa contrainte de vitesse est **limitante** : ω = 2 rad/s maximum.\n\n### Orientation de l'Outil\n\n**Vecteur tangent à la trajectoire :**\n```\nT⃗(t) = (-sin(ωt), cos(ωt), 0)\n```\n\n**Angle d'orientation :**\n```\nθ(t) = arctan(cos(ωt) / -sin(ωt)) = ωt - π/2\n```\n\n## Exercice Pratique Final : Projet Intégré\n\n**Objectif** : Intégrer tous les concepts mathématiques\n\n**Projet :** Conception d'une cellule robotique de palettisation\n\n**Spécifications :**\n- Robot 4 axes (SCARA + rotation + translation Z)\n- Zone de travail : 1000mm × 800mm\n- Hauteur : 0 à 500mm\n- Palettes : 1200mm × 800mm\n- Objets : cubes de 100mm × 100mm × 100mm\n\n**Livrables :**\n1. **Analyse géométrique** de l'espace de travail\n2. **Calcul des limites articulaires** requises\n3. **Programmation mathématique** d'un motif de palettisation\n4. **Optimisation de trajectoire** pour temps de cycle minimal\n5. **Validation** par simulation\n\n**Critères d'évaluation :**\n- Exactitude des calculs mathématiques (40%)\n- Méthodologie de résolution (30%)\n- Optimisation et efficacité (20%)\n- Présentation et clarté (10%)\n\n**Temps alloué** : 90 minutes\n\n> 💡 **ASTUCE** : Utilisez les outils en ligne pour vérifier vos calculs matriciels et trigonométriques complexes.\n\n---\n\n## 📋 Récapitulatif et Points Clés\n\n### Concepts Maîtrisés ✅\n\n1. **Systèmes de coordonnées** : Cartésien, cylindrique, sphérique\n2. **Transformations géométriques** : Translation, rotation, matrices homogènes  \n3. **Cinématique** : Directe, inverse, trajectoires\n4. **Algèbre vectorielle** : Produits scalaire et vectoriel, applications\n5. **Matrices** : Multiplication, inversion, jacobienne\n6. **Trigonométrie** : Fonctions, identités, lois des cosinus/sinus\n\n### Formules Essentielles 📐\n\n**Transformation homogène :**\n```\n[R  t]   [p]   [Rp + t]\n[0  1] ⋅ [1] = [  1   ]\n```\n\n**Cinématique directe 2D :**\n```\nx = L₁cos(θ₁) + L₂cos(θ₁+θ₂)\ny = L₁sin(θ₁) + L₂sin(θ₁+θ₂)\n```\n\n**Vitesse en coordonnées polaires :**\n```\nvr = ṙ\nvθ = rθ̇\n```\n\n### Applications Industrielles 🏭\n\n- **Programmation de trajectoires** optimisées\n- **Calibrage et étalonnage** de robots\n- **Diagnostic de singularités** et limitations\n- **Calcul de forces et couples** requis\n- **Optimisation de cycles** de production\n\n### Ressources pour Approfondir 📚\n\n- Formulaires mathématiques spécialisés robotique\n- Simulateurs de cinématique en ligne\n- Logiciels de calcul matriciel (MATLAB, Octave)\n- Standards industriels de programmation robot\n\n---\n\n*Cette formation vous donne les bases mathématiques solides nécessaires pour exceller comme technicien en robotique. Continuez à pratiquer ces concepts dans vos applications quotidiennes !*",
  "htmlContent": "<h1 id=\"-module-1-systmes-de-coordonnes-et-repres\" class=\"heading-1 text-3xl font-bold mb-4\">📐 Module 1 : Systèmes de Coordonnées et Repères</h1><h2 id=\"introduction-aux-systmes-de-coordonnes\" class=\"heading-2 text-2xl font-bold mb-4\">Introduction aux Systèmes de Coordonnées</h2><p>En robotique, la <strong>localisation précise</strong> des objets et des outils est fondamentale. Un technicien doit maîtriser les différents systèmes de coordonnées pour comprendre et programmer les mouvements robotiques.</p>\n<h3 id=\"systme-de-coordonnes-cartsiennes\" class=\"heading-3 text-xl font-bold mb-4\">Système de Coordonnées Cartésiennes</h3><p>Le système cartésien utilise trois axes perpendiculaires : <strong>X, Y, et Z</strong>.</p>\n<p><strong>Caractéristiques principales :</strong></p>\n<ul>\n<li><strong>Axe X</strong> : Généralement horizontal, vers la droite</li>\n<li><strong>Axe Y</strong> : Généralement horizontal, vers l&#39;avant  </li>\n<li><strong>Axe Z</strong> : Généralement vertical, vers le haut</li>\n<li><strong>Origine (0,0,0)</strong> : Point de référence du système</li>\n</ul>\n<div class=\"callout callout-video bg-purple-50 border-l-4 border-purple-400 p-4 my-4 rounded-r-lg\"><p>📹 <strong>Vidéo recommandée</strong> : &quot;Introduction aux coordonnées cartésiennes en robotique&quot; (12min)</p>\n</div><h3 id=\"conventions-robotiques-standards\" class=\"heading-3 text-xl font-bold mb-4\">Conventions Robotiques Standards</h3><p><strong>Convention main droite :</strong></p>\n<ol>\n<li>Pointez le pouce dans la direction X positive</li>\n<li>L&#39;index indique Y positive</li>\n<li>Le majeur indique Z positive</li>\n</ol>\n<p>Cette convention assure la cohérence entre tous les systèmes robotiques.</p>\n<h3 id=\"systme-de-coordonnes-cylindriques\" class=\"heading-3 text-xl font-bold mb-4\">Système de Coordonnées Cylindriques</h3><p>Particulièrement utile pour les robots à configuration cylindrique.</p>\n<p><strong>Paramètres :</strong></p>\n<ul>\n<li><strong>ρ (rho)</strong> : Distance radiale depuis l&#39;axe Z</li>\n<li><strong>φ (phi)</strong> : Angle autour de l&#39;axe Z</li>\n<li><strong>z</strong> : Hauteur le long de l&#39;axe Z</li>\n</ul>\n<p><strong>Conversion cartésien → cylindrique :</strong></p>\n<ul>\n<li>ρ = √(x² + y²)</li>\n<li>φ = arctan(y/x)</li>\n<li>z = z</li>\n</ul>\n<h3 id=\"systme-de-coordonnes-sphriques\" class=\"heading-3 text-xl font-bold mb-4\">Système de Coordonnées Sphériques</h3><p>Idéal pour les robots à poignet sphérique.</p>\n<p><strong>Paramètres :</strong></p>\n<ul>\n<li><strong>r</strong> : Distance depuis l&#39;origine</li>\n<li><strong>θ (theta)</strong> : Angle d&#39;élévation depuis le plan XY</li>\n<li><strong>φ (phi)</strong> : Angle azimutal dans le plan XY</li>\n</ul>\n<p><strong>Conversion cartésien → sphérique :</strong></p>\n<ul>\n<li>r = √(x² + y² + z²)</li>\n<li>θ = arccos(z/r)</li>\n<li>φ = arctan(y/x)</li>\n</ul>\n<h2 id=\"exercice-pratique-1-conversion-de-coordonnes\" class=\"heading-2 text-2xl font-bold mb-4\">Exercice Pratique 1 : Conversion de Coordonnées</h2><p><strong>Objectif</strong> : Maîtriser les conversions entre systèmes de coordonnées</p>\n<p><strong>Problème :</strong>\nUn robot doit atteindre un point situé à :</p>\n<ul>\n<li>Coordonnées cartésiennes : (150mm, 200mm, 300mm)</li>\n</ul>\n<p><strong>Tâches :</strong></p>\n<ol>\n<li>Convertir en coordonnées cylindriques</li>\n<li>Convertir en coordonnées sphériques</li>\n<li>Vérifier vos calculs avec le simulateur en ligne</li>\n</ol>\n<p><strong>Solution :</strong></p>\n<p><em>Coordonnées cylindriques :</em></p>\n<ul>\n<li>ρ = √(150² + 200²) = √(22500 + 40000) = 250mm</li>\n<li>φ = arctan(200/150) = 53.13°</li>\n<li>z = 300mm</li>\n</ul>\n<p><em>Coordonnées sphériques :</em></p>\n<ul>\n<li>r = √(150² + 200² + 300²) = √112500 = 335.4mm</li>\n<li>θ = arccos(300/335.4) = 26.57°</li>\n<li>φ = arctan(200/150) = 53.13°</li>\n</ul>\n<p><strong>Temps alloué</strong> : 20 minutes</p>\n<hr>\n<h1 id=\"-module-2-transformations-gomtriques\" class=\"heading-1 text-3xl font-bold mb-4\">🔄 Module 2 : Transformations Géométriques</h1><h2 id=\"translations-et-rotations\" class=\"heading-2 text-2xl font-bold mb-4\">Translations et Rotations</h2><p>Les <strong>transformations géométriques</strong> permettent de décrire le mouvement d&#39;un objet dans l&#39;espace. C&#39;est la base de toute programmation robotique.</p>\n<h3 id=\"translation\" class=\"heading-3 text-xl font-bold mb-4\">Translation</h3><p>Une translation déplace un point sans changer son orientation.</p>\n<p><strong>Formule de translation :</strong></p>\n<pre><code>x&#39; = x + dx\ny&#39; = y + dy  \nz&#39; = z + dz\n</code></pre>\n<p>Où (dx, dy, dz) est le vecteur de translation.</p>\n<h3 id=\"rotation-autour-d39un-axe\" class=\"heading-3 text-xl font-bold mb-4\">Rotation autour d&#39;un Axe</h3><p><strong>Rotation autour de l&#39;axe Z (dans le plan XY) :</strong></p>\n<pre><code>x&#39; = x⋅cos(θ) - y⋅sin(θ)\ny&#39; = x⋅sin(θ) + y⋅cos(θ)\nz&#39; = z\n</code></pre>\n<p><strong>Rotation autour de l&#39;axe X :</strong></p>\n<pre><code>x&#39; = x\ny&#39; = y⋅cos(θ) - z⋅sin(θ)\nz&#39; = y⋅sin(θ) + z⋅cos(θ)\n</code></pre>\n<p><strong>Rotation autour de l&#39;axe Y :</strong></p>\n<pre><code>x&#39; = x⋅cos(θ) + z⋅sin(θ)\ny&#39; = y\nz&#39; = -x⋅sin(θ) + z⋅cos(θ)\n</code></pre>\n<div class=\"callout callout-video bg-purple-50 border-l-4 border-purple-400 p-4 my-4 rounded-r-lg\"><p>📹 <strong>Vidéo recommandée</strong> : &quot;Démonstration des transformations géométriques&quot; (18min)</p>\n</div><h3 id=\"angles-d39euler\" class=\"heading-3 text-xl font-bold mb-4\">Angles d&#39;Euler</h3><p>Les <strong>angles d&#39;Euler</strong> décrivent l&#39;orientation d&#39;un objet avec trois rotations successives :</p>\n<ol>\n<li><strong>Roulis (Roll)</strong> : Rotation autour de l&#39;axe X</li>\n<li><strong>Tangage (Pitch)</strong> : Rotation autour de l&#39;axe Y  </li>\n<li><strong>Lacet (Yaw)</strong> : Rotation autour de l&#39;axe Z</li>\n</ol>\n<div class=\"callout callout-warning bg-yellow-50 border-l-4 border-yellow-400 p-4 my-4 rounded-r-lg\"><p>⚠️ <strong>IMPORTANT</strong> : L&#39;ordre des rotations affecte le résultat final !</p>\n</div><h2 id=\"matrices-de-transformation-homogne\" class=\"heading-2 text-2xl font-bold mb-4\">Matrices de Transformation Homogène</h2><p>Les <strong>matrices 4×4</strong> permettent de combiner translation et rotation en une seule opération.</p>\n<p><strong>Structure générale :</strong></p>\n<pre><code>[R₁₁ R₁₂ R₁₃ tx]\n[R₂₁ R₂₂ R₂₃ ty]\n[R₃₁ R₃₂ R₃₃ tz]\n[0   0   0   1 ]\n</code></pre>\n<p>Où :</p>\n<ul>\n<li><strong>R</strong> = Matrice de rotation 3×3</li>\n<li><strong>t</strong> = Vecteur de translation (tx, ty, tz)</li>\n</ul>\n<h3 id=\"exemple-concret\" class=\"heading-3 text-xl font-bold mb-4\">Exemple Concret</h3><p><strong>Matrice de translation pure :</strong></p>\n<pre><code>[1  0  0  50 ]    # Translation de 50mm en X\n[0  1  0  30 ]    # Translation de 30mm en Y\n[0  0  1  100]    # Translation de 100mm en Z\n[0  0  0  1  ]\n</code></pre>\n<p><strong>Matrice de rotation de 90° autour de Z :</strong></p>\n<pre><code>[0  -1  0  0]     # cos(90°) = 0, sin(90°) = 1\n[1   0  0  0]\n[0   0  1  0]\n[0   0  0  1]\n</code></pre>\n<h2 id=\"exercice-pratique-2-transformations-successives\" class=\"heading-2 text-2xl font-bold mb-4\">Exercice Pratique 2 : Transformations Successives</h2><p><strong>Objectif</strong> : Appliquer plusieurs transformations géométriques</p>\n<p><strong>Contexte :</strong>\nUn bras robotique doit :</p>\n<ol>\n<li>Tourner de 45° autour de l&#39;axe Z</li>\n<li>Se déplacer de 100mm en X</li>\n<li>Tourner de 30° autour de l&#39;axe Y</li>\n</ol>\n<p><strong>Instructions :</strong></p>\n<ol>\n<li>Calculer la matrice de chaque transformation</li>\n<li>Multiplier les matrices dans l&#39;ordre correct</li>\n<li>Appliquer le résultat au point (50, 0, 0)</li>\n</ol>\n<p><strong>Temps alloué</strong> : 30 minutes</p>\n<hr>\n<h1 id=\"-module-3-cinmatique-et-dynamique\" class=\"heading-1 text-3xl font-bold mb-4\">🏃 Module 3 : Cinématique et Dynamique</h1><h2 id=\"cinmatique-tude-du-mouvement\" class=\"heading-2 text-2xl font-bold mb-4\">Cinématique : Étude du Mouvement</h2><p>La <strong>cinématique</strong> analyse le mouvement sans considérer les forces qui le causent. Elle est essentielle pour programmer des trajectoires fluides.</p>\n<h3 id=\"position-vitesse-et-acclration\" class=\"heading-3 text-xl font-bold mb-4\">Position, Vitesse et Accélération</h3><p><strong>Relations fondamentales :</strong></p>\n<ul>\n<li><strong>Vitesse</strong> = dérivée de la position : v = dp/dt</li>\n<li><strong>Accélération</strong> = dérivée de la vitesse : a = dv/dt = d²p/dt²</li>\n</ul>\n<h3 id=\"mouvement-rectiligne\" class=\"heading-3 text-xl font-bold mb-4\">Mouvement Rectiligne</h3><p><strong>Équations du mouvement uniforme :</strong></p>\n<pre><code>Position : x(t) = x₀ + v₀⋅t\nVitesse : v(t) = v₀ (constante)\n</code></pre>\n<p><strong>Équations du mouvement uniformément accéléré :</strong></p>\n<pre><code>Position : x(t) = x₀ + v₀⋅t + ½⋅a⋅t²\nVitesse : v(t) = v₀ + a⋅t\n</code></pre>\n<div class=\"callout callout-video bg-purple-50 border-l-4 border-purple-400 p-4 my-4 rounded-r-lg\"><p>📹 <strong>Vidéo recommandée</strong> : &quot;Calculs de vitesse et trajectoires&quot; (15min)</p>\n</div><h3 id=\"mouvement-circulaire\" class=\"heading-3 text-xl font-bold mb-4\">Mouvement Circulaire</h3><p><strong>Pour un mouvement circulaire uniforme :</strong></p>\n<ul>\n<li><strong>Vitesse angulaire</strong> : ω = θ/t (rad/s)</li>\n<li><strong>Vitesse linéaire</strong> : v = ω⋅r</li>\n<li><strong>Accélération centripète</strong> : a = v²/r = ω²⋅r</li>\n</ul>\n<h3 id=\"cinmatique-directe\" class=\"heading-3 text-xl font-bold mb-4\">Cinématique Directe</h3><p>La <strong>cinématique directe</strong> calcule la position de l&#39;effecteur à partir des angles articulaires.</p>\n<p><strong>Pour un bras robotique 2D simple :</strong></p>\n<pre><code>x = L₁⋅cos(θ₁) + L₂⋅cos(θ₁ + θ₂)\ny = L₁⋅sin(θ₁) + L₂⋅sin(θ₁ + θ₂)\n</code></pre>\n<p>Où :</p>\n<ul>\n<li>L₁, L₂ = longueurs des segments</li>\n<li>θ₁, θ₂ = angles articulaires</li>\n</ul>\n<h3 id=\"cinmatique-inverse\" class=\"heading-3 text-xl font-bold mb-4\">Cinématique Inverse</h3><p>La <strong>cinématique inverse</strong> détermine les angles articulaires pour atteindre une position donnée.</p>\n<p><strong>Pour le même bras 2D :</strong></p>\n<pre><code>θ₂ = ±arccos((x² + y² - L₁² - L₂²)/(2⋅L₁⋅L₂))\nθ₁ = arctan(y/x) - arctan((L₂⋅sin(θ₂))/(L₁ + L₂⋅cos(θ₂)))\n</code></pre>\n<div class=\"callout callout-warning bg-yellow-50 border-l-4 border-yellow-400 p-4 my-4 rounded-r-lg\"><p>⚠️ <strong>ATTENTION</strong> : Plusieurs solutions peuvent exister (coude en haut/en bas)</p>\n</div><h2 id=\"exercice-pratique-3-calcul-de-trajectoire\" class=\"heading-2 text-2xl font-bold mb-4\">Exercice Pratique 3 : Calcul de Trajectoire</h2><p><strong>Objectif</strong> : Calculer une trajectoire point à point</p>\n<p><strong>Problème :</strong>\nUn robot doit se déplacer du point A(100, 50) au point B(200, 150) en 2 secondes avec :</p>\n<ul>\n<li>Accélération de 0.5 sec</li>\n<li>Vitesse constante de 1 sec  </li>\n<li>Décélération de 0.5 sec</li>\n</ul>\n<p><strong>Tâches :</strong></p>\n<ol>\n<li>Calculer la distance totale</li>\n<li>Déterminer les vitesses maximales</li>\n<li>Établir les équations de mouvement pour chaque phase</li>\n<li>Vérifier la continuité de la vitesse</li>\n</ol>\n<p><strong>Temps alloué</strong> : 25 minutes</p>\n<hr>\n<h1 id=\"-module-4-algbre-vectorielle-et-matricielle\" class=\"heading-1 text-3xl font-bold mb-4\">🧮 Module 4 : Algèbre Vectorielle et Matricielle</h1><h2 id=\"vecteurs-en-robotique\" class=\"heading-2 text-2xl font-bold mb-4\">Vecteurs en Robotique</h2><p>Les <strong>vecteurs</strong> représentent des grandeurs ayant une magnitude et une direction : forces, vitesses, positions relatives.</p>\n<h3 id=\"oprations-vectorielles-fondamentales\" class=\"heading-3 text-xl font-bold mb-4\">Opérations Vectorielles Fondamentales</h3><p><strong>Addition de vecteurs :</strong></p>\n<pre><code>A⃗ + B⃗ = (Ax + Bx, Ay + By, Az + Bz)\n</code></pre>\n<p><strong>Produit scalaire :</strong></p>\n<pre><code>A⃗ ⋅ B⃗ = Ax⋅Bx + Ay⋅By + Az⋅Bz = |A⃗|⋅|B⃗|⋅cos(θ)\n</code></pre>\n<p><strong>Produit vectoriel :</strong></p>\n<pre><code>A⃗ × B⃗ = (Ay⋅Bz - Az⋅By, Az⋅Bx - Ax⋅Bz, Ax⋅By - Ay⋅Bx)\n</code></pre>\n<p>Le produit vectoriel donne un vecteur perpendiculaire aux deux vecteurs originaux.</p>\n<h3 id=\"applications-en-robotique\" class=\"heading-3 text-xl font-bold mb-4\">Applications en Robotique</h3><p><strong>Calcul de couples :</strong>\nLe couple τ⃗ exercé par une force F⃗ à une distance r⃗ :</p>\n<pre><code>τ⃗ = r⃗ × F⃗\n</code></pre>\n<p><strong>Test de colinéarité :</strong>\nDeux vecteurs sont colinéaires si leur produit vectoriel est nul.</p>\n<h2 id=\"matrices-en-robotique\" class=\"heading-2 text-2xl font-bold mb-4\">Matrices en Robotique</h2><p>Les <strong>matrices</strong> sont omniprésentes en robotique pour représenter transformations, rotations et systèmes d&#39;équations.</p>\n<div class=\"callout callout-video bg-purple-50 border-l-4 border-purple-400 p-4 my-4 rounded-r-lg\"><p>📹 <strong>Vidéo recommandée</strong> : &quot;Applications pratiques des matrices&quot; (20min)</p>\n</div><h3 id=\"oprations-matricielles\" class=\"heading-3 text-xl font-bold mb-4\">Opérations Matricielles</h3><p><strong>Multiplication de matrices :</strong>\nPour multiplier A(m×n) et B(n×p), le résultat C(m×p) :</p>\n<pre><code>Cij = Σ(k=1 à n) Aik ⋅ Bkj\n</code></pre>\n<p><strong>Inversion de matrice :</strong>\nEssentielle pour la cinématique inverse :</p>\n<pre><code>A⁻¹ ⋅ A = I (matrice identité)\n</code></pre>\n<h3 id=\"matrice-jacobienne\" class=\"heading-3 text-xl font-bold mb-4\">Matrice Jacobienne</h3><p>La <strong>matrice jacobienne</strong> relie les vitesses articulaires aux vitesses cartésiennes :</p>\n<pre><code>v⃗ = J ⋅ q̇⃗\n</code></pre>\n<p>Où :</p>\n<ul>\n<li>v⃗ = vitesse cartésienne de l&#39;effecteur</li>\n<li>J = matrice jacobienne</li>\n<li>q̇⃗ = vitesses articulaires</li>\n</ul>\n<h3 id=\"dterminant-et-singularits\" class=\"heading-3 text-xl font-bold mb-4\">Déterminant et Singularités</h3><p>Le <strong>déterminant</strong> de la jacobienne indique les singularités :</p>\n<ul>\n<li>det(J) = 0 → Configuration singulière</li>\n<li>det(J) ≠ 0 → Configuration normale</li>\n</ul>\n<div class=\"callout callout-warning bg-yellow-50 border-l-4 border-yellow-400 p-4 my-4 rounded-r-lg\"><p>⚠️ <strong>IMPORTANT</strong> : Éviter les singularités en programmation de trajectoires</p>\n</div><h2 id=\"exercice-pratique-4-analyse-vectorielle\" class=\"heading-2 text-2xl font-bold mb-4\">Exercice Pratique 4 : Analyse Vectorielle</h2><p><strong>Objectif</strong> : Résoudre un problème d&#39;équilibre des forces</p>\n<p><strong>Contexte :</strong>\nUn robot manipule un objet de 5 kg. Trois forces s&#39;appliquent :</p>\n<ul>\n<li>F₁ = (10, 15, 0) N</li>\n<li>F₂ = (-5, 8, 12) N  </li>\n<li>F₃ = (?, ?, -20) N (force d&#39;équilibre à calculer)</li>\n</ul>\n<p><strong>Tâches :</strong></p>\n<ol>\n<li>Calculer F₃ pour l&#39;équilibre statique</li>\n<li>Déterminer l&#39;angle entre F₁ et F₂</li>\n<li>Calculer le moment résultant par rapport à l&#39;origine</li>\n</ol>\n<p><strong>Temps alloué</strong> : 20 minutes</p>\n<hr>\n<h1 id=\"-module-5-trigonomtrie-applique\" class=\"heading-1 text-3xl font-bold mb-4\">📏 Module 5 : Trigonométrie Appliquée</h1><h2 id=\"fonctions-trigonomtriques-essentielles\" class=\"heading-2 text-2xl font-bold mb-4\">Fonctions Trigonométriques Essentielles</h2><p>La <strong>trigonométrie</strong> est indispensable pour résoudre les problèmes de positionnement et d&#39;orientation en robotique.</p>\n<h3 id=\"relations-fondamentales\" class=\"heading-3 text-xl font-bold mb-4\">Relations Fondamentales</h3><p><strong>Triangle rectangle :</strong></p>\n<pre><code>sin(θ) = opposé / hypoténuse\ncos(θ) = adjacent / hypoténuse  \ntan(θ) = opposé / adjacent\n</code></pre>\n<p><strong>Identités utiles :</strong></p>\n<pre><code>sin²(θ) + cos²(θ) = 1\ntan(θ) = sin(θ) / cos(θ)\nsin(2θ) = 2⋅sin(θ)⋅cos(θ)\ncos(2θ) = cos²(θ) - sin²(θ)\n</code></pre>\n<h3 id=\"loi-des-cosinus\" class=\"heading-3 text-xl font-bold mb-4\">Loi des Cosinus</h3><p>Pour un triangle quelconque avec côtés a, b, c et angle C opposé au côté c :</p>\n<pre><code>c² = a² + b² - 2⋅a⋅b⋅cos(C)\n</code></pre>\n<p>Cette loi est cruciale pour la cinématique inverse.</p>\n<h3 id=\"loi-des-sinus\" class=\"heading-3 text-xl font-bold mb-4\">Loi des Sinus</h3><pre><code>a/sin(A) = b/sin(B) = c/sin(C)\n</code></pre>\n<h2 id=\"applications-robotiques-spcifiques\" class=\"heading-2 text-2xl font-bold mb-4\">Applications Robotiques Spécifiques</h2><h3 id=\"calcul-d39angles-articulaires\" class=\"heading-3 text-xl font-bold mb-4\">Calcul d&#39;Angles Articulaires</h3><p><strong>Problème type :</strong> Robot SCARA avec deux liens</p>\n<ul>\n<li>Lien 1 : longueur L₁</li>\n<li>Lien 2 : longueur L₂</li>\n<li>Position cible : (x, y)</li>\n</ul>\n<p><strong>Solution par loi des cosinus :</strong></p>\n<pre><code>cos(θ₂) = (x² + y² - L₁² - L₂²) / (2⋅L₁⋅L₂)\nθ₂ = ±arccos(cos(θ₂))\n</code></pre>\n<h3 id=\"orientation-d39outils\" class=\"heading-3 text-xl font-bold mb-4\">Orientation d&#39;Outils</h3><p><strong>Calcul de l&#39;angle d&#39;approche :</strong>\nPour approcher perpendiculairement une surface inclinée d&#39;angle α :</p>\n<pre><code>θ_outil = 90° - α\n</code></pre>\n<h2 id=\"exercice-pratique-5-problme-de-positionnement\" class=\"heading-2 text-2xl font-bold mb-4\">Exercice Pratique 5 : Problème de Positionnement</h2><p><strong>Objectif</strong> : Résoudre un problème de cinématique inverse complexe</p>\n<p><strong>Configuration :</strong>\nRobot planaire à 3 degrés de liberté :</p>\n<ul>\n<li>L₁ = 300mm (bras principal)</li>\n<li>L₂ = 200mm (avant-bras)  </li>\n<li>L₃ = 100mm (poignet)</li>\n</ul>\n<p><strong>Mission :</strong>\nAtteindre le point (400, 300) avec orientation de l&#39;effecteur à 45°</p>\n<p><strong>Instructions :</strong></p>\n<ol>\n<li>Utiliser la loi des cosinus pour θ₂</li>\n<li>Calculer θ₁ par trigonométrie</li>\n<li>Déterminer θ₃ pour l&#39;orientation finale</li>\n<li>Vérifier par cinématique directe</li>\n</ol>\n<p><strong>Temps alloué</strong> : 35 minutes</p>\n<hr>\n<h1 id=\"-module-6-applications-pratiques-et-rsolution-de-problmes\" class=\"heading-1 text-3xl font-bold mb-4\">🎯 Module 6 : Applications Pratiques et Résolution de Problèmes</h1><h2 id=\"mthodologie-de-rsolution\" class=\"heading-2 text-2xl font-bold mb-4\">Méthodologie de Résolution</h2><p>Face à un problème robotique complexe, suivre cette <strong>approche structurée</strong> :</p>\n<h3 id=\"tape-1-analyse-du-problme\" class=\"heading-3 text-xl font-bold mb-4\">Étape 1 : Analyse du Problème</h3><ol>\n<li><strong>Identifier</strong> les contraintes géométriques</li>\n<li><strong>Définir</strong> les systèmes de coordonnées</li>\n<li><strong>Lister</strong> les inconnues et données</li>\n<li><strong>Choisir</strong> les outils mathématiques appropriés</li>\n</ol>\n<h3 id=\"tape-2-modlisation-mathmatique\" class=\"heading-3 text-xl font-bold mb-4\">Étape 2 : Modélisation Mathématique</h3><ol>\n<li><strong>Établir</strong> les équations de base</li>\n<li><strong>Simplifier</strong> si possible</li>\n<li><strong>Vérifier</strong> la cohérence dimensionnelle</li>\n<li><strong>Prévoir</strong> les cas limites</li>\n</ol>\n<h3 id=\"tape-3-rsolution-et-validation\" class=\"heading-3 text-xl font-bold mb-4\">Étape 3 : Résolution et Validation</h3><ol>\n<li><strong>Résoudre</strong> étape par étape</li>\n<li><strong>Vérifier</strong> les résultats par méthode alternative</li>\n<li><strong>Tester</strong> avec des valeurs limites</li>\n<li><strong>Interpréter</strong> physiquement les solutions</li>\n</ol>\n<h2 id=\"cas-d39tude-complet-robot-de-soudage\" class=\"heading-2 text-2xl font-bold mb-4\">Cas d&#39;Étude Complet : Robot de Soudage</h2><h3 id=\"contexte\" class=\"heading-3 text-xl font-bold mb-4\">Contexte</h3><p>Un robot de soudage 6 axes doit suivre une trajectoire circulaire de rayon 50mm, centrée en (200, 150, 100), dans le plan Z = 100mm.</p>\n<h3 id=\"analyse-mathmatique\" class=\"heading-3 text-xl font-bold mb-4\">Analyse Mathématique</h3><p><strong>Paramètrisation de la trajectoire :</strong></p>\n<pre><code>x(t) = 200 + 50⋅cos(ωt)\ny(t) = 150 + 50⋅sin(ωt)  \nz(t) = 100\n</code></pre>\n<p><strong>Vitesses requises :</strong></p>\n<pre><code>vx(t) = -50ω⋅sin(ωt)\nvy(t) = 50ω⋅cos(ωt)\nvz(t) = 0\n</code></pre>\n<p><strong>Accélérations :</strong></p>\n<pre><code>ax(t) = -50ω²⋅cos(ωt)\nay(t) = -50ω²⋅sin(ωt)\naz(t) = 0\n</code></pre>\n<h3 id=\"contraintes-de-performance\" class=\"heading-3 text-xl font-bold mb-4\">Contraintes de Performance</h3><p><strong>Vitesse maximale :</strong> 100 mm/s</p>\n<pre><code>|v|max = 50ω → ω ≤ 2 rad/s\n</code></pre>\n<p><strong>Accélération maximale :</strong> 500 mm/s²</p>\n<pre><code>|a|max = 50ω² → ω ≤ √10 ≈ 3.16 rad/s\n</code></pre>\n<p>La contrainte de vitesse est <strong>limitante</strong> : ω = 2 rad/s maximum.</p>\n<h3 id=\"orientation-de-l39outil\" class=\"heading-3 text-xl font-bold mb-4\">Orientation de l&#39;Outil</h3><p><strong>Vecteur tangent à la trajectoire :</strong></p>\n<pre><code>T⃗(t) = (-sin(ωt), cos(ωt), 0)\n</code></pre>\n<p><strong>Angle d&#39;orientation :</strong></p>\n<pre><code>θ(t) = arctan(cos(ωt) / -sin(ωt)) = ωt - π/2\n</code></pre>\n<h2 id=\"exercice-pratique-final-projet-intgr\" class=\"heading-2 text-2xl font-bold mb-4\">Exercice Pratique Final : Projet Intégré</h2><p><strong>Objectif</strong> : Intégrer tous les concepts mathématiques</p>\n<p><strong>Projet :</strong> Conception d&#39;une cellule robotique de palettisation</p>\n<p><strong>Spécifications :</strong></p>\n<ul>\n<li>Robot 4 axes (SCARA + rotation + translation Z)</li>\n<li>Zone de travail : 1000mm × 800mm</li>\n<li>Hauteur : 0 à 500mm</li>\n<li>Palettes : 1200mm × 800mm</li>\n<li>Objets : cubes de 100mm × 100mm × 100mm</li>\n</ul>\n<p><strong>Livrables :</strong></p>\n<ol>\n<li><strong>Analyse géométrique</strong> de l&#39;espace de travail</li>\n<li><strong>Calcul des limites articulaires</strong> requises</li>\n<li><strong>Programmation mathématique</strong> d&#39;un motif de palettisation</li>\n<li><strong>Optimisation de trajectoire</strong> pour temps de cycle minimal</li>\n<li><strong>Validation</strong> par simulation</li>\n</ol>\n<p><strong>Critères d&#39;évaluation :</strong></p>\n<ul>\n<li>Exactitude des calculs mathématiques (40%)</li>\n<li>Méthodologie de résolution (30%)</li>\n<li>Optimisation et efficacité (20%)</li>\n<li>Présentation et clarté (10%)</li>\n</ul>\n<p><strong>Temps alloué</strong> : 90 minutes</p>\n<div class=\"callout callout-tip bg-blue-50 border-l-4 border-blue-400 p-4 my-4 rounded-r-lg\"><p>💡 <strong>ASTUCE</strong> : Utilisez les outils en ligne pour vérifier vos calculs matriciels et trigonométriques complexes.</p>\n</div><hr>\n<h2 id=\"-rcapitulatif-et-points-cls\" class=\"heading-2 text-2xl font-bold mb-4\">📋 Récapitulatif et Points Clés</h2><h3 id=\"concepts-matriss-\" class=\"heading-3 text-xl font-bold mb-4\">Concepts Maîtrisés ✅</h3><ol>\n<li><strong>Systèmes de coordonnées</strong> : Cartésien, cylindrique, sphérique</li>\n<li><strong>Transformations géométriques</strong> : Translation, rotation, matrices homogènes  </li>\n<li><strong>Cinématique</strong> : Directe, inverse, trajectoires</li>\n<li><strong>Algèbre vectorielle</strong> : Produits scalaire et vectoriel, applications</li>\n<li><strong>Matrices</strong> : Multiplication, inversion, jacobienne</li>\n<li><strong>Trigonométrie</strong> : Fonctions, identités, lois des cosinus/sinus</li>\n</ol>\n<h3 id=\"formules-essentielles-\" class=\"heading-3 text-xl font-bold mb-4\">Formules Essentielles 📐</h3><p><strong>Transformation homogène :</strong></p>\n<pre><code>[R  t]   [p]   [Rp + t]\n[0  1] ⋅ [1] = [  1   ]\n</code></pre>\n<p><strong>Cinématique directe 2D :</strong></p>\n<pre><code>x = L₁cos(θ₁) + L₂cos(θ₁+θ₂)\ny = L₁sin(θ₁) + L₂sin(θ₁+θ₂)\n</code></pre>\n<p><strong>Vitesse en coordonnées polaires :</strong></p>\n<pre><code>vr = ṙ\nvθ = rθ̇\n</code></pre>\n<h3 id=\"applications-industrielles-\" class=\"heading-3 text-xl font-bold mb-4\">Applications Industrielles 🏭</h3><ul>\n<li><strong>Programmation de trajectoires</strong> optimisées</li>\n<li><strong>Calibrage et étalonnage</strong> de robots</li>\n<li><strong>Diagnostic de singularités</strong> et limitations</li>\n<li><strong>Calcul de forces et couples</strong> requis</li>\n<li><strong>Optimisation de cycles</strong> de production</li>\n</ul>\n<h3 id=\"ressources-pour-approfondir-\" class=\"heading-3 text-xl font-bold mb-4\">Ressources pour Approfondir 📚</h3><ul>\n<li>Formulaires mathématiques spécialisés robotique</li>\n<li>Simulateurs de cinématique en ligne</li>\n<li>Logiciels de calcul matriciel (MATLAB, Octave)</li>\n<li>Standards industriels de programmation robot</li>\n</ul>\n<hr>\n<p><em>Cette formation vous donne les bases mathématiques solides nécessaires pour exceller comme technicien en robotique. Continuez à pratiquer ces concepts dans vos applications quotidiennes !</em></p>\n",
  "componentMapping": {
    "template": "SkillsTemplate",
    "layout": "FormationLayout",
    "components": {
      "navigation": "ProgressTracker",
      "modules": [
        {
          "component": "ModuleCard",
          "props": {
            "module": {
              "id": "-module-1-systmes-de-coordonnes-et-repres",
              "title": "\udcd0 Module 1 : Systèmes de Coordonnées et Repères",
              "titleWithEmoji": "📐 Module 1 : Systèmes de Coordonnées et Repères",
              "emoji": "\ud83d",
              "order": 1,
              "content": "## Introduction aux Systèmes de Coordonnées\n\nEn robotique, la **localisation précise** des objets et des outils est fondamentale. Un technicien doit maîtriser les différents systèmes de coordonnées pour comprendre et programmer les mouvements robotiques.\n\n### Système de Coordonnées Cartésiennes\n\nLe système cartésien utilise trois axes perpendiculaires : **X, Y, et Z**.\n\n**Caractéristiques principales :**\n- **Axe X** : Généralement horizontal, vers la droite\n- **Axe Y** : Généralement horizontal, vers l'avant  \n- **Axe Z** : Généralement vertical, vers le haut\n- **Origine (0,0,0)** : Point de référence du système\n\n> 📹 **Vidéo recommandée** : \"Introduction aux coordonnées cartésiennes en robotique\" (12min)\n\n### Conventions Robotiques Standards\n\n**Convention main droite :**\n1. Pointez le pouce dans la direction X positive\n2. L'index indique Y positive\n3. Le majeur indique Z positive\n\nCette convention assure la cohérence entre tous les systèmes robotiques.\n\n### Système de Coordonnées Cylindriques\n\nParticulièrement utile pour les robots à configuration cylindrique.\n\n**Paramètres :**\n- **ρ (rho)** : Distance radiale depuis l'axe Z\n- **φ (phi)** : Angle autour de l'axe Z\n- **z** : Hauteur le long de l'axe Z\n\n**Conversion cartésien → cylindrique :**\n- ρ = √(x² + y²)\n- φ = arctan(y/x)\n- z = z\n\n### Système de Coordonnées Sphériques\n\nIdéal pour les robots à poignet sphérique.\n\n**Paramètres :**\n- **r** : Distance depuis l'origine\n- **θ (theta)** : Angle d'élévation depuis le plan XY\n- **φ (phi)** : Angle azimutal dans le plan XY\n\n**Conversion cartésien → sphérique :**\n- r = √(x² + y² + z²)\n- θ = arccos(z/r)\n- φ = arctan(y/x)\n\n## Exercice Pratique 1 : Conversion de Coordonnées\n\n**Objectif** : Maîtriser les conversions entre systèmes de coordonnées\n\n**Problème :**\nUn robot doit atteindre un point situé à :\n- Coordonnées cartésiennes : (150mm, 200mm, 300mm)\n\n**Tâches :**\n1. Convertir en coordonnées cylindriques\n2. Convertir en coordonnées sphériques\n3. Vérifier vos calculs avec le simulateur en ligne\n\n**Solution :**\n\n*Coordonnées cylindriques :*\n- ρ = √(150² + 200²) = √(22500 + 40000) = 250mm\n- φ = arctan(200/150) = 53.13°\n- z = 300mm\n\n*Coordonnées sphériques :*\n- r = √(150² + 200² + 300²) = √112500 = 335.4mm\n- θ = arccos(300/335.4) = 26.57°\n- φ = arctan(200/150) = 53.13°\n\n**Temps alloué** : 20 minutes\n\n---",
              "htmlContent": "<h2 id=\"introduction-aux-systmes-de-coordonnes\" class=\"heading-2 text-2xl font-bold mb-4\">Introduction aux Systèmes de Coordonnées</h2><p>En robotique, la <strong>localisation précise</strong> des objets et des outils est fondamentale. Un technicien doit maîtriser les différents systèmes de coordonnées pour comprendre et programmer les mouvements robotiques.</p>\n<h3 id=\"systme-de-coordonnes-cartsiennes\" class=\"heading-3 text-xl font-bold mb-4\">Système de Coordonnées Cartésiennes</h3><p>Le système cartésien utilise trois axes perpendiculaires : <strong>X, Y, et Z</strong>.</p>\n<p><strong>Caractéristiques principales :</strong></p>\n<ul>\n<li><strong>Axe X</strong> : Généralement horizontal, vers la droite</li>\n<li><strong>Axe Y</strong> : Généralement horizontal, vers l&#39;avant  </li>\n<li><strong>Axe Z</strong> : Généralement vertical, vers le haut</li>\n<li><strong>Origine (0,0,0)</strong> : Point de référence du système</li>\n</ul>\n<div class=\"callout callout-video bg-purple-50 border-l-4 border-purple-400 p-4 my-4 rounded-r-lg\"><p>📹 <strong>Vidéo recommandée</strong> : &quot;Introduction aux coordonnées cartésiennes en robotique&quot; (12min)</p>\n</div><h3 id=\"conventions-robotiques-standards\" class=\"heading-3 text-xl font-bold mb-4\">Conventions Robotiques Standards</h3><p><strong>Convention main droite :</strong></p>\n<ol>\n<li>Pointez le pouce dans la direction X positive</li>\n<li>L&#39;index indique Y positive</li>\n<li>Le majeur indique Z positive</li>\n</ol>\n<p>Cette convention assure la cohérence entre tous les systèmes robotiques.</p>\n<h3 id=\"systme-de-coordonnes-cylindriques\" class=\"heading-3 text-xl font-bold mb-4\">Système de Coordonnées Cylindriques</h3><p>Particulièrement utile pour les robots à configuration cylindrique.</p>\n<p><strong>Paramètres :</strong></p>\n<ul>\n<li><strong>ρ (rho)</strong> : Distance radiale depuis l&#39;axe Z</li>\n<li><strong>φ (phi)</strong> : Angle autour de l&#39;axe Z</li>\n<li><strong>z</strong> : Hauteur le long de l&#39;axe Z</li>\n</ul>\n<p><strong>Conversion cartésien → cylindrique :</strong></p>\n<ul>\n<li>ρ = √(x² + y²)</li>\n<li>φ = arctan(y/x)</li>\n<li>z = z</li>\n</ul>\n<h3 id=\"systme-de-coordonnes-sphriques\" class=\"heading-3 text-xl font-bold mb-4\">Système de Coordonnées Sphériques</h3><p>Idéal pour les robots à poignet sphérique.</p>\n<p><strong>Paramètres :</strong></p>\n<ul>\n<li><strong>r</strong> : Distance depuis l&#39;origine</li>\n<li><strong>θ (theta)</strong> : Angle d&#39;élévation depuis le plan XY</li>\n<li><strong>φ (phi)</strong> : Angle azimutal dans le plan XY</li>\n</ul>\n<p><strong>Conversion cartésien → sphérique :</strong></p>\n<ul>\n<li>r = √(x² + y² + z²)</li>\n<li>θ = arccos(z/r)</li>\n<li>φ = arctan(y/x)</li>\n</ul>\n<h2 id=\"exercice-pratique-1-conversion-de-coordonnes\" class=\"heading-2 text-2xl font-bold mb-4\">Exercice Pratique 1 : Conversion de Coordonnées</h2><p><strong>Objectif</strong> : Maîtriser les conversions entre systèmes de coordonnées</p>\n<p><strong>Problème :</strong>\nUn robot doit atteindre un point situé à :</p>\n<ul>\n<li>Coordonnées cartésiennes : (150mm, 200mm, 300mm)</li>\n</ul>\n<p><strong>Tâches :</strong></p>\n<ol>\n<li>Convertir en coordonnées cylindriques</li>\n<li>Convertir en coordonnées sphériques</li>\n<li>Vérifier vos calculs avec le simulateur en ligne</li>\n</ol>\n<p><strong>Solution :</strong></p>\n<p><em>Coordonnées cylindriques :</em></p>\n<ul>\n<li>ρ = √(150² + 200²) = √(22500 + 40000) = 250mm</li>\n<li>φ = arctan(200/150) = 53.13°</li>\n<li>z = 300mm</li>\n</ul>\n<p><em>Coordonnées sphériques :</em></p>\n<ul>\n<li>r = √(150² + 200² + 300²) = √112500 = 335.4mm</li>\n<li>θ = arccos(300/335.4) = 26.57°</li>\n<li>φ = arctan(200/150) = 53.13°</li>\n</ul>\n<p><strong>Temps alloué</strong> : 20 minutes</p>\n<hr>\n",
              "components": [
                {
                  "type": "VideoPlayer",
                  "detected": true
                },
                {
                  "type": "ExerciseBlock",
                  "detected": true
                }
              ],
              "estimatedDuration": 28,
              "type": "content"
            },
            "type": "skills"
          }
        },
        {
          "component": "ModuleCard",
          "props": {
            "module": {
              "id": "-module-2-transformations-gomtriques",
              "title": "\udd04 Module 2 : Transformations Géométriques",
              "titleWithEmoji": "🔄 Module 2 : Transformations Géométriques",
              "emoji": "\ud83d",
              "order": 2,
              "content": "## Translations et Rotations\n\nLes **transformations géométriques** permettent de décrire le mouvement d'un objet dans l'espace. C'est la base de toute programmation robotique.\n\n### Translation\n\nUne translation déplace un point sans changer son orientation.\n\n**Formule de translation :**\n```\nx' = x + dx\ny' = y + dy  \nz' = z + dz\n```\n\nOù (dx, dy, dz) est le vecteur de translation.\n\n### Rotation autour d'un Axe\n\n**Rotation autour de l'axe Z (dans le plan XY) :**\n```\nx' = x⋅cos(θ) - y⋅sin(θ)\ny' = x⋅sin(θ) + y⋅cos(θ)\nz' = z\n```\n\n**Rotation autour de l'axe X :**\n```\nx' = x\ny' = y⋅cos(θ) - z⋅sin(θ)\nz' = y⋅sin(θ) + z⋅cos(θ)\n```\n\n**Rotation autour de l'axe Y :**\n```\nx' = x⋅cos(θ) + z⋅sin(θ)\ny' = y\nz' = -x⋅sin(θ) + z⋅cos(θ)\n```\n\n> 📹 **Vidéo recommandée** : \"Démonstration des transformations géométriques\" (18min)\n\n### Angles d'Euler\n\nLes **angles d'Euler** décrivent l'orientation d'un objet avec trois rotations successives :\n\n1. **Roulis (Roll)** : Rotation autour de l'axe X\n2. **Tangage (Pitch)** : Rotation autour de l'axe Y  \n3. **Lacet (Yaw)** : Rotation autour de l'axe Z\n\n> ⚠️ **IMPORTANT** : L'ordre des rotations affecte le résultat final !\n\n## Matrices de Transformation Homogène\n\nLes **matrices 4×4** permettent de combiner translation et rotation en une seule opération.\n\n**Structure générale :**\n```\n[R₁₁ R₁₂ R₁₃ tx]\n[R₂₁ R₂₂ R₂₃ ty]\n[R₃₁ R₃₂ R₃₃ tz]\n[0   0   0   1 ]\n```\n\nOù :\n- **R** = Matrice de rotation 3×3\n- **t** = Vecteur de translation (tx, ty, tz)\n\n### Exemple Concret\n\n**Matrice de translation pure :**\n```\n[1  0  0  50 ]    # Translation de 50mm en X\n[0  1  0  30 ]    # Translation de 30mm en Y\n[0  0  1  100]    # Translation de 100mm en Z\n[0  0  0  1  ]\n```\n\n**Matrice de rotation de 90° autour de Z :**\n```\n[0  -1  0  0]     # cos(90°) = 0, sin(90°) = 1\n[1   0  0  0]\n[0   0  1  0]\n[0   0  0  1]\n```\n\n## Exercice Pratique 2 : Transformations Successives\n\n**Objectif** : Appliquer plusieurs transformations géométriques\n\n**Contexte :**\nUn bras robotique doit :\n1. Tourner de 45° autour de l'axe Z\n2. Se déplacer de 100mm en X\n3. Tourner de 30° autour de l'axe Y\n\n**Instructions :**\n1. Calculer la matrice de chaque transformation\n2. Multiplier les matrices dans l'ordre correct\n3. Appliquer le résultat au point (50, 0, 0)\n\n**Temps alloué** : 30 minutes\n\n---",
              "htmlContent": "<h2 id=\"translations-et-rotations\" class=\"heading-2 text-2xl font-bold mb-4\">Translations et Rotations</h2><p>Les <strong>transformations géométriques</strong> permettent de décrire le mouvement d&#39;un objet dans l&#39;espace. C&#39;est la base de toute programmation robotique.</p>\n<h3 id=\"translation\" class=\"heading-3 text-xl font-bold mb-4\">Translation</h3><p>Une translation déplace un point sans changer son orientation.</p>\n<p><strong>Formule de translation :</strong></p>\n<pre><code>x&#39; = x + dx\ny&#39; = y + dy  \nz&#39; = z + dz\n</code></pre>\n<p>Où (dx, dy, dz) est le vecteur de translation.</p>\n<h3 id=\"rotation-autour-d39un-axe\" class=\"heading-3 text-xl font-bold mb-4\">Rotation autour d&#39;un Axe</h3><p><strong>Rotation autour de l&#39;axe Z (dans le plan XY) :</strong></p>\n<pre><code>x&#39; = x⋅cos(θ) - y⋅sin(θ)\ny&#39; = x⋅sin(θ) + y⋅cos(θ)\nz&#39; = z\n</code></pre>\n<p><strong>Rotation autour de l&#39;axe X :</strong></p>\n<pre><code>x&#39; = x\ny&#39; = y⋅cos(θ) - z⋅sin(θ)\nz&#39; = y⋅sin(θ) + z⋅cos(θ)\n</code></pre>\n<p><strong>Rotation autour de l&#39;axe Y :</strong></p>\n<pre><code>x&#39; = x⋅cos(θ) + z⋅sin(θ)\ny&#39; = y\nz&#39; = -x⋅sin(θ) + z⋅cos(θ)\n</code></pre>\n<div class=\"callout callout-video bg-purple-50 border-l-4 border-purple-400 p-4 my-4 rounded-r-lg\"><p>📹 <strong>Vidéo recommandée</strong> : &quot;Démonstration des transformations géométriques&quot; (18min)</p>\n</div><h3 id=\"angles-d39euler\" class=\"heading-3 text-xl font-bold mb-4\">Angles d&#39;Euler</h3><p>Les <strong>angles d&#39;Euler</strong> décrivent l&#39;orientation d&#39;un objet avec trois rotations successives :</p>\n<ol>\n<li><strong>Roulis (Roll)</strong> : Rotation autour de l&#39;axe X</li>\n<li><strong>Tangage (Pitch)</strong> : Rotation autour de l&#39;axe Y  </li>\n<li><strong>Lacet (Yaw)</strong> : Rotation autour de l&#39;axe Z</li>\n</ol>\n<div class=\"callout callout-warning bg-yellow-50 border-l-4 border-yellow-400 p-4 my-4 rounded-r-lg\"><p>⚠️ <strong>IMPORTANT</strong> : L&#39;ordre des rotations affecte le résultat final !</p>\n</div><h2 id=\"matrices-de-transformation-homogne\" class=\"heading-2 text-2xl font-bold mb-4\">Matrices de Transformation Homogène</h2><p>Les <strong>matrices 4×4</strong> permettent de combiner translation et rotation en une seule opération.</p>\n<p><strong>Structure générale :</strong></p>\n<pre><code>[R₁₁ R₁₂ R₁₃ tx]\n[R₂₁ R₂₂ R₂₃ ty]\n[R₃₁ R₃₂ R₃₃ tz]\n[0   0   0   1 ]\n</code></pre>\n<p>Où :</p>\n<ul>\n<li><strong>R</strong> = Matrice de rotation 3×3</li>\n<li><strong>t</strong> = Vecteur de translation (tx, ty, tz)</li>\n</ul>\n<h3 id=\"exemple-concret\" class=\"heading-3 text-xl font-bold mb-4\">Exemple Concret</h3><p><strong>Matrice de translation pure :</strong></p>\n<pre><code>[1  0  0  50 ]    # Translation de 50mm en X\n[0  1  0  30 ]    # Translation de 30mm en Y\n[0  0  1  100]    # Translation de 100mm en Z\n[0  0  0  1  ]\n</code></pre>\n<p><strong>Matrice de rotation de 90° autour de Z :</strong></p>\n<pre><code>[0  -1  0  0]     # cos(90°) = 0, sin(90°) = 1\n[1   0  0  0]\n[0   0  1  0]\n[0   0  0  1]\n</code></pre>\n<h2 id=\"exercice-pratique-2-transformations-successives\" class=\"heading-2 text-2xl font-bold mb-4\">Exercice Pratique 2 : Transformations Successives</h2><p><strong>Objectif</strong> : Appliquer plusieurs transformations géométriques</p>\n<p><strong>Contexte :</strong>\nUn bras robotique doit :</p>\n<ol>\n<li>Tourner de 45° autour de l&#39;axe Z</li>\n<li>Se déplacer de 100mm en X</li>\n<li>Tourner de 30° autour de l&#39;axe Y</li>\n</ol>\n<p><strong>Instructions :</strong></p>\n<ol>\n<li>Calculer la matrice de chaque transformation</li>\n<li>Multiplier les matrices dans l&#39;ordre correct</li>\n<li>Appliquer le résultat au point (50, 0, 0)</li>\n</ol>\n<p><strong>Temps alloué</strong> : 30 minutes</p>\n<hr>\n",
              "components": [
                {
                  "type": "VideoPlayer",
                  "detected": true
                },
                {
                  "type": "ExerciseBlock",
                  "detected": true
                },
                {
                  "type": "CalloutBox",
                  "detected": true
                }
              ],
              "estimatedDuration": 39,
              "type": "content"
            },
            "type": "skills"
          }
        },
        {
          "component": "ModuleCard",
          "props": {
            "module": {
              "id": "-module-3-cinmatique-et-dynamique",
              "title": "\udfc3 Module 3 : Cinématique et Dynamique",
              "titleWithEmoji": "🏃 Module 3 : Cinématique et Dynamique",
              "emoji": "\ud83c",
              "order": 3,
              "content": "## Cinématique : Étude du Mouvement\n\nLa **cinématique** analyse le mouvement sans considérer les forces qui le causent. Elle est essentielle pour programmer des trajectoires fluides.\n\n### Position, Vitesse et Accélération\n\n**Relations fondamentales :**\n- **Vitesse** = dérivée de la position : v = dp/dt\n- **Accélération** = dérivée de la vitesse : a = dv/dt = d²p/dt²\n\n### Mouvement Rectiligne\n\n**Équations du mouvement uniforme :**\n```\nPosition : x(t) = x₀ + v₀⋅t\nVitesse : v(t) = v₀ (constante)\n```\n\n**Équations du mouvement uniformément accéléré :**\n```\nPosition : x(t) = x₀ + v₀⋅t + ½⋅a⋅t²\nVitesse : v(t) = v₀ + a⋅t\n```\n\n> 📹 **Vidéo recommandée** : \"Calculs de vitesse et trajectoires\" (15min)\n\n### Mouvement Circulaire\n\n**Pour un mouvement circulaire uniforme :**\n- **Vitesse angulaire** : ω = θ/t (rad/s)\n- **Vitesse linéaire** : v = ω⋅r\n- **Accélération centripète** : a = v²/r = ω²⋅r\n\n### Cinématique Directe\n\nLa **cinématique directe** calcule la position de l'effecteur à partir des angles articulaires.\n\n**Pour un bras robotique 2D simple :**\n```\nx = L₁⋅cos(θ₁) + L₂⋅cos(θ₁ + θ₂)\ny = L₁⋅sin(θ₁) + L₂⋅sin(θ₁ + θ₂)\n```\n\nOù :\n- L₁, L₂ = longueurs des segments\n- θ₁, θ₂ = angles articulaires\n\n### Cinématique Inverse\n\nLa **cinématique inverse** détermine les angles articulaires pour atteindre une position donnée.\n\n**Pour le même bras 2D :**\n```\nθ₂ = ±arccos((x² + y² - L₁² - L₂²)/(2⋅L₁⋅L₂))\nθ₁ = arctan(y/x) - arctan((L₂⋅sin(θ₂))/(L₁ + L₂⋅cos(θ₂)))\n```\n\n> ⚠️ **ATTENTION** : Plusieurs solutions peuvent exister (coude en haut/en bas)\n\n## Exercice Pratique 3 : Calcul de Trajectoire\n\n**Objectif** : Calculer une trajectoire point à point\n\n**Problème :**\nUn robot doit se déplacer du point A(100, 50) au point B(200, 150) en 2 secondes avec :\n- Accélération de 0.5 sec\n- Vitesse constante de 1 sec  \n- Décélération de 0.5 sec\n\n**Tâches :**\n1. Calculer la distance totale\n2. Déterminer les vitesses maximales\n3. Établir les équations de mouvement pour chaque phase\n4. Vérifier la continuité de la vitesse\n\n**Temps alloué** : 25 minutes\n\n---",
              "htmlContent": "<h2 id=\"cinmatique-tude-du-mouvement\" class=\"heading-2 text-2xl font-bold mb-4\">Cinématique : Étude du Mouvement</h2><p>La <strong>cinématique</strong> analyse le mouvement sans considérer les forces qui le causent. Elle est essentielle pour programmer des trajectoires fluides.</p>\n<h3 id=\"position-vitesse-et-acclration\" class=\"heading-3 text-xl font-bold mb-4\">Position, Vitesse et Accélération</h3><p><strong>Relations fondamentales :</strong></p>\n<ul>\n<li><strong>Vitesse</strong> = dérivée de la position : v = dp/dt</li>\n<li><strong>Accélération</strong> = dérivée de la vitesse : a = dv/dt = d²p/dt²</li>\n</ul>\n<h3 id=\"mouvement-rectiligne\" class=\"heading-3 text-xl font-bold mb-4\">Mouvement Rectiligne</h3><p><strong>Équations du mouvement uniforme :</strong></p>\n<pre><code>Position : x(t) = x₀ + v₀⋅t\nVitesse : v(t) = v₀ (constante)\n</code></pre>\n<p><strong>Équations du mouvement uniformément accéléré :</strong></p>\n<pre><code>Position : x(t) = x₀ + v₀⋅t + ½⋅a⋅t²\nVitesse : v(t) = v₀ + a⋅t\n</code></pre>\n<div class=\"callout callout-video bg-purple-50 border-l-4 border-purple-400 p-4 my-4 rounded-r-lg\"><p>📹 <strong>Vidéo recommandée</strong> : &quot;Calculs de vitesse et trajectoires&quot; (15min)</p>\n</div><h3 id=\"mouvement-circulaire\" class=\"heading-3 text-xl font-bold mb-4\">Mouvement Circulaire</h3><p><strong>Pour un mouvement circulaire uniforme :</strong></p>\n<ul>\n<li><strong>Vitesse angulaire</strong> : ω = θ/t (rad/s)</li>\n<li><strong>Vitesse linéaire</strong> : v = ω⋅r</li>\n<li><strong>Accélération centripète</strong> : a = v²/r = ω²⋅r</li>\n</ul>\n<h3 id=\"cinmatique-directe\" class=\"heading-3 text-xl font-bold mb-4\">Cinématique Directe</h3><p>La <strong>cinématique directe</strong> calcule la position de l&#39;effecteur à partir des angles articulaires.</p>\n<p><strong>Pour un bras robotique 2D simple :</strong></p>\n<pre><code>x = L₁⋅cos(θ₁) + L₂⋅cos(θ₁ + θ₂)\ny = L₁⋅sin(θ₁) + L₂⋅sin(θ₁ + θ₂)\n</code></pre>\n<p>Où :</p>\n<ul>\n<li>L₁, L₂ = longueurs des segments</li>\n<li>θ₁, θ₂ = angles articulaires</li>\n</ul>\n<h3 id=\"cinmatique-inverse\" class=\"heading-3 text-xl font-bold mb-4\">Cinématique Inverse</h3><p>La <strong>cinématique inverse</strong> détermine les angles articulaires pour atteindre une position donnée.</p>\n<p><strong>Pour le même bras 2D :</strong></p>\n<pre><code>θ₂ = ±arccos((x² + y² - L₁² - L₂²)/(2⋅L₁⋅L₂))\nθ₁ = arctan(y/x) - arctan((L₂⋅sin(θ₂))/(L₁ + L₂⋅cos(θ₂)))\n</code></pre>\n<div class=\"callout callout-warning bg-yellow-50 border-l-4 border-yellow-400 p-4 my-4 rounded-r-lg\"><p>⚠️ <strong>ATTENTION</strong> : Plusieurs solutions peuvent exister (coude en haut/en bas)</p>\n</div><h2 id=\"exercice-pratique-3-calcul-de-trajectoire\" class=\"heading-2 text-2xl font-bold mb-4\">Exercice Pratique 3 : Calcul de Trajectoire</h2><p><strong>Objectif</strong> : Calculer une trajectoire point à point</p>\n<p><strong>Problème :</strong>\nUn robot doit se déplacer du point A(100, 50) au point B(200, 150) en 2 secondes avec :</p>\n<ul>\n<li>Accélération de 0.5 sec</li>\n<li>Vitesse constante de 1 sec  </li>\n<li>Décélération de 0.5 sec</li>\n</ul>\n<p><strong>Tâches :</strong></p>\n<ol>\n<li>Calculer la distance totale</li>\n<li>Déterminer les vitesses maximales</li>\n<li>Établir les équations de mouvement pour chaque phase</li>\n<li>Vérifier la continuité de la vitesse</li>\n</ol>\n<p><strong>Temps alloué</strong> : 25 minutes</p>\n<hr>\n",
              "components": [
                {
                  "type": "VideoPlayer",
                  "detected": true
                },
                {
                  "type": "ExerciseBlock",
                  "detected": true
                },
                {
                  "type": "CalloutBox",
                  "detected": true
                }
              ],
              "estimatedDuration": 35,
              "type": "content"
            },
            "type": "skills"
          }
        },
        {
          "component": "ModuleCard",
          "props": {
            "module": {
              "id": "-module-4-algbre-vectorielle-et-matricielle",
              "title": "\uddee Module 4 : Algèbre Vectorielle et Matricielle",
              "titleWithEmoji": "🧮 Module 4 : Algèbre Vectorielle et Matricielle",
              "emoji": "\ud83e",
              "order": 4,
              "content": "## Vecteurs en Robotique\n\nLes **vecteurs** représentent des grandeurs ayant une magnitude et une direction : forces, vitesses, positions relatives.\n\n### Opérations Vectorielles Fondamentales\n\n**Addition de vecteurs :**\n```\nA⃗ + B⃗ = (Ax + Bx, Ay + By, Az + Bz)\n```\n\n**Produit scalaire :**\n```\nA⃗ ⋅ B⃗ = Ax⋅Bx + Ay⋅By + Az⋅Bz = |A⃗|⋅|B⃗|⋅cos(θ)\n```\n\n**Produit vectoriel :**\n```\nA⃗ × B⃗ = (Ay⋅Bz - Az⋅By, Az⋅Bx - Ax⋅Bz, Ax⋅By - Ay⋅Bx)\n```\n\nLe produit vectoriel donne un vecteur perpendiculaire aux deux vecteurs originaux.\n\n### Applications en Robotique\n\n**Calcul de couples :**\nLe couple τ⃗ exercé par une force F⃗ à une distance r⃗ :\n```\nτ⃗ = r⃗ × F⃗\n```\n\n**Test de colinéarité :**\nDeux vecteurs sont colinéaires si leur produit vectoriel est nul.\n\n## Matrices en Robotique\n\nLes **matrices** sont omniprésentes en robotique pour représenter transformations, rotations et systèmes d'équations.\n\n> 📹 **Vidéo recommandée** : \"Applications pratiques des matrices\" (20min)\n\n### Opérations Matricielles\n\n**Multiplication de matrices :**\nPour multiplier A(m×n) et B(n×p), le résultat C(m×p) :\n```\nCij = Σ(k=1 à n) Aik ⋅ Bkj\n```\n\n**Inversion de matrice :**\nEssentielle pour la cinématique inverse :\n```\nA⁻¹ ⋅ A = I (matrice identité)\n```\n\n### Matrice Jacobienne\n\nLa **matrice jacobienne** relie les vitesses articulaires aux vitesses cartésiennes :\n\n```\nv⃗ = J ⋅ q̇⃗\n```\n\nOù :\n- v⃗ = vitesse cartésienne de l'effecteur\n- J = matrice jacobienne\n- q̇⃗ = vitesses articulaires\n\n### Déterminant et Singularités\n\nLe **déterminant** de la jacobienne indique les singularités :\n- det(J) = 0 → Configuration singulière\n- det(J) ≠ 0 → Configuration normale\n\n> ⚠️ **IMPORTANT** : Éviter les singularités en programmation de trajectoires\n\n## Exercice Pratique 4 : Analyse Vectorielle\n\n**Objectif** : Résoudre un problème d'équilibre des forces\n\n**Contexte :**\nUn robot manipule un objet de 5 kg. Trois forces s'appliquent :\n- F₁ = (10, 15, 0) N\n- F₂ = (-5, 8, 12) N  \n- F₃ = (?, ?, -20) N (force d'équilibre à calculer)\n\n**Tâches :**\n1. Calculer F₃ pour l'équilibre statique\n2. Déterminer l'angle entre F₁ et F₂\n3. Calculer le moment résultant par rapport à l'origine\n\n**Temps alloué** : 20 minutes\n\n---",
              "htmlContent": "<h2 id=\"vecteurs-en-robotique\" class=\"heading-2 text-2xl font-bold mb-4\">Vecteurs en Robotique</h2><p>Les <strong>vecteurs</strong> représentent des grandeurs ayant une magnitude et une direction : forces, vitesses, positions relatives.</p>\n<h3 id=\"oprations-vectorielles-fondamentales\" class=\"heading-3 text-xl font-bold mb-4\">Opérations Vectorielles Fondamentales</h3><p><strong>Addition de vecteurs :</strong></p>\n<pre><code>A⃗ + B⃗ = (Ax + Bx, Ay + By, Az + Bz)\n</code></pre>\n<p><strong>Produit scalaire :</strong></p>\n<pre><code>A⃗ ⋅ B⃗ = Ax⋅Bx + Ay⋅By + Az⋅Bz = |A⃗|⋅|B⃗|⋅cos(θ)\n</code></pre>\n<p><strong>Produit vectoriel :</strong></p>\n<pre><code>A⃗ × B⃗ = (Ay⋅Bz - Az⋅By, Az⋅Bx - Ax⋅Bz, Ax⋅By - Ay⋅Bx)\n</code></pre>\n<p>Le produit vectoriel donne un vecteur perpendiculaire aux deux vecteurs originaux.</p>\n<h3 id=\"applications-en-robotique\" class=\"heading-3 text-xl font-bold mb-4\">Applications en Robotique</h3><p><strong>Calcul de couples :</strong>\nLe couple τ⃗ exercé par une force F⃗ à une distance r⃗ :</p>\n<pre><code>τ⃗ = r⃗ × F⃗\n</code></pre>\n<p><strong>Test de colinéarité :</strong>\nDeux vecteurs sont colinéaires si leur produit vectoriel est nul.</p>\n<h2 id=\"matrices-en-robotique\" class=\"heading-2 text-2xl font-bold mb-4\">Matrices en Robotique</h2><p>Les <strong>matrices</strong> sont omniprésentes en robotique pour représenter transformations, rotations et systèmes d&#39;équations.</p>\n<div class=\"callout callout-video bg-purple-50 border-l-4 border-purple-400 p-4 my-4 rounded-r-lg\"><p>📹 <strong>Vidéo recommandée</strong> : &quot;Applications pratiques des matrices&quot; (20min)</p>\n</div><h3 id=\"oprations-matricielles\" class=\"heading-3 text-xl font-bold mb-4\">Opérations Matricielles</h3><p><strong>Multiplication de matrices :</strong>\nPour multiplier A(m×n) et B(n×p), le résultat C(m×p) :</p>\n<pre><code>Cij = Σ(k=1 à n) Aik ⋅ Bkj\n</code></pre>\n<p><strong>Inversion de matrice :</strong>\nEssentielle pour la cinématique inverse :</p>\n<pre><code>A⁻¹ ⋅ A = I (matrice identité)\n</code></pre>\n<h3 id=\"matrice-jacobienne\" class=\"heading-3 text-xl font-bold mb-4\">Matrice Jacobienne</h3><p>La <strong>matrice jacobienne</strong> relie les vitesses articulaires aux vitesses cartésiennes :</p>\n<pre><code>v⃗ = J ⋅ q̇⃗\n</code></pre>\n<p>Où :</p>\n<ul>\n<li>v⃗ = vitesse cartésienne de l&#39;effecteur</li>\n<li>J = matrice jacobienne</li>\n<li>q̇⃗ = vitesses articulaires</li>\n</ul>\n<h3 id=\"dterminant-et-singularits\" class=\"heading-3 text-xl font-bold mb-4\">Déterminant et Singularités</h3><p>Le <strong>déterminant</strong> de la jacobienne indique les singularités :</p>\n<ul>\n<li>det(J) = 0 → Configuration singulière</li>\n<li>det(J) ≠ 0 → Configuration normale</li>\n</ul>\n<div class=\"callout callout-warning bg-yellow-50 border-l-4 border-yellow-400 p-4 my-4 rounded-r-lg\"><p>⚠️ <strong>IMPORTANT</strong> : Éviter les singularités en programmation de trajectoires</p>\n</div><h2 id=\"exercice-pratique-4-analyse-vectorielle\" class=\"heading-2 text-2xl font-bold mb-4\">Exercice Pratique 4 : Analyse Vectorielle</h2><p><strong>Objectif</strong> : Résoudre un problème d&#39;équilibre des forces</p>\n<p><strong>Contexte :</strong>\nUn robot manipule un objet de 5 kg. Trois forces s&#39;appliquent :</p>\n<ul>\n<li>F₁ = (10, 15, 0) N</li>\n<li>F₂ = (-5, 8, 12) N  </li>\n<li>F₃ = (?, ?, -20) N (force d&#39;équilibre à calculer)</li>\n</ul>\n<p><strong>Tâches :</strong></p>\n<ol>\n<li>Calculer F₃ pour l&#39;équilibre statique</li>\n<li>Déterminer l&#39;angle entre F₁ et F₂</li>\n<li>Calculer le moment résultant par rapport à l&#39;origine</li>\n</ol>\n<p><strong>Temps alloué</strong> : 20 minutes</p>\n<hr>\n",
              "components": [
                {
                  "type": "VideoPlayer",
                  "detected": true
                },
                {
                  "type": "ExerciseBlock",
                  "detected": true
                },
                {
                  "type": "CalloutBox",
                  "detected": true
                }
              ],
              "estimatedDuration": 40,
              "type": "content"
            },
            "type": "skills"
          }
        },
        {
          "component": "ModuleCard",
          "props": {
            "module": {
              "id": "-module-5-trigonomtrie-applique",
              "title": "\udccf Module 5 : Trigonométrie Appliquée",
              "titleWithEmoji": "📏 Module 5 : Trigonométrie Appliquée",
              "emoji": "\ud83d",
              "order": 5,
              "content": "## Fonctions Trigonométriques Essentielles\n\nLa **trigonométrie** est indispensable pour résoudre les problèmes de positionnement et d'orientation en robotique.\n\n### Relations Fondamentales\n\n**Triangle rectangle :**\n```\nsin(θ) = opposé / hypoténuse\ncos(θ) = adjacent / hypoténuse  \ntan(θ) = opposé / adjacent\n```\n\n**Identités utiles :**\n```\nsin²(θ) + cos²(θ) = 1\ntan(θ) = sin(θ) / cos(θ)\nsin(2θ) = 2⋅sin(θ)⋅cos(θ)\ncos(2θ) = cos²(θ) - sin²(θ)\n```\n\n### Loi des Cosinus\n\nPour un triangle quelconque avec côtés a, b, c et angle C opposé au côté c :\n```\nc² = a² + b² - 2⋅a⋅b⋅cos(C)\n```\n\nCette loi est cruciale pour la cinématique inverse.\n\n### Loi des Sinus\n\n```\na/sin(A) = b/sin(B) = c/sin(C)\n```\n\n## Applications Robotiques Spécifiques\n\n### Calcul d'Angles Articulaires\n\n**Problème type :** Robot SCARA avec deux liens\n- Lien 1 : longueur L₁\n- Lien 2 : longueur L₂\n- Position cible : (x, y)\n\n**Solution par loi des cosinus :**\n```\ncos(θ₂) = (x² + y² - L₁² - L₂²) / (2⋅L₁⋅L₂)\nθ₂ = ±arccos(cos(θ₂))\n```\n\n### Orientation d'Outils\n\n**Calcul de l'angle d'approche :**\nPour approcher perpendiculairement une surface inclinée d'angle α :\n```\nθ_outil = 90° - α\n```\n\n## Exercice Pratique 5 : Problème de Positionnement\n\n**Objectif** : Résoudre un problème de cinématique inverse complexe\n\n**Configuration :**\nRobot planaire à 3 degrés de liberté :\n- L₁ = 300mm (bras principal)\n- L₂ = 200mm (avant-bras)  \n- L₃ = 100mm (poignet)\n\n**Mission :**\nAtteindre le point (400, 300) avec orientation de l'effecteur à 45°\n\n**Instructions :**\n1. Utiliser la loi des cosinus pour θ₂\n2. Calculer θ₁ par trigonométrie\n3. Déterminer θ₃ pour l'orientation finale\n4. Vérifier par cinématique directe\n\n**Temps alloué** : 35 minutes\n\n---",
              "htmlContent": "<h2 id=\"fonctions-trigonomtriques-essentielles\" class=\"heading-2 text-2xl font-bold mb-4\">Fonctions Trigonométriques Essentielles</h2><p>La <strong>trigonométrie</strong> est indispensable pour résoudre les problèmes de positionnement et d&#39;orientation en robotique.</p>\n<h3 id=\"relations-fondamentales\" class=\"heading-3 text-xl font-bold mb-4\">Relations Fondamentales</h3><p><strong>Triangle rectangle :</strong></p>\n<pre><code>sin(θ) = opposé / hypoténuse\ncos(θ) = adjacent / hypoténuse  \ntan(θ) = opposé / adjacent\n</code></pre>\n<p><strong>Identités utiles :</strong></p>\n<pre><code>sin²(θ) + cos²(θ) = 1\ntan(θ) = sin(θ) / cos(θ)\nsin(2θ) = 2⋅sin(θ)⋅cos(θ)\ncos(2θ) = cos²(θ) - sin²(θ)\n</code></pre>\n<h3 id=\"loi-des-cosinus\" class=\"heading-3 text-xl font-bold mb-4\">Loi des Cosinus</h3><p>Pour un triangle quelconque avec côtés a, b, c et angle C opposé au côté c :</p>\n<pre><code>c² = a² + b² - 2⋅a⋅b⋅cos(C)\n</code></pre>\n<p>Cette loi est cruciale pour la cinématique inverse.</p>\n<h3 id=\"loi-des-sinus\" class=\"heading-3 text-xl font-bold mb-4\">Loi des Sinus</h3><pre><code>a/sin(A) = b/sin(B) = c/sin(C)\n</code></pre>\n<h2 id=\"applications-robotiques-spcifiques\" class=\"heading-2 text-2xl font-bold mb-4\">Applications Robotiques Spécifiques</h2><h3 id=\"calcul-d39angles-articulaires\" class=\"heading-3 text-xl font-bold mb-4\">Calcul d&#39;Angles Articulaires</h3><p><strong>Problème type :</strong> Robot SCARA avec deux liens</p>\n<ul>\n<li>Lien 1 : longueur L₁</li>\n<li>Lien 2 : longueur L₂</li>\n<li>Position cible : (x, y)</li>\n</ul>\n<p><strong>Solution par loi des cosinus :</strong></p>\n<pre><code>cos(θ₂) = (x² + y² - L₁² - L₂²) / (2⋅L₁⋅L₂)\nθ₂ = ±arccos(cos(θ₂))\n</code></pre>\n<h3 id=\"orientation-d39outils\" class=\"heading-3 text-xl font-bold mb-4\">Orientation d&#39;Outils</h3><p><strong>Calcul de l&#39;angle d&#39;approche :</strong>\nPour approcher perpendiculairement une surface inclinée d&#39;angle α :</p>\n<pre><code>θ_outil = 90° - α\n</code></pre>\n<h2 id=\"exercice-pratique-5-problme-de-positionnement\" class=\"heading-2 text-2xl font-bold mb-4\">Exercice Pratique 5 : Problème de Positionnement</h2><p><strong>Objectif</strong> : Résoudre un problème de cinématique inverse complexe</p>\n<p><strong>Configuration :</strong>\nRobot planaire à 3 degrés de liberté :</p>\n<ul>\n<li>L₁ = 300mm (bras principal)</li>\n<li>L₂ = 200mm (avant-bras)  </li>\n<li>L₃ = 100mm (poignet)</li>\n</ul>\n<p><strong>Mission :</strong>\nAtteindre le point (400, 300) avec orientation de l&#39;effecteur à 45°</p>\n<p><strong>Instructions :</strong></p>\n<ol>\n<li>Utiliser la loi des cosinus pour θ₂</li>\n<li>Calculer θ₁ par trigonométrie</li>\n<li>Déterminer θ₃ pour l&#39;orientation finale</li>\n<li>Vérifier par cinématique directe</li>\n</ol>\n<p><strong>Temps alloué</strong> : 35 minutes</p>\n<hr>\n",
              "components": [
                {
                  "type": "ExerciseBlock",
                  "detected": true
                }
              ],
              "estimatedDuration": 12,
              "type": "content"
            },
            "type": "skills"
          }
        },
        {
          "component": "ModuleCard",
          "props": {
            "module": {
              "id": "module-6-applications-pratiques-et-rsolution-de-problmes",
              "title": "Module 6 : Applications Pratiques et Résolution de Problèmes",
              "titleWithEmoji": "🎯 Module 6 : Applications Pratiques et Résolution de Problèmes",
              "emoji": "🎯",
              "order": 6,
              "content": "## Méthodologie de Résolution\n\nFace à un problème robotique complexe, suivre cette **approche structurée** :\n\n### Étape 1 : Analyse du Problème\n1. **Identifier** les contraintes géométriques\n2. **Définir** les systèmes de coordonnées\n3. **Lister** les inconnues et données\n4. **Choisir** les outils mathématiques appropriés\n\n### Étape 2 : Modélisation Mathématique\n1. **Établir** les équations de base\n2. **Simplifier** si possible\n3. **Vérifier** la cohérence dimensionnelle\n4. **Prévoir** les cas limites\n\n### Étape 3 : Résolution et Validation\n1. **Résoudre** étape par étape\n2. **Vérifier** les résultats par méthode alternative\n3. **Tester** avec des valeurs limites\n4. **Interpréter** physiquement les solutions\n\n## Cas d'Étude Complet : Robot de Soudage\n\n### Contexte\nUn robot de soudage 6 axes doit suivre une trajectoire circulaire de rayon 50mm, centrée en (200, 150, 100), dans le plan Z = 100mm.\n\n### Analyse Mathématique\n\n**Paramètrisation de la trajectoire :**\n```\nx(t) = 200 + 50⋅cos(ωt)\ny(t) = 150 + 50⋅sin(ωt)  \nz(t) = 100\n```\n\n**Vitesses requises :**\n```\nvx(t) = -50ω⋅sin(ωt)\nvy(t) = 50ω⋅cos(ωt)\nvz(t) = 0\n```\n\n**Accélérations :**\n```\nax(t) = -50ω²⋅cos(ωt)\nay(t) = -50ω²⋅sin(ωt)\naz(t) = 0\n```\n\n### Contraintes de Performance\n\n**Vitesse maximale :** 100 mm/s\n```\n|v|max = 50ω → ω ≤ 2 rad/s\n```\n\n**Accélération maximale :** 500 mm/s²\n```\n|a|max = 50ω² → ω ≤ √10 ≈ 3.16 rad/s\n```\n\nLa contrainte de vitesse est **limitante** : ω = 2 rad/s maximum.\n\n### Orientation de l'Outil\n\n**Vecteur tangent à la trajectoire :**\n```\nT⃗(t) = (-sin(ωt), cos(ωt), 0)\n```\n\n**Angle d'orientation :**\n```\nθ(t) = arctan(cos(ωt) / -sin(ωt)) = ωt - π/2\n```\n\n## Exercice Pratique Final : Projet Intégré\n\n**Objectif** : Intégrer tous les concepts mathématiques\n\n**Projet :** Conception d'une cellule robotique de palettisation\n\n**Spécifications :**\n- Robot 4 axes (SCARA + rotation + translation Z)\n- Zone de travail : 1000mm × 800mm\n- Hauteur : 0 à 500mm\n- Palettes : 1200mm × 800mm\n- Objets : cubes de 100mm × 100mm × 100mm\n\n**Livrables :**\n1. **Analyse géométrique** de l'espace de travail\n2. **Calcul des limites articulaires** requises\n3. **Programmation mathématique** d'un motif de palettisation\n4. **Optimisation de trajectoire** pour temps de cycle minimal\n5. **Validation** par simulation\n\n**Critères d'évaluation :**\n- Exactitude des calculs mathématiques (40%)\n- Méthodologie de résolution (30%)\n- Optimisation et efficacité (20%)\n- Présentation et clarté (10%)\n\n**Temps alloué** : 90 minutes\n\n> 💡 **ASTUCE** : Utilisez les outils en ligne pour vérifier vos calculs matriciels et trigonométriques complexes.\n\n---\n\n## 📋 Récapitulatif et Points Clés\n\n### Concepts Maîtrisés ✅\n\n1. **Systèmes de coordonnées** : Cartésien, cylindrique, sphérique\n2. **Transformations géométriques** : Translation, rotation, matrices homogènes  \n3. **Cinématique** : Directe, inverse, trajectoires\n4. **Algèbre vectorielle** : Produits scalaire et vectoriel, applications\n5. **Matrices** : Multiplication, inversion, jacobienne\n6. **Trigonométrie** : Fonctions, identités, lois des cosinus/sinus\n\n### Formules Essentielles 📐\n\n**Transformation homogène :**\n```\n[R  t]   [p]   [Rp + t]\n[0  1] ⋅ [1] = [  1   ]\n```\n\n**Cinématique directe 2D :**\n```\nx = L₁cos(θ₁) + L₂cos(θ₁+θ₂)\ny = L₁sin(θ₁) + L₂sin(θ₁+θ₂)\n```\n\n**Vitesse en coordonnées polaires :**\n```\nvr = ṙ\nvθ = rθ̇\n```\n\n### Applications Industrielles 🏭\n\n- **Programmation de trajectoires** optimisées\n- **Calibrage et étalonnage** de robots\n- **Diagnostic de singularités** et limitations\n- **Calcul de forces et couples** requis\n- **Optimisation de cycles** de production\n\n### Ressources pour Approfondir 📚\n\n- Formulaires mathématiques spécialisés robotique\n- Simulateurs de cinématique en ligne\n- Logiciels de calcul matriciel (MATLAB, Octave)\n- Standards industriels de programmation robot\n\n---\n\n*Cette formation vous donne les bases mathématiques solides nécessaires pour exceller comme technicien en robotique. Continuez à pratiquer ces concepts dans vos applications quotidiennes !*",
              "htmlContent": "<h2 id=\"mthodologie-de-rsolution\" class=\"heading-2 text-2xl font-bold mb-4\">Méthodologie de Résolution</h2><p>Face à un problème robotique complexe, suivre cette <strong>approche structurée</strong> :</p>\n<h3 id=\"tape-1-analyse-du-problme\" class=\"heading-3 text-xl font-bold mb-4\">Étape 1 : Analyse du Problème</h3><ol>\n<li><strong>Identifier</strong> les contraintes géométriques</li>\n<li><strong>Définir</strong> les systèmes de coordonnées</li>\n<li><strong>Lister</strong> les inconnues et données</li>\n<li><strong>Choisir</strong> les outils mathématiques appropriés</li>\n</ol>\n<h3 id=\"tape-2-modlisation-mathmatique\" class=\"heading-3 text-xl font-bold mb-4\">Étape 2 : Modélisation Mathématique</h3><ol>\n<li><strong>Établir</strong> les équations de base</li>\n<li><strong>Simplifier</strong> si possible</li>\n<li><strong>Vérifier</strong> la cohérence dimensionnelle</li>\n<li><strong>Prévoir</strong> les cas limites</li>\n</ol>\n<h3 id=\"tape-3-rsolution-et-validation\" class=\"heading-3 text-xl font-bold mb-4\">Étape 3 : Résolution et Validation</h3><ol>\n<li><strong>Résoudre</strong> étape par étape</li>\n<li><strong>Vérifier</strong> les résultats par méthode alternative</li>\n<li><strong>Tester</strong> avec des valeurs limites</li>\n<li><strong>Interpréter</strong> physiquement les solutions</li>\n</ol>\n<h2 id=\"cas-d39tude-complet-robot-de-soudage\" class=\"heading-2 text-2xl font-bold mb-4\">Cas d&#39;Étude Complet : Robot de Soudage</h2><h3 id=\"contexte\" class=\"heading-3 text-xl font-bold mb-4\">Contexte</h3><p>Un robot de soudage 6 axes doit suivre une trajectoire circulaire de rayon 50mm, centrée en (200, 150, 100), dans le plan Z = 100mm.</p>\n<h3 id=\"analyse-mathmatique\" class=\"heading-3 text-xl font-bold mb-4\">Analyse Mathématique</h3><p><strong>Paramètrisation de la trajectoire :</strong></p>\n<pre><code>x(t) = 200 + 50⋅cos(ωt)\ny(t) = 150 + 50⋅sin(ωt)  \nz(t) = 100\n</code></pre>\n<p><strong>Vitesses requises :</strong></p>\n<pre><code>vx(t) = -50ω⋅sin(ωt)\nvy(t) = 50ω⋅cos(ωt)\nvz(t) = 0\n</code></pre>\n<p><strong>Accélérations :</strong></p>\n<pre><code>ax(t) = -50ω²⋅cos(ωt)\nay(t) = -50ω²⋅sin(ωt)\naz(t) = 0\n</code></pre>\n<h3 id=\"contraintes-de-performance\" class=\"heading-3 text-xl font-bold mb-4\">Contraintes de Performance</h3><p><strong>Vitesse maximale :</strong> 100 mm/s</p>\n<pre><code>|v|max = 50ω → ω ≤ 2 rad/s\n</code></pre>\n<p><strong>Accélération maximale :</strong> 500 mm/s²</p>\n<pre><code>|a|max = 50ω² → ω ≤ √10 ≈ 3.16 rad/s\n</code></pre>\n<p>La contrainte de vitesse est <strong>limitante</strong> : ω = 2 rad/s maximum.</p>\n<h3 id=\"orientation-de-l39outil\" class=\"heading-3 text-xl font-bold mb-4\">Orientation de l&#39;Outil</h3><p><strong>Vecteur tangent à la trajectoire :</strong></p>\n<pre><code>T⃗(t) = (-sin(ωt), cos(ωt), 0)\n</code></pre>\n<p><strong>Angle d&#39;orientation :</strong></p>\n<pre><code>θ(t) = arctan(cos(ωt) / -sin(ωt)) = ωt - π/2\n</code></pre>\n<h2 id=\"exercice-pratique-final-projet-intgr\" class=\"heading-2 text-2xl font-bold mb-4\">Exercice Pratique Final : Projet Intégré</h2><p><strong>Objectif</strong> : Intégrer tous les concepts mathématiques</p>\n<p><strong>Projet :</strong> Conception d&#39;une cellule robotique de palettisation</p>\n<p><strong>Spécifications :</strong></p>\n<ul>\n<li>Robot 4 axes (SCARA + rotation + translation Z)</li>\n<li>Zone de travail : 1000mm × 800mm</li>\n<li>Hauteur : 0 à 500mm</li>\n<li>Palettes : 1200mm × 800mm</li>\n<li>Objets : cubes de 100mm × 100mm × 100mm</li>\n</ul>\n<p><strong>Livrables :</strong></p>\n<ol>\n<li><strong>Analyse géométrique</strong> de l&#39;espace de travail</li>\n<li><strong>Calcul des limites articulaires</strong> requises</li>\n<li><strong>Programmation mathématique</strong> d&#39;un motif de palettisation</li>\n<li><strong>Optimisation de trajectoire</strong> pour temps de cycle minimal</li>\n<li><strong>Validation</strong> par simulation</li>\n</ol>\n<p><strong>Critères d&#39;évaluation :</strong></p>\n<ul>\n<li>Exactitude des calculs mathématiques (40%)</li>\n<li>Méthodologie de résolution (30%)</li>\n<li>Optimisation et efficacité (20%)</li>\n<li>Présentation et clarté (10%)</li>\n</ul>\n<p><strong>Temps alloué</strong> : 90 minutes</p>\n<div class=\"callout callout-tip bg-blue-50 border-l-4 border-blue-400 p-4 my-4 rounded-r-lg\"><p>💡 <strong>ASTUCE</strong> : Utilisez les outils en ligne pour vérifier vos calculs matriciels et trigonométriques complexes.</p>\n</div><hr>\n<h2 id=\"-rcapitulatif-et-points-cls\" class=\"heading-2 text-2xl font-bold mb-4\">📋 Récapitulatif et Points Clés</h2><h3 id=\"concepts-matriss-\" class=\"heading-3 text-xl font-bold mb-4\">Concepts Maîtrisés ✅</h3><ol>\n<li><strong>Systèmes de coordonnées</strong> : Cartésien, cylindrique, sphérique</li>\n<li><strong>Transformations géométriques</strong> : Translation, rotation, matrices homogènes  </li>\n<li><strong>Cinématique</strong> : Directe, inverse, trajectoires</li>\n<li><strong>Algèbre vectorielle</strong> : Produits scalaire et vectoriel, applications</li>\n<li><strong>Matrices</strong> : Multiplication, inversion, jacobienne</li>\n<li><strong>Trigonométrie</strong> : Fonctions, identités, lois des cosinus/sinus</li>\n</ol>\n<h3 id=\"formules-essentielles-\" class=\"heading-3 text-xl font-bold mb-4\">Formules Essentielles 📐</h3><p><strong>Transformation homogène :</strong></p>\n<pre><code>[R  t]   [p]   [Rp + t]\n[0  1] ⋅ [1] = [  1   ]\n</code></pre>\n<p><strong>Cinématique directe 2D :</strong></p>\n<pre><code>x = L₁cos(θ₁) + L₂cos(θ₁+θ₂)\ny = L₁sin(θ₁) + L₂sin(θ₁+θ₂)\n</code></pre>\n<p><strong>Vitesse en coordonnées polaires :</strong></p>\n<pre><code>vr = ṙ\nvθ = rθ̇\n</code></pre>\n<h3 id=\"applications-industrielles-\" class=\"heading-3 text-xl font-bold mb-4\">Applications Industrielles 🏭</h3><ul>\n<li><strong>Programmation de trajectoires</strong> optimisées</li>\n<li><strong>Calibrage et étalonnage</strong> de robots</li>\n<li><strong>Diagnostic de singularités</strong> et limitations</li>\n<li><strong>Calcul de forces et couples</strong> requis</li>\n<li><strong>Optimisation de cycles</strong> de production</li>\n</ul>\n<h3 id=\"ressources-pour-approfondir-\" class=\"heading-3 text-xl font-bold mb-4\">Ressources pour Approfondir 📚</h3><ul>\n<li>Formulaires mathématiques spécialisés robotique</li>\n<li>Simulateurs de cinématique en ligne</li>\n<li>Logiciels de calcul matriciel (MATLAB, Octave)</li>\n<li>Standards industriels de programmation robot</li>\n</ul>\n<hr>\n<p><em>Cette formation vous donne les bases mathématiques solides nécessaires pour exceller comme technicien en robotique. Continuez à pratiquer ces concepts dans vos applications quotidiennes !</em></p>\n",
              "components": [
                {
                  "type": "ExerciseBlock",
                  "detected": true
                },
                {
                  "type": "CalloutBox",
                  "detected": true
                }
              ],
              "estimatedDuration": 24,
              "type": "practice"
            },
            "type": "skills"
          }
        }
      ],
      "resources": "ResourceList",
      "assessment": "QuizSection",
      "equipment": null
    },
    "features": [
      "progression",
      "exercises",
      "assessment",
      "certification"
    ],
    "sections": [
      "introduction",
      "content",
      "practice",
      "evaluation"
    ]
  }
}
